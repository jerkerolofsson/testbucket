@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="tb-chat-text-field">
<Microsoft.AspNetCore.Components.Forms.InputTextArea rows="@Lines"
                                                         id="@_id"
                                                     @attributes="InputAttributes"
                                                     @oninput="HandleInput"
                                                     Value="@_text"
                                                     ValueExpression="() => _text"
                                                     @onkeydown="HandleKeyPress" />
</div>
@code {

    private string _id = "tb-chat-tf-" + Guid.NewGuid().ToString("N");
    private IJSObjectReference? _module;

    [Parameter] public int? Lines { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }
    [Parameter] public EventCallback<string?> OnEnter { get; set; }

    /// <summary>
    /// TextChanged invoked for every update
    /// </summary>
    [Parameter] public bool Immediate { get; set; } = true;

    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? InputAttributes { get; set; }

    private string _text = "";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/TestBucket.Blazor/Components/ChatTextField.razor.js");
        }
    }

    protected override void OnParametersSet()
    {
        _text = Text ?? "";
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        _text = e.Value?.ToString() ?? "";
        if (Immediate)
        {
            await TextChanged.InvokeAsync(_text);
        }
    }


    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            if(!Immediate)
            {
                await TextChanged.InvokeAsync(_text);
            }

            var text = _text.TrimEnd('\n');

            // Clear after send
            _text = "";
            this.StateHasChanged();

            // Clear the textarea using JavaScript interop
            if (_module != null)
            {
                await _module.InvokeVoidAsync("clearChatField", _id);
            }

            await OnEnter.InvokeAsync(text);

        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }
}