@using TestBucket.Components.Shared.Profile

@inherits LayoutComponentBase
@inject HotKeys HotKeys
@inject NavigationManager navigationManager
@inject TenantResolver tenantResolver
@inject AuthenticationStateProvider authStateProvider
@inject ProjectController projectService
@inject TestCaseEditorController testCaseEditor
@inject TeamController teamService
@inject TenantController tenantController
@inject ThemingService themingService
@inject AppNavigationManager appNavigationManager
@inject IUnifiedSearchManager unifiedSearchManager
@inject IStringLocalizer<SharedStrings> loc

<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@_isDarkMode" />
<TbThemeProvider UserPreferencesChanged="OnUserPreferencesChanged"/>
<MudSnackbarProvider />
<MudPopoverProvider />
<MudDialogProvider MaxWidth="MaxWidth.ExtraLarge" />
<ProgressStatus/>
<CommandBindings/>

@{
    string tenantAdminUrl = $"{tenantId}/tenants";
    string teamAdminUrl = $"{tenantId}/Settings/Teams";
    string projectAdminUrl = $"{tenantId}/Settings/ManageProjects";
    string projectSettingsUrl = $"{tenantId}/Settings/Projects/{_project?.Slug}";
    if(_project is null)
    {
        projectSettingsUrl = $"{tenantId}/Settings/Projects";
    }
    string homeUrl = $"/{tenantId}";
    string authUrl = $"/{tenantId}/Auth";
    string codeUrl = $"/{tenantId}/Code";
    string requirementsUrl = $"/{tenantId}/Requirements";
    string reportingUrl = $"/{tenantId}/Reporting";
    string issuesUrl = $"/{tenantId}/Issues";
    string testsUrl = $"/{tenantId}/Testing";
    string settingsUrl = $"/{tenantId}/Settings";
    string manageUrl = $"/{tenantId}/Account/Manage";
    string registerUrl = $"/{tenantId}/Account/Register";
    string loginUrl = $"/{tenantId}/Account/Login?returnUrl=/{tenantId}";
}

<CascadingValue Value="@_tenant">
    <CascadingValue Value="@_project">
        <CascadingValue Value="@_team">

            <div style="display: grid; grid-template-rows: auto 1fr;" class="container-fill">

                <MudToolBar Style="@MenuStyle" Class="@MenuClass">
                    <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">

                        @* <TeamDropDown SelectedTeam="@_team" SelectedTeamChanged="OnSelectedTeamChanged" /> *@

                        <ProjectBadgePicker Team="@_team" SelectedProject="@_project" SelectedProjectChanged="OnSelectedProjectChanged" />
                        @* <ProjectDropDown Team="@_team" SelectedProject="@_project" SelectedProjectChanged="OnSelectedProjectChanged" /> *@

                        <TbNavLink Href="@codeUrl">@loc["code"]</TbNavLink>
                        <TbNavLink Href="@requirementsUrl">@loc["requirements"]</TbNavLink>
                        <TbNavLink Href="@testsUrl">@loc["testing"]</TbNavLink>
                        <TbNavLink Href="@issuesUrl">@loc["issues"]</TbNavLink>
                        <TbNavLink Href="@reportingUrl">@loc["reporting"]</TbNavLink>

                        <MudSpacer/>

                        <UnifiedSearch/>

                        <MudMenu Icon="@Icons.Material.Filled.Add">
                            <CommandMenuItems TypeNames="menu-new"/>
                        </MudMenu>

                        <DarkModeToggle IsDarkMode="@_isDarkMode" IsDarkModeChanged="OnDarkModeChanged"/>
                        <SelfProfileImage/>
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Href="@settingsUrl"></MudIconButton>

                        <MudMenu Icon="@Icons.Material.Filled.MoreVert">



                            <!-- Profile / Logout -->
                            <AuthorizeView>
                                <MudDivider />
                                <MudMenuItem Icon="@Icons.Material.Filled.ManageAccounts" Label="@loc["account"]" Href="@manageUrl"></MudMenuItem>
                                <MudMenuItem Label="@loc["about"]" Href="/about"></MudMenuItem>
                                <MudMenuItem>
                                    <form action="Account/Logout" method="post">
                                        <AntiforgeryToken />
                                        <input type="hidden" name="ReturnUrl" value="/" />
                                        <button type="submit">@loc["logout"]</button>
                                    </form>
                                </MudMenuItem>
                            </AuthorizeView>
                        </MudMenu>
                    </MudStack>
                </MudToolBar>

                <main class="container-fill">
                    <article class="content container-fill">
                        @Body
                    </article>
                </main>

            </div>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code {
    private Team? _team;
    private TestProject? _project;
    private Tenant? _tenant;
    private string? tenantId;
    private string? currentUrl;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = default!;

    public string MenuStyle => $"width: 100%; ";
    public string MenuClass => $"tb-toolbar main " + (_isDarkMode ? "dark" : "light");

    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        tenantId = state.User.Claims.FirstOrDefault(x => x.Type == "tenant")?.Value;
        _tenant = await tenantController.GetTenantAsync();

        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.LocationChanged += OnLocationChanged;

        var isDarkMode = await themingService.IsDarkModeAsync();
        if (isDarkMode != _isDarkMode)
        {
            _isDarkMode = isDarkMode;
        }
    }

    private void OnUserPreferencesChanged(UserPreferences preferences)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OnDarkModeChanged(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;
        await themingService.SetDarkModeAsync(isDarkMode);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_project is null)
            {
                _project = await projectService.GetActiveProjectAsync();
            }
            if (_team is null)
            {
                _team = await teamService.GetActiveTeamAsync();
            }


            var isDarkMode = await themingService.IsDarkModeAsync();
            if(isDarkMode != _isDarkMode)
            {
                _isDarkMode = isDarkMode;
                StateHasChanged();
            }
            StateHasChanged();
        }
    }


    private async Task OnSelectedTeamChanged(Team? team)
    {
        _project = null;
        _team = team;
        await teamService.SetActiveTeamAsync(team);
    }
    private async Task OnSelectedProjectChanged(TestProject? testProject)
    {
        _team = testProject?.Team;
        _project = testProject;
        await projectService.SetActiveProjectAsync(testProject);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = navigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
}