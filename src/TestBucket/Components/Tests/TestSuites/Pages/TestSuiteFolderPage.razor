@attribute [Authorize()]
@page "/{TenantId}/Testing/TestSuites/{SuiteId:long}/Folders/{FolderId:long}"
@using TestBucket.Domain
@layout TestingLayout
@inject TestBrowser testBrowser
@inject AppNavigationManager appNavigationManager

<div class="container-fill-2-rows">
    <MudToolBar Class="tb-toolbar">
        <PathNavigation FolderId="@FolderId" />
    </MudToolBar>

    <Splitter Style="height: 100%; width:100%" Bordered="false" Dimension="80" EnableMargin="false" Color="Color.Tertiary">
        <StartContent>

            <article class="center">
                <MudStack>
                    <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                        <MudIcon Icon="@TbIcons.BoldOutline.Folder" Size="Size.Large" />
                        <MudText Typo="Typo.h2">@_testSuiteFolder?.Name</MudText>
                    </MudStack>

                    <TestCaseGrid Query="_query" QueryChanged="OnQueryChanged" Project="@Project" TestSuiteId="@SuiteId" FolderId="@FolderId" CompareFolder="true" OnTestCaseClicked="OnTestCaseClicked" OnTestSuiteFolderClicked="OnFolderClicked" />
                </MudStack>
            </article>
        </StartContent>
        <EndContent>
            <MudStack Class="pa-2" Style="width: 100%">
                <TestSuiteFolderEditor Folder="@_testSuiteFolder" />
            </MudStack>
        </EndContent>
    </Splitter>
</div>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    [Parameter] public long SuiteId { get; set; }
    [Parameter] public long FolderId { get; set; }

    private TestSuite? _testSuite = null;
    private TestSuiteFolder? _testSuiteFolder = null;
    private SearchTestQuery _query = new();

    /// <summary>
    /// Load the test suite when changed
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        bool changed = false;
        if (_testSuiteFolder is null || _testSuiteFolder.Id != FolderId)
        {
            _testSuiteFolder = await testBrowser.GetTestSuiteFolderByIdAsync(FolderId);
            appNavigationManager.State.SetSelectedTestSuiteFolder(_testSuiteFolder);
            changed = true;

        }
        if (_testSuiteFolder is not null)
        {
            if (_testSuite is null || _testSuite.Id != _testSuiteFolder.TestSuiteId)
            {
                _testSuite = await testBrowser.GetTestSuiteByIdAsync(_testSuiteFolder.TestSuiteId);
                appNavigationManager.State.SetSelectedTestSuiteFolder(_testSuiteFolder, _testSuite);
                changed = true;
            }
        }

        // if (_query is null || (Query is not null && _query.ToSearchText() != Query.ToSearchText()))
        // {
        //     changed = true;
        // }

        if(changed)
        {
            OnQueryChanged(null);
        }
    }

    private void OnQueryChanged(SearchTestQuery? query)
    {
        if (query is null)
        {
            _query = new();
            _query.ProjectId = _testSuite?.TestProjectId;
            _query.CompareFolder = true;
            _query.TestSuiteId = _testSuite?.Id;
            _query.FolderId = _testSuiteFolder?.Id;
        }
        else
        {
            _query = query;
            _query.CompareFolder = true;
            _query.TestSuiteId = _testSuite?.Id;
            _query.FolderId = _testSuiteFolder?.Id;
        }
    }

    private void OnFolderClicked(TestSuiteFolder folder)
    {
        appNavigationManager.NavigateTo(folder);
    }
    private void OnTestCaseClicked(TestCase testCase)
    {
        appNavigationManager.NavigateTo(testCase);
    }

}
