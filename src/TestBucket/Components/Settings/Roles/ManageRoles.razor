@attribute [Authorize(Roles = "ADMIN")]
@layout SettingsLayout
@inject RolesController rolesController
@page "/{tenantId}/settings/roles"
@using TestBucket.Components.Shared.Permissions
@using TestBucket.Domain.Identity.Permissions
@inject IStringLocalizer<SharedStrings> loc
@inject RoleLocalizer roleLocalizer

<MudStack Class="container-settings-page">

    <MudText Class="mb-3" Typo="Typo.h1">@loc["roles"]</MudText>

    <table>
        <thead>
            <tr>
                <th></th>
                @foreach(var role in _roles)
                {
                    <th>@roleLocalizer.GetLocalizedRole(role)</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var entityType in _entities)
            {
                <tr>
                    <td>@entityType</td>
                    @foreach (var role in _roles)
                    {
                        <td>
                            @{
                                var permission = _permissions.Where(x => x.Entity == entityType && x.Role == role).FirstOrDefault();
                            }
                            @if(permission is not null)
                            {
                                <div class="tb-permission-level cursor-pointer" @onclick="async () => await ToggleLevelAsync(entityType, permission)">

                                    <div class="d-flex permission-level-abbr">
                                        <div class="@((permission.Level & PermissionLevel.Read) == PermissionLevel.Read ? "yes": "no")">R</div>
                                        <div class="@((permission.Level & PermissionLevel.Execute) == PermissionLevel.Execute ? "yes": "no")">E</div>
                                        <div class="@((permission.Level & PermissionLevel.Write) == PermissionLevel.Write ? "yes": "no")">W</div>
                                        <div class="@((permission.Level & PermissionLevel.Approve) == PermissionLevel.Approve ? "yes": "no")">A</div>
                                        <div class="@((permission.Level & PermissionLevel.Delete) == PermissionLevel.Delete ? "yes": "no")">D</div>
                                    </div>

                                    <div style="@GetStyle(permission.Level)">@roleLocalizer.GetLocalizedPermissionLevel(permission.Level)</div>
                                </div>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

</MudStack>

@code {
    [Parameter] public string? TenantId { get; set; }

    private PermissionEntityType[] _entities = [PermissionEntityType.Project, PermissionEntityType.User, 
        PermissionEntityType.TestAccount, 
        PermissionEntityType.TestResource, 
        PermissionEntityType.TestCase, 
        PermissionEntityType.Requirement, 
        PermissionEntityType.TestSuite,
        PermissionEntityType.TestCaseRun,
        PermissionEntityType.TestRun,
        PermissionEntityType.Runner];
    private List<RolePermission> _permissions = [];
    private string[] _roles = [Roles.READ_ONLY, Roles.REGULAR_USER, Roles.ADMIN, Roles.SUPERADMIN];


    public string GetStyle(PermissionLevel level)
    {
        if((level&PermissionLevel.Delete) == PermissionLevel.Delete)
        {
            return "color: var(--mud-palette-error)";
        }
        if((level&PermissionLevel.Read) == PermissionLevel.Read)
        {
            return "color: var(--mud-palette-success)";
        }

        return "color: var(--mud-palette-text-primary)";
    }

    protected async Task ToggleLevelAsync(PermissionEntityType entityType, RolePermission permission)
    {
        Dictionary<PermissionLevel, PermissionLevel> map = [];
        map[PermissionLevel.None] = PermissionLevel.Read;
        map[PermissionLevel.Read] = PermissionLevel.ReadExecute;
        map[PermissionLevel.Execute] = PermissionLevel.ReadWrite;
        map[PermissionLevel.Write] = PermissionLevel.ReadWriteApprove;
        map[PermissionLevel.Approve] = PermissionLevel.All;
        map[PermissionLevel.Delete] = PermissionLevel.None;

        if(permission.Level == PermissionLevel.None)
        {
            permission.Level = map[permission.Level];
        }
        else if ((permission.Level & PermissionLevel.Delete) == PermissionLevel.Delete)
        {
            permission.Level = map[PermissionLevel.Delete];
        }
        else if ((permission.Level & PermissionLevel.Approve) == PermissionLevel.Approve)
        {
            permission.Level = map[PermissionLevel.Approve];
        }
        else if ((permission.Level & PermissionLevel.Write) == PermissionLevel.Write)
        {
            permission.Level = map[PermissionLevel.Write];
        }
        else if ((permission.Level & PermissionLevel.Execute) == PermissionLevel.Execute)
        {
            permission.Level = map[PermissionLevel.Execute];
        }
        else if ((permission.Level & PermissionLevel.Read) == PermissionLevel.Read)
        {
            permission.Level = map[PermissionLevel.Read];
        }
        else
        {
            permission.Level = PermissionLevel.None;
        }

        await rolesController.UpdateAsync(permission);
    }

    protected override async Task OnInitializedAsync()
    {
        _permissions = (await rolesController.GetTenantRolePermissionsAsync()).ToList();

        // Add missing permissions
        foreach(var role in _roles)
        {
            foreach(var entity in _entities)
            {
                var permission = _permissions.Where(x => x.Entity == entity && x.Role == role).FirstOrDefault();
                if(permission is null)
                {
                    permission = new RolePermission
                    {
                        Role = role,
                        Entity = entity,
                        Level = PermissionLevel.None
                    };
                    await rolesController.AddAsync(permission);
                    _permissions.Add(permission);
                }
            }
        }
    }
}
