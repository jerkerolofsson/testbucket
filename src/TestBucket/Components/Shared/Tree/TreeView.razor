@typeparam T where T : class

<CascadingValue Value="this">

    <div class="@CssClass" style="@Style" aria-role="tree">
        @foreach(var item in Items)
        {
            <TreeViewNode T="T" 
                MultiSelection="@MultiSelection"
                Item="item" SelectedValue="@SelectedValue" EditItem="@EditItem" 
                ItemEdited="async (text) => await ItemEdited.InvokeAsync(text)"
                ItemEditCanceled="async () => await ItemEditCanceled.InvokeAsync()" >
            </TreeViewNode>
        }
    </div>
</CascadingValue>

@code {
    private string CssClass => $"treeview {Class} treeview-{Color.ToDescriptionString()}";

    [Parameter] public bool MultiSelection { get; set; } = false;

    [Parameter] public TreeNode<T>? EditItem { get; set; }

    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public Color Color { get; set; } = Color.Primary;
    [Parameter] public Size IconSize { get; set; } = Size.Medium;

    [Parameter] public T? SelectedValue { get; set; }
    [Parameter] public EventCallback<T?> SelectedValueChanged { get; set; }
    [Parameter] public IReadOnlyCollection<T>? SelectedValues { get; set; }
    [Parameter] public EventCallback<IRead<T>?> SelectedValuesChanged { get; set; }
    [Parameter] public EventCallback<string> ItemEdited { get; set; }
    [Parameter] public EventCallback<string> ItemEditCanceled { get; set; }

    [Parameter] 
    public Func<T?, Task<IReadOnlyCollection<TreeNode<T>>>>? ServerData { get; set; }

    [Parameter] public IReadOnlyCollection<TreeNode<T>> Items { get; set; } = [];

    [Parameter] public RenderFragment<TreeNode<T>>? ItemTemplate { get; set; }

    private List<T> _selectedValues = [];

    protected override void OnParametersSet()
    {
        if(SelectedValues is not null)
        {
            _selectedValues = [.. SelectedValues];
        }
    }

    public static TreeNode<BrowserItem>? RemoveTreeNode(TreeNode<BrowserItem>? parentNode, IEnumerable<TreeNode<BrowserItem>> treeItems, Predicate<BrowserItem> predicate)
    {
        foreach (var node in treeItems)
        {
            if (node.Value is not null && predicate(node.Value))
            {
                if (parentNode?.Children is not null)
                {
                    parentNode.Children = parentNode.Children.Where(x => x.Value != null && !predicate(x.Value)).ToList();
                }

                return node;
            }
            else if (node.Children is not null)
            {
                var match = RemoveTreeNode(node, node.Children, predicate);
                if (match is not null)
                {
                    return match;
                }
            }
        }
        return null;
    }

    public static TreeNode<BrowserItem>? FindTreeNode(IEnumerable<TreeNode<BrowserItem>> treeItems, Predicate<BrowserItem> predicate)
    {
        foreach (var node in treeItems)
        {
            if (node.Value is not null && predicate(node.Value))
            {
                return node;
            }
            else if (node.Children is not null)
            {
                var match = FindTreeNode(node.Children, predicate);
                if (match is not null)
                {
                    return match;
                }
            }
        }
        return null;
    }

    /// <summary>
    /// Returns true if the item is selected either  in SingleSelection mode or MultiSelection mode.
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public bool IsItemSelected(TreeNode<T> item)
    {
        if (item.Value is null)
        {
            return false;
        }

        if(SelectedValue == item.Value)
        {
            return true;
        }

        if(MultiSelection)
        {
            return IsItemMultiSelected(item);
        }
        return false;
    }

    public bool IsItemMultiSelected(TreeNode<T> item)
    {
        if (item.Value is null)
        {
            return false;
        }
        if (MultiSelection)
        {
            foreach (var selectedValue in _selectedValues)
            {
                if (item.Value.Equals(selectedValue))
                {
                    return true;
                }
            }
        }
        return false;
    }

    public async Task ToggleMultiSelectionAsync(TreeNode<T> item, bool isSelected)
    {
        if(!MultiSelection)
        {
            return;            
        }
        if(item.Value is null)
        {
            return;
        }

        // Also update any children
        await SetMultiSelectionAsync(item, isSelected);
        await SelectedValuesChanged.InvokeAsync(_selectedValues);
    }

    private async Task SetMultiSelectionAsync(TreeNode<T> item, bool isSelected)
    {
        if (!MultiSelection || item.Value is null)
        {
            return;
        }
        if (isSelected)
        {
            if (!_selectedValues.Contains(item.Value))
            {
                _selectedValues.Add(item.Value);
            }
        }
        else
        {
            _selectedValues.Remove(item.Value);
        }

        // If the item has children, toggle their selection state as well
        if(!item.HasChildren && item.Expandable && isSelected)
        {
            if (ServerData is not null)
            {
                if (item.Children is null)
                {
                    item.Children = await ServerData(item.Value);
                }
            }
        }

        if(item.HasChildren)
        {
            foreach(var child in item.Children)
            {
                await SetMultiSelectionAsync(child, isSelected);
            }
        }
    }
}
