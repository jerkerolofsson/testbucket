@using TestBucket.Components.Tests.TestLab.Services
@using TestBucket.Components.Tests.TestRepository.Services
@using TestBucket.Components.Tests.TestRuns.Controllers
@using TestBucket.Domain
@using TestBucket.Domain.Testing.TestLab
@using TestBucket.Domain.Testing.TestRepository
@inject TestBrowser testBrowser
@inject IDialogService dialogService

@* Observers *@
@inject ITestCaseManager testCaseManager
@inject ITestRunManager testRunManager
@inject ITestSuiteManager testSuiteManager
@inject ITestLabManager testLabManager
@inject ITestRepositoryManager testRepositoryManager

@inject TestRunController testRunController
@inject TestSuiteController testSuiteController
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreation
@inject TestLabController testLabController
@inject TestRepositoryController testRepositoryController
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc
@implements ITestCaseObserver
@implements ITestSuiteObserver
@implements ITestSuiteFolderObserver
@implements ITestRunObserver
@implements ITestLabObserver
@implements ITestRepositoryObserver
@implements IDisposable

<MudStack Spacing="0" Style="width: 100%;">
    <MudStack Row="true" class="tb-treeview-toolbar" Spacing="0">

        <MudStack Row="true" Class="pr-2 pl-2" Style="width: 100%" Spacing="0" AlignItems="AlignItems.Center">

            <MudToggleIconButton Size="Size.Small"
                                 ToggledIcon="@Icons.Material.Filled.CheckBox"
                                 Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" 
                                 @bind-Toggled="@_multiSelect" />

            <MudTextField 
                Placeholder="@loc["search-tests"]"
                Class="default-search"
                Clearable
                Variant="Variant.Outlined"
                Adornment="Adornment.Start" T="string" AdornmentIcon="@Icons.Material.Filled.Search" Value="_searchText" ValueChanged="OnSearchTextChangedAsync" />

            <MudSpacer />

            @if (appNavigationManager.State.SelectedTestCase is not null)
            {
                <MudIconButton Size="Size.Small" Class="rounded-0" OnClick="SyncWithActiveDocumentAsync" Icon="@Icons.Material.Rounded.CompareArrows" />
            }

            <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert">
                <CommandMenuItems TypeNames="TestSuite TestSuiteFolder TestRun TestCase TestRepositoryFolder TestLabFolder menu-test" />
            </MudMenu>
        </MudStack>
    </MudStack>

    <TreeView 
        MultiSelection="@_multiSelect"
        Class="pa-2"
        @ref="_treeView"
        ItemEdited="OnRenamed"
        ItemEditCanceled="OnItemEditCanceled"
        EditItem="@_editItem"
        T="BrowserItem"
        SelectedValues="@_selectedValues"
        SelectedValuesChanged="(values) => OnSelectedValuesChanged(values)"
        SelectedValue="@_selectedTreeItem"
        SelectedValueChanged="OnSelectedValueChangedAsync"
        Color="Color.Tertiary" 
        ServerData="@LoadServerData" 
        Items="@_rootItems">
        <ItemTemplate>

            @{
                string style = "";
                if (context.Value?.Color is not null)
                {
                    style += $"color: {context.Value.Color}";
                }
            }

            <DropZone T="TestEntity" OnDrop="(test) => OnDrop(test, context)">

                <MudMenu ActivationEvent="@MouseEvent.RightClick" Dense="true" OpenChanged="() => OnMenuOpened(context)">
                    <ActivatorContent>
                        @if (context.Value?.TestCase is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestCase">

                                @{
                                    string cssClass = "";
                                    string name = context.Text ?? "";
                                    if (context.Value.TestCase.IsTemplate)
                                    {
                                        cssClass += " template";
                                    }
                                    switch(context.Value.TestCase.ExecutionType)
                                    {
                                        case Contracts.Testing.Models.TestExecutionType.Automated:
                                            cssClass += " automated";
                                            break;
                                        case Contracts.Testing.Models.TestExecutionType.Hybrid:
                                            cssClass += " hybrid";
                                            break;
                                        case Contracts.Testing.Models.TestExecutionType.Manual:
                                            cssClass += " manual";
                                            break;
                                    }
                                }

                                <div style="@style" class="@cssClass">
                                    <span><MudHighlighter Text="@context.Text" HighlightedText="@_searchText" /></span>
                                </div>
                            </Draggable>
                        }
                        else if (context.Value?.Folder is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.Folder">
                                <div style="@style">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                        <span>@context.Text</span>
                                        <MudSpacer />
                                        @if (context.HasChildren)
                                        {
                                            <span class="child-count">@context.Children.Count</span>
                                        }
                                    </MudStack>
                                </div>
                            </Draggable>
                        }
                        else if (context.Value?.TestSuite is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestSuite">
                                <div style="@style">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                        <span>@context.Text</span>
                                        <MudSpacer />
                                        @if (context.HasChildren)
                                        {
                                            <span class="child-count">@context.Children.Count</span>
                                        }
                                    </MudStack>
                                </div>
                            </Draggable>
                        }
                        else if (context.Value?.TestRun is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestRun">
                                <div style="@style">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                        <span>@context.Text</span>
                                        <MudSpacer />
                                        @if (context.HasChildren)
                                        {
                                            <span class="child-count">@context.Children.Count</span>
                                        }
                                    </MudStack>
                                </div>
                            </Draggable>
                        }
                        else if (context.Value?.TestRepositoryFolder is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestRepositoryFolder">
                                <div style="@style">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                        <span>@context.Text</span>
                                        <MudSpacer />
                                        @if (context.HasChildren)
                                        {
                                            <span class="child-count">@context.Children.Count</span>
                                        }
                                    </MudStack>
                                </div>
                            </Draggable>
                        }
                         else if (context.Value?.TestLabFolder is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestLabFolder">
                                <div style="@style">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                        <span>@context.Text</span>
                                        <MudSpacer />
                                        @if (context.HasChildren)
                                        {
                                            <span class="child-count">@context.Children.Count</span>
                                        }
                                    </MudStack>
                                </div>
                            </Draggable>
                        }
                        else
                        {
                            <div style="@style" class="non-draggable">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                    <span>@context.Text</span>
                                    <MudSpacer/>
                                    @if(context.HasChildren)
                                    {
                                        <span class="child-count">@context.Children.Count</span>
                                    }
                                </MudStack>
                            </div>
                        }
                    </ActivatorContent>
                    <ChildContent>

                        @if (context.Value?.TestCase is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                        }
                        else if (context.Value?.TestRun is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                        }
                        else if (context.Value?.Folder is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                        }
                        else if (context.Value?.TestSuite is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                        }
                        else if (context.Value?.TestRepositoryFolder is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                        }
                        else if (context.Value?.TestLabFolder is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                        }
                        <CommandMenuItems TypeNames="TestSuite TestSuiteFolder TestRun TestCase TestRepositoryFolder TestLabFolder menu-test" />
                    </ChildContent>
                </MudMenu>
            </DropZone>
        </ItemTemplate>
    </TreeView>
</MudStack>
