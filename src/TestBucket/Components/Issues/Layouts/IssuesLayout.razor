@inherits LayoutComponentBase
@layout AppLayout
@using Humanizer
@using TestBucket.Components.AI.Agent.Controls
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Contracts.Issues.States
@using TestBucket.Contracts.Issues.Types
@using TestBucket.Domain
@using TestBucket.Domain.Insights.Model
@using TestBucket.Domain.Issues.Search
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject IssueController controller
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc
@inject IStringLocalizer<SettingStrings> settingLoc
@inject UserPreferencesService preferencesController

<TenantRedirect />

<Splitter Style="height: 100%" Bordered="false" Dock="@_dock" Dimension="20" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>

        <MudStack Class="pa-2 tb-navmenu side" Style="width: 100%;">

            <MudTabs Position="Position.Bottom" ActivePanelIndex="0" MinimumTabWidth="80px">

                <Header>
                    <div class="tb-tab-padding"/>
                </Header>

                <ChildContent>
                    <MudTabPanel Text="@loc["issues"]">
                        <MudNavMenu>
                            <MudNavLink Href="@DashboardUrl">
                                    <MudText>@loc["dashboard"]</MudText>
                            </MudNavLink>
                            <MudNavLink Href="@Open">
                                <MudBadge Content="@OpenCount" Color="Color.Primary" Overlap>
                                    <MudText>@issueLoc["open"]</MudText>
                                </MudBadge>
                            </MudNavLink>
                            <MudNavLink Href="@OpenIncidents">
                                <MudBadge Content="@OpenIncidentsCount" Color="Color.Primary" Overlap>
                                    @issueLoc["open-incidents"]
                                </MudBadge>
                            </MudNavLink>

                            <MudNavLink Href="@Triage">
                                <MudBadge Content="@TriageCount" Color="Color.Primary" Overlap>
                                    <MudText>@issueLoc["triage"]</MudText>
                                </MudBadge>
                            </MudNavLink>

                            <MudNavLink Href="@Closed">
                                <MudBadge Content="@ClosedCount" Color="Color.Primary" Overlap>
                                    <MudText>@issueLoc["closed"]</MudText>
                                </MudBadge>
                            </MudNavLink>
                            <MudNavLink Href="@OpenHighPrio">
                                @issueLoc["high-prio"]
                            </MudNavLink>


                            <PermissionView Entity="PermissionEntityType.Issue" Level="PermissionLevel.Write">
                                <Authorized>
                                    <MudText Class="mt-5">@loc["settings"]</MudText>

									<MudNavLink Href="@appNavigationManager.GetMilestonesUrl()">
										<MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
											<MudIcon Size="Size.Small" Icon="@TbIcons.BoldDuoTone.Flag"/>
											@settingLoc["manage-milestones"]
											<MudSpacer />
											<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ChevronRight" />
										</MudStack>
									</MudNavLink>

									<MudNavLink Href="@appNavigationManager.GetLabelsUrl()">
										<MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
											<MudIcon Size="Size.Small" Icon="@TbIcons.IconSaxDuoTone.Label" />
											@settingLoc["manage-labels"]
											<MudSpacer />
											<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ChevronRight" />
										</MudStack>
									</MudNavLink>

                                </Authorized>
                            </PermissionView>
               
                        </MudNavMenu>
            
                    </MudTabPanel>

                    <MudTabPanel Text="@loc["chat"]">
                        <AgentChat />
                    </MudTabPanel>
                </ChildContent>
            </MudTabs>
        </MudStack>
    </StartContent>

    <EndContent>
        @Body
    </EndContent>
</Splitter>

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private string OpenHighPrio => appNavigationManager.GetIssuesUrl() + "?q=is:open%20priority:High";
    private string Open => appNavigationManager.GetIssuesUrl() + "?q=state:open";
    private string Triage => appNavigationManager.GetIssuesUrl() + "?q=state:triage";
    private string OpenIncidents => appNavigationManager.GetIssuesUrl() + "?q=is:incident%20state:open";
    private string Closed => appNavigationManager.GetIssuesUrl() + "?q=state:closed";
    private string DashboardUrl => appNavigationManager.GetIssueDashboardUrl();
    private InsightsData<MappedIssueState, int> _countPerState = new();
    private InsightsData<MappedIssueState, int> _incidentsPerState = new();

    private string OpenIncidentsCount => GetIncidentBadgePerState(MappedIssueState.Open);
    private string OpenCount => GetBadgePerState(MappedIssueState.Open);
    private string TriageCount => GetBadgePerState(MappedIssueState.Triage);
    private string ClosedCount => GetBadgePerState(MappedIssueState.Closed);
    private Dock _dock = Dock.Left;

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await preferencesController.GetUserPreferencesAsync();
        _dock = userPreferences?.ExplorerDock ?? Dock.Left;
    }

    private string GetBadgePerState(MappedIssueState state)
    {
        if(_countPerState.TryGetValue(state, out var count))
        {
            return count.ToString();
        }
        return "0";
    }

    private string GetIncidentBadgePerState(MappedIssueState state)
    {
        if (_incidentsPerState.TryGetValue(state, out var count))
        {
            return count.ToString();
        }
        return "0";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _countPerState = await controller.GetIssueCountPerStateAsync(new SearchIssueQuery() { ProjectId = Project?.Id });
            _incidentsPerState = await controller.GetIssueCountPerStateAsync(new SearchIssueQuery() { ProjectId = Project?.Id, Type = IssueTypes.Incident });
            var _ = InvokeAsync(StateHasChanged);
        }
    }

}