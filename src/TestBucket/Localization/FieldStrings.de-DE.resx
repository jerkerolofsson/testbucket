<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add-custom-field" xml:space="preserve">
    <value>Fügen Sie benutzerdefiniertes Feld hinzu</value>
  </data>
  <data name="add-new-field" xml:space="preserve">
    <value>Neues Feld hinzufügen</value>
  </data>
  <data name="advanced" xml:space="preserve">
    <value>Fortschrittlich</value>
  </data>
  <data name="appearance" xml:space="preserve">
    <value>Aussehen</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>Insekt</value>
    <comment>Label type</comment>
  </data>
  <data name="data-source" xml:space="preserve">
    <value>Datenquelle</value>
  </data>
  <data name="data-source-type-commits" xml:space="preserve">
    <value>Sich verpflichtet</value>
  </data>
  <data name="data-source-type-components" xml:space="preserve">
    <value>Komponenten</value>
  </data>
  <data name="data-source-type-external" xml:space="preserve">
    <value>Daten aus dem externen Dienst abrufen</value>
  </data>
  <data name="data-source-type-features" xml:space="preserve">
    <value>Merkmale</value>
  </data>
  <data name="data-source-type-issues" xml:space="preserve">
    <value>Probleme</value>
  </data>
  <data name="data-source-type-labels" xml:space="preserve">
    <value>Etiketten</value>
  </data>
  <data name="data-source-type-layers" xml:space="preserve">
    <value>Schichten</value>
  </data>
  <data name="data-source-type-list" xml:space="preserve">
    <value>Benutzerdefinierte Liste</value>
  </data>
  <data name="data-source-type-milestones" xml:space="preserve">
    <value>Meilensteine</value>
  </data>
  <data name="data-source-type-releases" xml:space="preserve">
    <value>Veröffentlichungen</value>
  </data>
  <data name="data-source-type-requirements" xml:space="preserve">
    <value>Anforderungen</value>
  </data>
  <data name="data-source-type-systems" xml:space="preserve">
    <value>Systeme</value>
  </data>
  <data name="data-source-type-testcases" xml:space="preserve">
    <value>Testfälle</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Beschreibung</value>
  </data>
  <data name="description-helpertext" xml:space="preserve">
    <value>Eine hilfreiche Beschreibung, die dem Benutzer angezeigt werden kann</value>
  </data>
  <data name="documentation" xml:space="preserve">
    <value>Dokumentation</value>
    <comment>Label type</comment>
  </data>
  <data name="duplicate" xml:space="preserve">
    <value>Duplikat</value>
    <comment>Label type</comment>
  </data>
  <data name="enhancement" xml:space="preserve">
    <value>Erweiterung</value>
    <comment>Label type</comment>
  </data>
  <data name="field-data-source-not-available" xml:space="preserve">
    <value>Datenquelle ist für diese Art von Eingabe nicht verfügbar</value>
  </data>
  <data name="field-icon" xml:space="preserve">
    <value>Feldsymbol</value>
  </data>
  <data name="field-options" xml:space="preserve">
    <value>Optionen</value>
  </data>
  <data name="field-readonly" xml:space="preserve">
    <value>Schreibgeschützte</value>
  </data>
  <data name="field-required-permission" xml:space="preserve">
    <value>Erforderliche Erlaubnis zum Bearbeiten</value>
  </data>
  <data name="field-target" xml:space="preserve">
    <value>Ziel</value>
  </data>
  <data name="field-target-helpertext" xml:space="preserve">
    <value>Definiert die Arten von Entitäten, die dieses Feld haben können</value>
  </data>
  <data name="field-type" xml:space="preserve">
    <value>Typ</value>
  </data>
  <data name="good first issue" xml:space="preserve">
    <value>Gute erste Ausgabe</value>
    <comment>Label type</comment>
  </data>
  <data name="grouping" xml:space="preserve">
    <value>Gruppierung</value>
  </data>
  <data name="help wanted" xml:space="preserve">
    <value>Stellenangebote</value>
    <comment>Label type</comment>
  </data>
  <data name="icons" xml:space="preserve">
    <value>Ikonen</value>
  </data>
  <data name="inherit" xml:space="preserve">
    <value>Erben</value>
  </data>
  <data name="inherited" xml:space="preserve">
    <value>Geerbt</value>
  </data>
  <data name="inherit-helpertext" xml:space="preserve">
    <value>Wenn dies aktiviert ist, erben Entitäten den Wert einer übergeordneten Entität. Beispielsweise könnte ein Testfall den Wert aus einem Ordner erben, der den Wert einer Testsuite erbt, oder ein ausgeführter Testfall erbt den Wert aus dem Testfall.</value>
  </data>
  <data name="input-type" xml:space="preserve">
    <value>Eingabetyp</value>
  </data>
  <data name="input-type-helpertext" xml:space="preserve">
    <value>Die Art der Eingabe -UI -Steuerung, die dem Benutzer angezeigt wird, um einen Wert für das Feld einzugeben</value>
  </data>
  <data name="invalid" xml:space="preserve">
    <value>Ungültig</value>
    <comment>Label type</comment>
  </data>
  <data name="name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="name-helpertext" xml:space="preserve">
    <value>Eindeutiger Name für das benutzerdefinierte Feld</value>
  </data>
  <data name="options" xml:space="preserve">
    <value>Eingaboptionen</value>
  </data>
  <data name="options-helpertext" xml:space="preserve">
    <value>Optionen, aus denen der Benutzer für dieses Feld auswählen kann</value>
  </data>
  <data name="preview" xml:space="preserve">
    <value>Vorschau</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>Frage</value>
    <comment>Label type</comment>
  </data>
  <data name="show-description" xml:space="preserve">
    <value>Beschreibung anzeigen</value>
  </data>
  <data name="trait" xml:space="preserve">
    <value>FELD -Merkmal Mapping</value>
  </data>
  <data name="trait-helpertext" xml:space="preserve">
    <value>Gut definiertes Merkmal, an das dieses Feld kartiert. Das Merkmal wird verwendet, um Import-/Exportfelder zwischen verschiedenen Formaten zu kartieren und kann zur Berichterstattung und Analyse verwendet werden</value>
  </data>
  <data name="trait-match-known-type" xml:space="preserve">
    <value>Dieses Merkmal entspricht einem bekannten Typ</value>
  </data>
  <data name="use-classifier" xml:space="preserve">
    <value>AI -Klassifizierung</value>
  </data>
  <data name="use-classifier-helpertext" xml:space="preserve">
    <value>Verwendet AI, um dieses Feld zu aktualisieren, wenn es nach Änderungen leer ist.</value>
  </data>
  <data name="use-predefined-field" xml:space="preserve">
    <value>Verwenden Sie ein vordefiniertes Feld</value>
  </data>
  <data name="visible" xml:space="preserve">
    <value>Sichtbar</value>
  </data>
  <data name="wontfix" xml:space="preserve">
    <value>Wird nicht reparieren</value>
    <comment>Label type</comment>
  </data>
  <data name="default-value" xml:space="preserve">
    <value />
  </data>
</root>