@using TestBucket.Domain.Issues.Models
@inject IStringLocalizer<SharedStrings> loc

<EditForm Model="@Milestone" OnValidSubmit="Submit">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild" Style="min-width: 30vw">
        <TitleContent>
            @if(!string.IsNullOrEmpty(Milestone?.Title))
            {
                @Milestone?.Title
            }
            else
            {
                @loc["add-milestone"]
            }

        </TitleContent>
        <DialogContent>
            <MudStack>
                @if (Milestone is not null)
                {
                    <Field>
                        <MudTextField Variant="Variant.Outlined"
                        Label="@loc["title"]"
                        Immediate
                        AdornmentColor="Color.Tertiary"
                        @bind-Value="@Milestone.Title"
                        T="string"
                        AutoFocus="true" />
                    </Field>

                     <Field>
                        <MudTextField Variant="Variant.Outlined"
                        Label="@loc["description"]"
                        Immediate
                        AdornmentColor="Color.Tertiary"
                        @bind-Value="@Milestone.Description"
                        T="string"
                        AutoFocus="true" />
                    </Field>
                    
                    <Field>
                        <FieldHeader>@loc["color"]</FieldHeader>
                        <MudSpacer/>
                         <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <ColorCellPicker @bind-Color="Milestone.Color"/>
                        </MudStack>
                    </Field>

                    <Field Row>
                        <FieldHeader>@loc["open"]</FieldHeader>
                        <MudSpacer />
                        <MudSwitchM3 @bind-Value="@_open" Color="Color.Primary"/>
                    </Field>

                    <Field Row>
                        <FieldHeader>@loc["start-date"]</FieldHeader>
                        <MudSpacer />
                        <MudDatePicker Variant="Variant.Outlined" @bind-Date="@_startDate" />
                    </Field>

                    <Field Row>
                        <FieldHeader>@loc["end-date"]</FieldHeader>
                        <MudSpacer />
                        <MudDatePicker Variant="Variant.Outlined" @bind-Date="@_endDate" />
                    </Field>

                }
            </MudStack>
        </DialogContent>

        <DialogActions>
            @if (Milestone is not null)
            {
                if(!string.IsNullOrWhiteSpace(Milestone.Title))
                {
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
                }
            }
            <MudButton OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    [Parameter] public Milestone? Milestone { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private DateTime? _startDate = DateTime.Now;
    private DateTime? _endDate = DateTime.Now;
    private bool _open = true;

    protected override void OnInitialized()
    {
        if (Milestone is not null)
        {
            _startDate = Milestone.StartDate?.DateTime.ToLocalTime() ?? DateTime.Now;
            _endDate = Milestone.EndDate?.DateTime.ToLocalTime() ?? DateTime.Now;
            _open = Milestone.State == MilestoneState.Open;
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }


    private void Submit()
    {
        if (Milestone is null)
        {
            return;
        }
        if(_startDate is not null)
        {
            Milestone.StartDate = new DateTimeOffset(_startDate.Value.ToUniversalTime());
        }
        else
        {
            Milestone.StartDate = null;
        }
        if(_endDate is not null)
        {
            Milestone.EndDate = new DateTimeOffset(_endDate.Value.ToUniversalTime());
        }
        else
        {
            Milestone.EndDate = null;
        }

        if(_open)
        {
            Milestone.State  = MilestoneState.Open;
        }
        else
        {
            Milestone.State  = MilestoneState.Closed;
        }

        MudDialog.Close(Milestone);
    }
}
