@inject FieldService fieldService

@if(Test is not null && _boundDescription is not null)
{
    <MudStack>
        <MudStack Row="true" Style="background: rgba(0,0,0,0.2); border-bottom: solid 1px #333; height: 40px">
            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Style="color: greenyellow"/>

            <div style="width: 1px; background: #555; height: 90%"></div>

            @Test.Slug
        </MudStack>

        <div class="pa-3">
            <MudStack>
                <MudTextField Variant="Variant.Outlined"
                Label="Name" Value="@Test.Name" ValueChanged="OnNameChanged" T="string"/>

                <MarkdownEditor 
                    Value="@_boundDescription"
                    ShowIcons="@_icons"
                    @ref=_editor
                    MinHeight="50vh"
                    MaxHeight="50vh"
                    ValueChanged="OnDescriptionChanged"
                    SpellChecker="false">
                        <Toolbar>
                        </Toolbar>
                </MarkdownEditor>

                <FieldsEditor TestCase="@Test"/>

                Slug:
                @Test.Slug

                TestProjectId:
                @Test.TestProjectId

                TestSuiteFolderId:
                @Test.TestSuiteFolderId
            </MudStack>
        </div>
    </MudStack>
}


@code {
    [Parameter] public TestCase? Test { get; set; }
    [Parameter] public EventCallback<TestCase?> TestChanged { get; set; }
    private IReadOnlyList<FieldDefinition> _fields = [];

    private string[] _icons = ["bold", "preview"];

    private MarkdownEditor? _editor;
    private string? _boundDescription;

    protected override async Task OnParametersSetAsync()
    {
        _fields = await fieldService.SearchDefinitionsAsync(new SearchQuery() { ProjectId = Test?.TestProjectId });
    }

    protected override void OnParametersSet()
    {
        if(Test is null)
        {
            _boundDescription = null;
        }
        else
        {
            if(Test.Description != _boundDescription)
            {
                _boundDescription = null;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Test is not null)
        {
            Test.Description ??= "";
            if(_boundDescription != Test.Description)
            {
                _boundDescription = Test.Description;

                if(_editor is not null)
                {
                    await _editor.SetValueAsync(_boundDescription);
                }
                this.StateHasChanged();
            }
        }
    }

    public async Task OnNameChanged(string name)
    {
        if(Test is not null)
        {
            Test.Name = name;
            await TestChanged.InvokeAsync(Test);
        }
    }

    public async Task OnDescriptionChanged(string description)
    {
        if (Test is not null)
        {
            _boundDescription = description;
            Test.Description = description;
            await TestChanged.InvokeAsync(Test);
        }
    }
}
