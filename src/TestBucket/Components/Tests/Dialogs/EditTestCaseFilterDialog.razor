@using TestBucket.Traits.Core
@attribute [Authorize(Roles = "ADMIN")]
@inject TestCaseEditorController testCaseEditorService
@inject FieldController fieldController
@inject IStringLocalizer<SharedStrings> loc

@if (Query is not null)
{
    <EditForm Model="@Query" OnValidSubmit="OnValidSubmit">
        <MudDialog DefaultFocus="DefaultFocus.FirstChild">
            <DialogContent>

                <Field>
                    <FieldHeader>Created</FieldHeader>
                    <MudDateRangePicker 
                    DateRange="@_dateRange" Margin="Margin.Dense" DateRangeChanged="OnDateRangeChanged" Clearable
                    PlaceholderStart="Start Date" PlaceholderEnd="End Date" Label="Created" />
                </Field>

                <FieldsEditor Fields="@_fields" AllowMultiSelection="false" AutoSaveChanges="false" FieldChanged="OnFieldChanged"/>

            </DialogContent>

            <DialogActions>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">OK</MudButton>
                <MudButton OnClick="Close">Cancel</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public TestProject? Project{ get; set; }
    [Parameter] public SearchTestQuery? Query { get; set; }

    private IReadOnlyList<FieldDefinition> _fieldDefinitions = [];
    private List<FieldValue> _fields = [];
    private DateRange _dateRange { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if(Project is not null)
        {
            _fieldDefinitions = await fieldController.GetDefinitionsAsync(Project.Id, FieldTarget.TestCase);

            // We filter some fields here, not all types of fields are suitable for the filter, 
            // such as ReadOnly or WriteOnly
            foreach(var fieldDefinition in _fieldDefinitions.Where(x=>!x.ReadOnly && !x.WriteOnly))
            {
                _fields.Add(new FieldValue
                {
                    FieldDefinitionId = fieldDefinition.Id,
                    FieldDefinition = fieldDefinition
                });
            }
        }
    }

    private void OnFieldChanged(FieldValue field)
    {
        if(Query is not null)
        {
            if(field.HasValue())
            {
                var filter = field.ToFieldFilter();
                Query.AddFieldFilter(filter);
            }
            else{
                Query.RemoveFieldFilter(x => x.FilterDefinitionId == field.FieldDefinitionId);
            }
        }
    }

    private void OnDateRangeChanged(DateRange? range)
    {
        if(Query is not null)
        {
            Query.CreatedFrom = null;
            Query.CreatedUntil = null;

            if (range is not null)
            {
                _dateRange = range;

                if(range.Start is not null)
                {
                    Query.CreatedFrom = range.Start.Value.ToUniversalTime();
                }
                if (range.End is not null)
                {
                    Query.CreatedUntil = range.End.Value.ToUniversalTime();
                }
            }
        }
    }

    protected override void OnParametersSet()
    {
        if(Query is not null)
        {
            if(Query.CreatedFrom is not null)
            {
                _dateRange.Start = Query.CreatedFrom.Value.LocalDateTime;
            }
            if (Query.CreatedUntil is not null)
            {
                _dateRange.End = Query.CreatedUntil.Value.LocalDateTime;
            }
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private void  OnValidSubmit()
    {
      
        MudDialog.Close(Query);
    }
}

