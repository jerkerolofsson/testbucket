// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestBucket.Contracts.Code.Models;
using TestBucket.Contracts.Issues.States;
using TestBucket.Contracts.Requirements.States;
using TestBucket.Contracts.Testing.Models;
using TestBucket.Contracts.Testing.States;
using TestBucket.Data;
using TestBucket.Domain.Keyboard;

#nullable disable

namespace TestBucket.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513055345_LocalIssues")]
    partial class LocalIssues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Pipelines.Models.Pipeline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CiCdPipelineIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("CiCdProjectId")
                        .HasColumnType("text");

                    b.Property<string>("CiCdSystem")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Guid")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("StartError")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestRunId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestRunId");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Pipelines.Models.PipelineJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("AllowFailure")
                        .HasColumnType("boolean");

                    b.Property<string>("CiCdJobIdentifier")
                        .HasColumnType("text");

                    b.Property<double?>("Coverage")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasArtifacts")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("PipelineId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("QueuedDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("TagList")
                        .HasColumnType("jsonb");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestRunId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestRunId");

                    b.ToTable("PipelineJobs");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Runners.Models.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<Dictionary<string, string>>("EnvironmentVariables")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int?>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StdErr")
                        .HasColumnType("text");

                    b.Property<string>("StdOut")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestRunId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Guid");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestRunId");

                    b.HasIndex("Status", "Priority");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Runners.Models.Runner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string[]>("Languages")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicBaseUrl")
                        .HasColumnType("text");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("Runners");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.ArchitecturalLayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DevLead")
                        .HasColumnType("text");

                    b.Property<string>("DevResponsible")
                        .HasColumnType("text");

                    b.Property<DisplayOptions>("Display")
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("GlobPatterns")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<string>("TestLead")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("ArchitecturalLayers");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Commit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Commited")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommitedBy")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("ComponentNames")
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("FeatureNames")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("LayerNames")
                        .HasColumnType("text[]");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("SystemNames")
                        .HasColumnType("text[]");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Reference");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("Sha");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("Commits");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.CommitFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Additions")
                        .HasColumnType("integer");

                    b.Property<int>("Changes")
                        .HasColumnType("integer");

                    b.Property<long>("CommitId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Deletions")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommitId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("CommitFiless");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Component", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DevLead")
                        .HasColumnType("text");

                    b.Property<string>("DevResponsible")
                        .HasColumnType("text");

                    b.Property<DisplayOptions>("Display")
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("GlobPatterns")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<string>("TestLead")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Feature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DevLead")
                        .HasColumnType("text");

                    b.Property<string>("DevResponsible")
                        .HasColumnType("text");

                    b.Property<DisplayOptions>("Display")
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("GlobPatterns")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<string>("TestLead")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.ProductSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DevLead")
                        .HasColumnType("text");

                    b.Property<string>("DevResponsible")
                        .HasColumnType("text");

                    b.Property<DisplayOptions>("Display")
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("GlobPatterns")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<string>("TestLead")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("ProductSystems");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Repository", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<long>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("LastIndexTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalSystemId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("Url");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("TestBucket.Domain.Comments.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("LoggedAction")
                        .HasColumnType("text");

                    b.Property<string>("LoggedActionArgument")
                        .HasColumnType("text");

                    b.Property<string>("Markdown")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long?>("RequirementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequirementSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestCaseRunId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestRunId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestSuiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("RequirementSpecificationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestCaseRunId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestRunId");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TestBucket.Domain.Environments.Models.TestEnvironment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<List<TestCaseDependency>>("Dependencies")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<Dictionary<string, string>>("Variables")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("TestEnvironments");
                });

            modelBuilder.Entity("TestBucket.Domain.Fields.Models.FieldDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DataSourceType")
                        .HasColumnType("integer");

                    b.Property<string>("DataSourceUri")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("Inherit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefinedBySystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("OptionIcons")
                        .HasColumnType("jsonb");

                    b.Property<List<string>>("Options")
                        .HasColumnType("jsonb");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("RequiredPermission")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowDescription")
                        .HasColumnType("boolean");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Trait")
                        .HasColumnType("text");

                    b.Property<int>("TraitType")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("UseClassifier")
                        .HasColumnType("boolean");

                    b.Property<bool>("WriteOnly")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TenantId", "IsDeleted");

                    b.ToTable("field_definitions");
                });

            modelBuilder.Entity("TestBucket.Domain.Files.Models.FileResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("RequirementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequirementSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestCaseRunId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestRunId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestSuiteFolderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestSuiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileImageUri")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Models.ApplicationUserApiKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Models.UserPreferences", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActiveProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActiveTeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AdvanceToNextNotCompletedTestWhenSettingResult")
                        .HasColumnType("boolean");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncreasedContrast")
                        .HasColumnType("boolean");

                    b.Property<KeyboardBindings>("KeyboardBindings")
                        .HasColumnType("jsonb");

                    b.Property<bool>("ShowFailureMessageDialogWhenFailingTestCaseRun")
                        .HasColumnType("boolean");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Permissions.ProjectUserPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Entity")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("ProjectUserPermissions");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Permissions.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Entity")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("TestBucket.Domain.Issues.Models.LinkedIssue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalDisplayId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<long?>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalSystemName")
                        .HasColumnType("text");

                    b.Property<string>("IssueType")
                        .HasColumnType("text");

                    b.Property<long?>("LocalIssueId")
                        .HasColumnType("bigint");

                    b.Property<string>("MilestoneName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestCaseRunId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocalIssueId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseRunId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("LinkedIssues");
                });

            modelBuilder.Entity("TestBucket.Domain.Issues.Models.LocalIssue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalDisplayId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<long?>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalSystemName")
                        .HasColumnType("text");

                    b.Property<string>("IssueType")
                        .HasColumnType("text");

                    b.Property<string>("MilestoneName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("LocalIssues");
                });

            modelBuilder.Entity("TestBucket.Domain.Issues.Models.Milestone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<long?>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExternalSystemName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("TestBucket.Domain.Projects.Models.ExternalSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("EnabledCapabilities")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalProjectId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("SupportedCapabilities")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestResultsArtifactsPattern")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("external_systems");
                });

            modelBuilder.Entity("TestBucket.Domain.Projects.Models.TestProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("GrantAccessToAllTeamUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("GrantAccessToAllTenantUsers")
                        .HasColumnType("boolean");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<IssueStates[]>("IssueStates")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfIssues")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfOpenIssues")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRuns")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTestCases")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTestSuites")
                        .HasColumnType("integer");

                    b.Property<RequirementState[]>("RequirementStates")
                        .HasColumnType("jsonb");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<TestState[]>("TestStates")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId", "Slug");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.Requirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalProvider")
                        .HasColumnType("text");

                    b.Property<int?>("MappedState")
                        .HasColumnType("integer");

                    b.Property<int?>("MappedType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentRequirementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<long[]>("PathIds")
                        .HasColumnType("bigint[]");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<long?>("RequirementSpecificationFolderId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequirementSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequirementType")
                        .HasColumnType("text");

                    b.Property<long?>("RootRequirementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Name");

                    b.HasIndex("RequirementSpecificationFolderId");

                    b.HasIndex("RequirementSpecificationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TenantId", "Slug");

                    b.ToTable("requirements");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DateTimeOffsetValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateValue")
                        .HasColumnType("date");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<long>("FieldDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Inherited")
                        .HasColumnType("boolean");

                    b.Property<long?>("LongValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("RequirementId")
                        .HasColumnType("bigint");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<List<string>>("StringValuesList")
                        .HasColumnType("jsonb");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("TimeSpanValue")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("RequirementId");

                    b.HasIndex("TenantId");

                    b.ToTable("requirement_fields");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalProvider")
                        .HasColumnType("text");

                    b.Property<long?>("FileResourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TenantId", "Created");

                    b.HasIndex("TenantId", "Slug");

                    b.ToTable("spec");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementSpecificationFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.PrimitiveCollection<long[]>("PathIds")
                        .HasColumnType("bigint[]");

                    b.Property<long>("RequirementSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RequirementSpecificationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TenantId", "Created");

                    b.ToTable("spec__folders");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementTestLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RequirementExternalId")
                        .HasColumnType("text");

                    b.Property<long>("RequirementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequirementSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long>("TestCaseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("RequirementSpecificationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("requirement_test_links");
                });

            modelBuilder.Entity("TestBucket.Domain.Settings.Models.GlobalSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AiProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AiProviderUrl")
                        .HasColumnType("text");

                    b.Property<string>("AzureAiProductionKey")
                        .HasColumnType("text");

                    b.Property<string>("DefaultTenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GithubModelsDeveloperKey")
                        .HasColumnType("text");

                    b.Property<string>("JwtAudience")
                        .HasColumnType("text");

                    b.Property<string>("JwtIssuer")
                        .HasColumnType("text");

                    b.Property<string>("LlmClassificationModel")
                        .HasColumnType("text");

                    b.Property<string>("LlmModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LlmTestGenerationModel")
                        .HasColumnType("text");

                    b.Property<string>("PublicEndpointUrl")
                        .HasColumnType("text");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<string>("SymmetricJwtKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("TestBucket.Domain.Teams.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("GrantAccessToAllTenantUsers")
                        .HasColumnType("boolean");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("TestBucket.Domain.Tenants.Models.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("CanRegisterNewUsers")
                        .HasColumnType("boolean");

                    b.Property<string>("CiCdAccessToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CiCdAccessTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequireConfirmedAccount")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("TestBucket.Domain.TestAccounts.Models.TestAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LockOwner")
                        .HasColumnType("text");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubType")
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("Variables")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TestAccounts");
                });

            modelBuilder.Entity("TestBucket.Domain.TestResources.Models.TestResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LockExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LockOwner")
                        .HasColumnType("text");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Types")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Dictionary<string, string>>("Variables")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TestResources");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AutomationAssembly")
                        .HasColumnType("text");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<bool>("ClassificationRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<List<TestCaseDependency>>("Dependencies")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExecutionType")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Module")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<long[]>("PathIds")
                        .HasColumnType("bigint[]");

                    b.Property<string>("RunnerLanguage")
                        .HasColumnType("text");

                    b.Property<int>("ScriptType")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("TestParameters")
                        .HasColumnType("jsonb");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestSuiteFolderId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestSuiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("Name");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestSuiteFolderId");

                    b.HasIndex("TenantId", "Slug");

                    b.ToTable("testcases");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DateTimeOffsetValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateValue")
                        .HasColumnType("date");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<long>("FieldDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Inherited")
                        .HasColumnType("boolean");

                    b.Property<long?>("LongValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<List<string>>("StringValuesList")
                        .HasColumnType("jsonb");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("TimeSpanValue")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("test_case_fields");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssignedToUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedToUserName")
                        .HasColumnType("text");

                    b.Property<string>("CallStack")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int?>("MappedState")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("SystemErr")
                        .HasColumnType("text");

                    b.Property<string>("SystemOut")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestRunId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("Name");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestRunId");

                    b.ToTable("testcaseruns");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseRunField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DateTimeOffsetValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateValue")
                        .HasColumnType("date");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<long>("FieldDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Inherited")
                        .HasColumnType("boolean");

                    b.Property<long?>("LongValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<List<string>>("StringValuesList")
                        .HasColumnType("jsonb");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long>("TestCaseRunId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestRunId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("TimeSpanValue")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseRunId");

                    b.HasIndex("TestRunId");

                    b.ToTable("test_case_run_fields");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CiCdRef")
                        .HasColumnType("text");

                    b.Property<string>("CiCdSystem")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<long?>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("SystemOut")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestEnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestEnvironmentId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TenantId", "Created");

                    b.ToTable("runs");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestRunField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("BooleanValue")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DateTimeOffsetValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateValue")
                        .HasColumnType("date");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<long>("FieldDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Inherited")
                        .HasColumnType("boolean");

                    b.Property<long?>("LongValue")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.Property<List<string>>("StringValuesList")
                        .HasColumnType("jsonb");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long>("TestRunId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("TimeSpanValue")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefinitionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestRunId");

                    b.ToTable("test_run_fields");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("steps");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestSuite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CiCdSystem")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DefaultCiCdRef")
                        .HasColumnType("text");

                    b.Property<List<TestCaseDependency>>("Dependencies")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("ExternalSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<Dictionary<string, string>>("Variables")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TenantId", "Created");

                    b.HasIndex("TenantId", "Slug");

                    b.ToTable("testsuites");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestSuiteFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FeatureDescription")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsFeature")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.PrimitiveCollection<long[]>("PathIds")
                        .HasColumnType("bigint[]");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantId")
                        .HasColumnType("text");

                    b.Property<long?>("TestProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestSuiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TestProjectId");

                    b.HasIndex("TestSuiteId");

                    b.HasIndex("TenantId", "Created");

                    b.ToTable("testsuite__folders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TestBucket.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TestBucket.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TestBucket.Domain.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Pipelines.Models.Pipeline", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Pipelines.Models.PipelineJob", b =>
                {
                    b.HasOne("TestBucket.Domain.Automation.Pipelines.Models.Pipeline", "Pipeline")
                        .WithMany("PipelineJobs")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId");

                    b.Navigation("Pipeline");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Runners.Models.Job", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Runners.Models.Runner", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.ArchitecturalLayer", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Commit", b =>
                {
                    b.HasOne("TestBucket.Domain.Code.Models.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Repository");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.CommitFile", b =>
                {
                    b.HasOne("TestBucket.Domain.Code.Models.Commit", "Commit")
                        .WithMany("CommitFiles")
                        .HasForeignKey("CommitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Commit");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Component", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Feature", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.ProductSystem", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Repository", b =>
                {
                    b.HasOne("TestBucket.Domain.Projects.Models.ExternalSystem", "ExternalSystem")
                        .WithMany()
                        .HasForeignKey("ExternalSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("ExternalSystem");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Comments.Models.Comment", b =>
                {
                    b.HasOne("TestBucket.Domain.Requirements.Models.Requirement", "Requirement")
                        .WithMany("Comments")
                        .HasForeignKey("RequirementId");

                    b.HasOne("TestBucket.Domain.Requirements.Models.RequirementSpecification", "RequirementSpecification")
                        .WithMany("Comments")
                        .HasForeignKey("RequirementSpecificationId");

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCase", "TestCase")
                        .WithMany("Comments")
                        .HasForeignKey("TestCaseId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCaseRun", "TestCaseRun")
                        .WithMany("Comments")
                        .HasForeignKey("TestCaseRunId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany("Comments")
                        .HasForeignKey("TestRunId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestSuite", "TestSuite")
                        .WithMany("Comments")
                        .HasForeignKey("TestSuiteId");

                    b.Navigation("Requirement");

                    b.Navigation("RequirementSpecification");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestCase");

                    b.Navigation("TestCaseRun");

                    b.Navigation("TestProject");

                    b.Navigation("TestRun");

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestBucket.Domain.Environments.Models.TestEnvironment", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Fields.Models.FieldDefinition", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Models.ApplicationUser", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", null)
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", null)
                        .WithMany("ProjectMembers")
                        .HasForeignKey("TestProjectId");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Models.ApplicationUserApiKey", b =>
                {
                    b.HasOne("TestBucket.Domain.Identity.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserApiKeys")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Permissions.ProjectUserPermission", b =>
                {
                    b.HasOne("TestBucket.Domain.Identity.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Permissions.RolePermission", b =>
                {
                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.Issues.Models.LinkedIssue", b =>
                {
                    b.HasOne("TestBucket.Domain.Issues.Models.LocalIssue", "LocalIssue")
                        .WithMany()
                        .HasForeignKey("LocalIssueId");

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCaseRun", "TestCaseRun")
                        .WithMany("LinkedIssues")
                        .HasForeignKey("TestCaseRunId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("LocalIssue");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestCaseRun");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Issues.Models.LocalIssue", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Issues.Models.Milestone", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Projects.Models.ExternalSystem", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany("ExternalSystems")
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Projects.Models.TestProject", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany("TestProjects")
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany("TestProjects")
                        .HasForeignKey("TenantId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.Requirement", b =>
                {
                    b.HasOne("TestBucket.Domain.Requirements.Models.RequirementSpecificationFolder", "RequirementSpecificationFolder")
                        .WithMany("Requirements")
                        .HasForeignKey("RequirementSpecificationFolderId");

                    b.HasOne("TestBucket.Domain.Requirements.Models.RequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("RequirementSpecification");

                    b.Navigation("RequirementSpecificationFolder");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementField", b =>
                {
                    b.HasOne("TestBucket.Domain.Fields.Models.FieldDefinition", "FieldDefinition")
                        .WithMany()
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Requirements.Models.Requirement", "Requirement")
                        .WithMany("RequirementFields")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("FieldDefinition");

                    b.Navigation("Requirement");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementSpecification", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementSpecificationFolder", b =>
                {
                    b.HasOne("TestBucket.Domain.Requirements.Models.RequirementSpecificationFolder", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("TestBucket.Domain.Requirements.Models.RequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Parent");

                    b.Navigation("RequirementSpecification");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementTestLink", b =>
                {
                    b.HasOne("TestBucket.Domain.Requirements.Models.Requirement", "Requirement")
                        .WithMany("TestLinks")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Requirements.Models.RequirementSpecification", "RequirementSpecification")
                        .WithMany()
                        .HasForeignKey("RequirementSpecificationId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirement");

                    b.Navigation("RequirementSpecification");

                    b.Navigation("Tenant");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestBucket.Domain.Teams.Models.Team", b =>
                {
                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.TestAccounts.Models.TestAccount", b =>
                {
                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.TestResources.Models.TestResource", b =>
                {
                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCase", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestSuiteFolder", "TestSuiteFolder")
                        .WithMany("TestCases")
                        .HasForeignKey("TestSuiteFolderId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");

                    b.Navigation("TestSuiteFolder");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseField", b =>
                {
                    b.HasOne("TestBucket.Domain.Fields.Models.FieldDefinition", "FieldDefinition")
                        .WithMany()
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCase", "TestCase")
                        .WithMany("TestCaseFields")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldDefinition");

                    b.Navigation("Tenant");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseRun", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestCase");

                    b.Navigation("TestProject");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseRunField", b =>
                {
                    b.HasOne("TestBucket.Domain.Fields.Models.FieldDefinition", "FieldDefinition")
                        .WithMany()
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCaseRun", "TestCaseRun")
                        .WithMany("TestCaseRunFields")
                        .HasForeignKey("TestCaseRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany()
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldDefinition");

                    b.Navigation("Tenant");

                    b.Navigation("TestCaseRun");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestRun", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Environments.Models.TestEnvironment", "TestEnvironment")
                        .WithMany()
                        .HasForeignKey("TestEnvironmentId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestEnvironment");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestRunField", b =>
                {
                    b.HasOne("TestBucket.Domain.Fields.Models.FieldDefinition", "FieldDefinition")
                        .WithMany()
                        .HasForeignKey("FieldDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestRun", "TestRun")
                        .WithMany("TestRunFields")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldDefinition");

                    b.Navigation("Tenant");

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestStep", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestCase", "TestCase")
                        .WithMany("TestSteps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestCase");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestSuite", b =>
                {
                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestSuiteFolder", b =>
                {
                    b.HasOne("TestBucket.Domain.Testing.Models.TestSuiteFolder", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("TestBucket.Domain.Teams.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TestBucket.Domain.Tenants.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("TestBucket.Domain.Projects.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId");

                    b.HasOne("TestBucket.Domain.Testing.Models.TestSuite", "TestSuite")
                        .WithMany()
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Team");

                    b.Navigation("Tenant");

                    b.Navigation("TestProject");

                    b.Navigation("TestSuite");
                });

            modelBuilder.Entity("TestBucket.Domain.Automation.Pipelines.Models.Pipeline", b =>
                {
                    b.Navigation("PipelineJobs");
                });

            modelBuilder.Entity("TestBucket.Domain.Code.Models.Commit", b =>
                {
                    b.Navigation("CommitFiles");
                });

            modelBuilder.Entity("TestBucket.Domain.Identity.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserApiKeys");
                });

            modelBuilder.Entity("TestBucket.Domain.Projects.Models.TestProject", b =>
                {
                    b.Navigation("ExternalSystems");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.Requirement", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("RequirementFields");

                    b.Navigation("TestLinks");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementSpecification", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TestBucket.Domain.Requirements.Models.RequirementSpecificationFolder", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("TestBucket.Domain.Teams.Models.Team", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("TestProjects");
                });

            modelBuilder.Entity("TestBucket.Domain.Tenants.Models.Tenant", b =>
                {
                    b.Navigation("TestProjects");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCase", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TestCaseFields");

                    b.Navigation("TestSteps");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestCaseRun", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LinkedIssues");

                    b.Navigation("TestCaseRunFields");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestRun", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TestRunFields");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestSuite", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TestBucket.Domain.Testing.Models.TestSuiteFolder", b =>
                {
                    b.Navigation("TestCases");
                });
#pragma warning restore 612, 618
        }
    }
}
