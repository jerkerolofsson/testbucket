@attribute [Authorize()]
@page "/{TenantId}/Testing/TestCases/{TestCaseId:long}/Review"
@using TestBucket.Components.Comments
@using TestBucket.Components.Comments.Controls
@using TestBucket.Components.Shared.Review.Controllers
@using TestBucket.Components.Shared.Review.Controls
@using TestBucket.Components.Tests.Layouts
@using TestBucket.Domain.Audit.Models
@using TestBucket.Domain.Comments.Models
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Testing.TestRuns.Search
@layout TestCaseDetailsLayout
@inject ReviewController reviewController
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject CommentsController comments
@inject IStringLocalizer<SharedStrings> loc

@if (Test is not null)
{
    <CascadingValue Value="@Test">
        <MudStack Spacing="3" Class="pa-3 diff-container" Style="width:100%">

            <MudExpansionPanels>
                <MudExpansionPanel Text="@loc["changes"]">
                    <MudTimeline SelectedIndex="_selectedIndex" SelectedIndexChanged="OnSelectedIndexChanged" TimelineOrientation="TimelineOrientation.Horizontal" Style="height:200px">
                        @foreach (var entry in _entries)
                        {
                            <MudTimelineItem Style="cursor: pointer" Color="@(_selectedEntry == entry ? Color.Primary : Color.Default)" Size="@(_selectedEntry == entry ? Size.Medium : Size.Small)">
                                <MudStack AlignItems="AlignItems.Center" Spacing="0">
                                    @if (entry.NewValues.TryGetValue("State", out var state))
                                    {
                                        <div class="state">@state</div>
                                    }
                                    <div class="created">@entry.Created.Humanize()</div>
                                </MudStack>
                            </MudTimelineItem>
                        }
                    </MudTimeline>
                    <div class="container-inline-diff">
                        @if (_selectedEntry is not null && Test is not null)
                        {
                            foreach (var changeKey in _selectedEntry.NewValues.Keys)
                            {
                                if (changeKey == "Description")
                                {
                                    if (_selectedEntry.OldValues.TryGetValue(changeKey, out var oldValue) && _selectedEntry.NewValues.TryGetValue(changeKey, out var newValue))
                                    {
                                        var oldText = oldValue is null ? "" : (oldValue.ToString() ?? "");
                                        var newText = GetNewText(changeKey);

                                        <InlineDiffView Header="@changeKey" OldText="@oldText" NewText="@newText" />
                                    }
                                }
                            }
                        }
                    </div>
                </MudExpansionPanel>

                <MudExpansionPanel Text="@loc["reviewers"]">
                    @if (Test?.ReviewAssignedTo is not null)
                    {
                        <MudStack Spacing="1">
                            <TestBucket.Components.Shared.Reviews.AssignedReviewerListEditor ShowVotes="true" AssignedReviewers="@Test.ReviewAssignedTo" />
                        </MudStack>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>

            <MudPaper>
                <MudStack Style="width:100%" Class="pa-5">
                    <MudText Typo="Typo.h1" Color="Color.Primary">@loc["vote"]</MudText>
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="width:100%">
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Large" OnClick="async () => await Vote(1)"></MudIconButton>
                            <MudDivider Vertical/>
                            <MudIconButton Icon="@Icons.Material.Filled.ThumbDown" Size="Size.Large" OnClick="async ()=>await Vote(-1)"></MudIconButton>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudPaper>

            <MudStack Spacing="0">
                <MudText Typo="Typo.h1">@loc["comments"]</MudText>
                <CommentThread Comments="@_comments" CommentAdded="OnCommentAdded" CommentDeleted="OnCommentDeleted" />
            </MudStack>
        </MudStack>
    </CascadingValue>
}

@code {
    [Parameter] public long TestCaseId { get; set; }
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestCase? Test { get; set; }
    private AuditEntry? _selectedEntry;
    private int _selectedIndex;
    private List<Comment> _comments = [];
    private long _testId = 0;

    private IReadOnlyList<AuditEntry> _entries = [];

    private async Task Vote(int amount)
    {
        if(Test is null)
        {
            return;            
        }

        await reviewController.VoteAsync(Test, amount);
    }

    protected override void OnParametersSet()
    {
        if (Test is not null)
        {
            if (_testId != Test.Id)
            {
                _comments = Test.Comments ?? [];
                _testId = Test.Id;
            }
        }
    }

    private async Task OnCommentAdded(Comment comment)
    {
        if (Test is not null)
        {
            comment.TeamId = Test.TeamId;
            comment.TestProjectId = Test.TestProjectId;
            comment.TestCaseId = Test.Id;
            _comments.Add(comment);
            await comments.AddCommentAsync(comment);
        }
    }
    private async Task OnCommentDeleted(Comment comment)
    {
        _comments.Remove(comment);
        await comments.DeleteCommentAsync(comment);
    }

    private string GetNewText(string changeKey)
    {
        if (Test is not null)
        {
            if(changeKey == nameof(TestCase.Description))
            {
                return Test.Description ?? "";
            }
            if(changeKey == nameof(TestCase.Preconditions))
            {
                return Test.Preconditions ?? "";
            }
            if (changeKey == nameof(TestCase.Postconditions))
            {
                return Test.Postconditions ?? "";
            }
            if (changeKey == nameof(TestCase.State))
            {
                return Test.State ?? "";
            }
        }
        return "";
    }

    private void OnSelectedIndexChanged(int index)
    {
        _selectedIndex = index;
        if(index >= 0 && index < _entries.Count)
        {
            _selectedEntry = _entries[index];
        }
    }

    private void FilterEntries()
    {
        // We will only show entries that has changes in the selected fields
        _entries = _entries.Where(x => 
            x.NewValues.ContainsKey(nameof(TestCase.Description))
        ).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && Test is not null)
        {
            _entries = await reviewController.GetTestCaseDiffAsync(Test.Id);
            FilterEntries();
            this.StateHasChanged();
        }
    }
}
