@using MudBlazor.Utilities
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Domain.Appearance
@if(!CanClose)
{
    <MudChip T="string" Value="@Text" Class="tb-chip" Style="@Style" Size="@Size" />

}
else
{
    <MudChip T="string" Value="@Text" Class="tb-chip" Style="@Style" Size="@Size" OnClose="async () => await OnClose.InvokeAsync(this)"/>
}

@code {
    [Parameter] public Size Size { get; set; } = Size.Small;
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string Color { get; set; } = "#777";
    [Parameter] public EventCallback<Chip> OnClose { get; set; }
    [Parameter] public bool CanClose { get; set; }

    /// <summary>
    /// Assigns a chip color from ColorFromText, or if that is null, from the Text property
    /// Note: Palette must be set
    /// </summary>
    [Parameter] public bool ColorFromTextHash { get; set; }

    /// <summary>
    /// Text that is used to derive a color from, if ColorFromTextHash is true 
    /// Note: Palette must be set
    /// </summary>
    [Parameter] public string? ColorFromText { get; set; }

    /// <summary>
    /// Palette to get a color from if ColorFromTextHash is true
    /// </summary>
    [Parameter] public ThemePalette? Palette { get; set; }

    private string _textColor = "";
    private string _borderColor = "";
    private string _backgroundColor = "";

    private string Style => $"background: {_backgroundColor}; border-style: solid; border-width: 1px; border-color: {_borderColor}; color: {_textColor}";

    protected override void OnParametersSet()
    {
        ThemeColor color = (Color ?? "#777");
        if (ColorFromTextHash && Palette is not null && Palette.Colors.Count > 0)
        {
            var text = ColorFromText ?? Text;
            if (text is not null)
            {
                var hash = Math.Abs(text.GetHashCode()) % Palette.Colors.Count;
                color = Palette.Colors[hash];
            }
        }

        _borderColor = color.ToString(ColorOutputFormats.Hex);
        var backColor = color.ColorDarken(0.2);
        _backgroundColor = backColor.ToString(ColorOutputFormats.Hex);

        var textColor = ContrastColorCalculator.GetContrastingTextColor(backColor);
        _textColor = textColor.ToString(ColorOutputFormats.Hex);
    }
}
