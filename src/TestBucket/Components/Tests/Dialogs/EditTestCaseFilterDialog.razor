@using TestBucket.Traits.Core
@attribute [Authorize(Roles = "ADMIN")]
@inject TestCaseEditorController testCaseEditorService
@inject FieldController fieldController
@if (Query is not null)
{
    <EditForm Model="@Query" OnValidSubmit="OnValidSubmit">
        <MudDialog DefaultFocus="DefaultFocus.FirstChild">
            <DialogContent>

                <Field>
                    <FieldHeader>Created</FieldHeader>
                    <MudDateRangePicker 
                        DateRange="@_dateRange" Margin="Margin.Dense" DateRangeChanged="OnDateRangeChanged" Clearable
                        PlaceholderStart="Start Date" PlaceholderEnd="End Date" Label="Created" />
                </Field>

                @if(_fieldCategory is not null)
                {
                    <FieldHeader>Category</FieldHeader>
                    <MudSelect T="string" @bind-Value="Query.Category" Variant="Variant.Outlined" Clearable="true">
                        @if (_fieldCategory.Options is not null)
                        {
                            @foreach (var item in _fieldCategory.Options)
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                @if (_fieldPriority is not null)
                {
                    <FieldHeader>Priority</FieldHeader>
                    <MudSelect T="string" @bind-Value="Query.Priority" Variant="Variant.Outlined" Clearable="true">
                        @if (_fieldPriority.Options is not null)
                        {
                            @foreach (var item in _fieldPriority.Options)
                            {
                                <MudSelectItem Value="@item">@item</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }

            </DialogContent>

            <DialogActions>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">OK</MudButton>
                <MudButton OnClick="Close">Cancel</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public TestProject? Project{ get; set; }
    [Parameter] public SearchTestQuery? Query { get; set; }

    private FieldDefinition? _fieldCategory;
    private FieldDefinition? _fieldPriority;
    private IReadOnlyList<FieldDefinition> _fieldDefinitions = [];
    private DateRange _dateRange { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if(Project is not null)
        {
            _fieldDefinitions = await fieldController.GetDefinitionsAsync(Project.Id, FieldTarget.TestCase);

            _fieldCategory = _fieldDefinitions.Where(x => x.TraitType == TraitType.TestCategory).FirstOrDefault();
            _fieldPriority = _fieldDefinitions.Where(x => x.TraitType == TraitType.TestPriority).FirstOrDefault();
            //_fieldPriority = _fieldDefinitions.Where(x => x.TraitType == TraitType.TestAc).FirstOrDefault();
        }
    }

    private void OnDateRangeChanged(DateRange? range)
    {
        if(Query is not null)
        {
            Query.CreatedFrom = null;
            Query.CreatedUntil = null;

            if (range is not null)
            {
                _dateRange = range;

                if(range.Start is not null)
                {
                    Query.CreatedFrom = range.Start.Value.ToUniversalTime();
                }
                if (range.End is not null)
                {
                    Query.CreatedUntil = range.End.Value.ToUniversalTime();
                }
            }
        }
    }

    protected override void OnParametersSet()
    {
        if(Query is not null)
        {
            if(Query.CreatedFrom is not null)
            {
                _dateRange.Start = Query.CreatedFrom.Value.LocalDateTime;
            }
            if (Query.CreatedUntil is not null)
            {
                _dateRange.End = Query.CreatedUntil.Value.LocalDateTime;
            }
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private void  OnValidSubmit()
    {
      
        MudDialog.Close(Query);
    }
}

