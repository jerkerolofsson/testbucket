@using TestBucket.Domain.Fields.Models
@using TestBucket.Traits.Core

<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem">
    @if(FieldDefinition is not null)
    {
        <MudStack>
            <h3>Field</h3>

            <div style="display: grid; grid-template-columns: 1fr 1fr">
                <Field Row>
                    <FieldHeader>Name</FieldHeader>
                    <MudSpacer/>
                    <MudTextField Value="@FieldDefinition.Name" ValueChanged="OnNameChanged" T="string" Variant="Variant.Outlined" />
                </Field>
             
                <Field>
                    <MudStack Row>
                        <FieldHeader>Trait</FieldHeader>
                        <MudSpacer/>
                        <MudTextField Value="@FieldDefinition.Trait" ValueChanged="OnTraitChanged" T="string" Variant="Variant.Outlined" />
                    </MudStack>
                    <FieldDescription>The name of the trait should match the trait/property when importing items</FieldDescription>
                    @if(FieldDefinition.TraitType != TraitType.Custom)
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Check"/>
                            <MudText Color="Color.Success" Typo="Typo.subtitle1">@FieldDefinition.TraitType</MudText>
                        </MudStack>
                    }
                </Field>
            </div>

            <Field Row>
                <FieldHeader>Description</FieldHeader>
                <MudSpacer />
                <MudTextField 
                    Lines="5"
                    MaxLines="5"
                    Value="@FieldDefinition.Description" ValueChanged="OnDescriptionChanged" T="string" Variant="Variant.Outlined" />
            </Field>

            <Field>
                <MudStack Row>
                    <FieldHeader>Data Type</FieldHeader>
                    <MudSpacer/>
                    <MudSelect Value="@FieldDefinition.Type" ValueChanged="OnTypeChanged" T="FieldType" Variant="Variant.Outlined">
                        <MudSelectItem Value="@FieldType.String">String</MudSelectItem>
                        <MudSelectItem Value="@FieldType.Boolean">Boolean</MudSelectItem>
                        <MudSelectItem Value="@FieldType.SingleSelection">Single Selection</MudSelectItem>
                        <MudSelectItem Value="@FieldType.MultiSelection">Multi Selection</MudSelectItem>
                        <MudSelectItem Value="@FieldType.StringArray">Chip Field</MudSelectItem>
                    </MudSelect>
                </MudStack>
                <FieldDescription>The type of field defines what data can be stored and how it can be selected</FieldDescription>

                @if(FieldDefinition.Type == FieldType.SingleSelection || FieldDefinition.Type == FieldType.MultiSelection)
                {
                    <MudStack Row>
                        <FieldHeader>Options</FieldHeader>
                        <MudSpacer />
                        <MudTextField Class="mt-3" Value="@_options" ValueChanged="OnOptionsChanged" T="string" Variant="Variant.Outlined" />
                    </MudStack>
                    <FieldDescription>Separate multiple options using comma (,)</FieldDescription>
                }
            </Field>

            <Field>
                <FieldHeader>Applicable for..</FieldHeader>
                <MudStack Row="true" Wrap="Wrap.Wrap">
                    <MudCheckBox 
                    Color="Color.Tertiary" T="bool" 
                    Value="@((FieldDefinition.Target&FieldTarget.TestCase) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestCase, x)">Test Cases</MudCheckBox>

                    <MudCheckBox Color="Color.Tertiary" T="bool"
                    Value="@((FieldDefinition.Target&FieldTarget.Project) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.Project, x)">Projects</MudCheckBox>

                    <MudCheckBox Color="Color.Tertiary" T="bool"
                    Value="@((FieldDefinition.Target&FieldTarget.TestRun) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestRun, x)">Test Runs</MudCheckBox>

                    <MudCheckBox Color="Color.Tertiary" T="bool"
                                 Value="@((FieldDefinition.Target&FieldTarget.TestCaseRun) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestCaseRun, x)">Test Case Runs</MudCheckBox>
                </MudStack>
                <FieldDescription>The type of field defines what data can be stored and how it can be selected</FieldDescription>
            </Field>

            <Field>
                <FieldHeader>Behavior</FieldHeader>

                <MudStack Row Wrap="Wrap.Wrap">

                    <MudTooltip Text="Inherits the value from a related entity, for example executed test cases inherits from the test run and from the test case.">
                        <MudCheckBox Color="Color.Tertiary" T="bool" Value="@FieldDefinition.Inherit" ValueChanged="OnInheritChanged">Inherit value</MudCheckBox>
                    </MudTooltip>

                    <MudTooltip Text="Uses AI to update this field, if it is empty">
                        <MudCheckBox Color="Color.Tertiary" T="bool" Value="@FieldDefinition.UseClassifier" ValueChanged="OnUseClassifierChanged">Automatic Classification</MudCheckBox>
                    </MudTooltip>

                    <MudTooltip Text="Read-Only fields cannot be edited by a user">
                        <MudCheckBox Color="Color.Tertiary" T="bool" Value="@FieldDefinition.ReadOnly" ValueChanged="OnReadOnlyChanged">Read Only</MudCheckBox>
                    </MudTooltip>
                </MudStack>
            </Field>

        </MudStack>

        <MudStack>
            <h3>Preview</h3>

            <FieldEditor @bind-Field="_dummy"/>

            <Field>
                <FieldHeader>Appearance</FieldHeader>
                <MudStack Row Wrap="Wrap.Wrap">

                    <MudTooltip Text="Shows the field in the user interface">
                        <MudCheckBox Color="Color.Tertiary" T="bool" Value="@FieldDefinition.IsVisible" ValueChanged="OnIsVisibleChanged">Visible</MudCheckBox>
                    </MudTooltip>

                    <MudTooltip Text="Shows the description in the user interface">
                        <MudCheckBox Color="Color.Tertiary" T="bool" Value="@FieldDefinition.ShowDescription" ValueChanged="OnShowDescriptionChanged">Show description in UI</MudCheckBox>
                    </MudTooltip>
                </MudStack>

            </Field>

            <Field>
                <FieldHeader>Icons</FieldHeader>
                <IconPicker @bind-Icon="@FieldDefinition.Icon"/>



            </Field>
        </MudStack>
    }
</div>

@code {
    [Parameter] public FieldDefinition? FieldDefinition { get; set; }
    [Parameter] public EventCallback<FieldDefinition> FieldDefinitionChanged { get; set; }

    private string _options = "";
    private FieldValue _dummy = new FieldValue() { FieldDefinitionId = 0  };

    private async Task OnShowDescriptionChanged(bool showDescription)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.ShowDescription = showDescription;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnReadOnlyChanged(bool readOnly)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.ReadOnly = readOnly;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnUseClassifierChanged(bool useClassifier)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.UseClassifier = useClassifier;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnIsVisibleChanged(bool isVisible)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.IsVisible = isVisible;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnInheritChanged(bool inherit)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Inherit = inherit;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    protected override void OnParametersSet()
    {
        _dummy.FieldDefinition = FieldDefinition;

        _options = "";
        if(FieldDefinition?.Options is not null)
        {
            _options = string.Join(", ", FieldDefinition.Options);
        }
    }

    private async Task OnTargetChanged(FieldTarget value, bool enabled)
    {
        if (FieldDefinition is not null)
        {
            var flag = value;
            if(enabled)
            {
                FieldDefinition.Target |= value;
            }
            else
            {
                FieldDefinition.Target &= ~value;
            }
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnTypeChanged(FieldType value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Type = value;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnTraitTypeChanged(TraitType value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.TraitType = value;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnDescriptionChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            _options = value;
            FieldDefinition.Description = value;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnOptionsChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            _options = value;
            FieldDefinition.Options = _options.Split(',', StringSplitOptions.TrimEntries|StringSplitOptions.RemoveEmptyEntries).ToList();
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnTraitChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Trait = value;
            FieldDefinition.TraitType = TraitType.Custom;
            if(TraitTypeConverter.TryConvert(FieldDefinition.Trait, out var traitType))
            {
                FieldDefinition.TraitType = traitType.Value;
            }

            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnNameChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Name = value;
            FieldDefinition.Trait = value.Replace(" ", "");
            FieldDefinition.TraitType = TraitType.Custom;
            if(TraitTypeConverter.TryConvert(FieldDefinition.Trait, out var traitType))
            {
                FieldDefinition.TraitType = traitType.Value;
            }

            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
}