@page "/{tenantId}/Settings/ManageProjects"
@using System.Diagnostics.CodeAnalysis
@layout SettingsLayout
@attribute [Authorize(Roles = "ADMIN")]
@inject ProjectService projectService
@inject IDialogService dialogService
@inject AppNavigationManager appNavigationManager

<MudStack Class="container-settings-page">

    <MudText Class="mb-3" Typo="Typo.h1">Projects</MudText>

    <MudDataGrid ServerData="LoadGridData"
                 Dense="true"
                 Hover="true"
                 T="TestProject"
                 @ref="_dataGrid"
                 RowClick="x => OnRowClicked(x.Item)"
                 SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddProjectAsync"></MudIconButton>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.ShortName" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Slug" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="TestProject" />
        </PagerContent>
    </MudDataGrid>
</MudStack>

@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    private MudDataGrid<TestProject>? _dataGrid;

    private void OnRowClicked(TestProject project)
    {
        appNavigationManager.NavigateTo(project, false);
    }

    private async Task AddProjectAsync()
    {
        var parameters = new DialogParameters<AddProjectDialog>
        {
            { x=>x.Team, Team }
        };
        var dialog = await dialogService.ShowAsync<AddProjectDialog>(null, parameters);
        var result = await dialog.Result;
        _dataGrid?.ReloadServerData();
    }

    private async Task<GridData<TestProject>> LoadGridData(GridState<TestProject> state)
    {
        var result = await projectService.SearchAsync(new Contracts.SearchQuery
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize
            });

        GridData<TestProject> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
