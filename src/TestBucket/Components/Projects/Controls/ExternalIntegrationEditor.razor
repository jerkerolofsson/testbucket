@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Components.Uploads.Controls
@using TestBucket.Domain.Files.Models
@using TestBucket.Domain.Teams.Models
@inject ProjectController projectService
@inject IStringLocalizer<IntegrationStrings> loc

@if (Name is not null)
{
    <MudPaper Class="mb-3 pa-3">
        <MudStack Row AlignItems="AlignItems.Center" Class="tb-integration-title mb-5">
            @if (Icon is not null)
            {
                <MudIcon Size="Size.Large" Icon="@Icon" />
            }
            <MudText Typo="Typo.h1">@Name</MudText>
        </MudStack>

        @if(Integration is null)
        {
            <MudText>@loc["no-integration"]</MudText>

            <MudStack Row Class="mt-5">
                <MudButton Variant="Variant.Outlined" OnClick="AddAsync">@loc["add-integration"]</MudButton>
            </MudStack>
        }
        else
        {
            <Field Row>
                <FieldHeader>@loc["integration-base-url"]</FieldHeader>
                <MudSpacer/>
                <MudTextField Value="Integration.BaseUrl" T="string" ValueChanged="BaseUrlChanged" />
            </Field>
            <Field Row>
                <FieldHeader>@loc["project-id"]</FieldHeader>
                <MudSpacer />
                <MudTextField Value="Integration.ExternalProjectId" T="string" ValueChanged="ExternalProjectIdChanged" />
            </Field>
            <Field Row>
                <FieldHeader>@loc["access-token"]</FieldHeader>
                <MudSpacer />
                <MudTextField InputType="InputType.Password" Value="Integration.AccessToken" T="string" ValueChanged="AccessTokenChanged" />
            </Field>

            <Field Row>
                <FieldHeader>@loc["enabled"]</FieldHeader>
                <MudSpacer />
                <MudSwitchM3 Color="Color.Primary" T="bool" Value="Integration.Enabled" ValueChanged="EnabledChanged" />
            </Field>

            <Field Row>
                <FieldHeader>@loc["milestones"]</FieldHeader>
                <MudSpacer />
                <MudSwitchM3 Color="Color.Primary" T="bool" Value="Integration.EnableMilestones" ValueChanged="EnableMilestonesChanged" />
            </Field>

            <Field Row>
                <FieldHeader>@loc["releases"]</FieldHeader>
                <MudSpacer />
                <MudSwitchM3 Color="Color.Primary" T="bool" Value="Integration.EnableReleases" ValueChanged="EnableReleasesChanged" />
            </Field>
        }
    </MudPaper>
}

@code {
    [Parameter] public EventCallback<ExternalSystem> IntegrationChanged { get; set; }
    [Parameter] public ExternalSystem? Integration { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Name { get; set; }
    
    private async Task ExternalProjectIdChanged(string externalProjectId)
    {
        if (Integration is not null)
        {
            Integration.ExternalProjectId = externalProjectId;
            await OnChangedAsync();
        }
    }
    private async Task BaseUrlChanged(string baseUrl)
    {
        if (Integration is not null)
        {
            Integration.BaseUrl = baseUrl;
            await OnChangedAsync();
        }
    }
    private async Task AccessTokenChanged(string accessToken)
    {
        if (Integration is not null)
        {
            Integration.AccessToken = accessToken;
            await OnChangedAsync();
        }
    }
    private async Task EnabledChanged(bool value)
    {
        if (Integration is not null)
        {
            Integration.Enabled = value;
            await OnChangedAsync();
        }
    }
    private async Task EnableReleasesChanged(bool value)
    {
        if (Integration is not null)
        {
            Integration.EnableReleases = value;
            await OnChangedAsync();
        }
    }
    private async Task EnableMilestonesChanged(bool value)
    {
        if (Integration is not null)
        {
            Integration.EnableMilestones = value;
            await OnChangedAsync();
        }
    }
    private async Task OnChangedAsync()
    {
        await IntegrationChanged.InvokeAsync(Integration);
    }
    private async Task AddAsync()
    {
        if(this.Name is null) 
        {
            return;
        }

        await IntegrationChanged.InvokeAsync(new ExternalSystem
            {
                Name = this.Name,
                Enabled = false,
            });
    }
}
