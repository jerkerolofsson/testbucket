@using TestBucket.Components.Shared
@inject FieldService fieldService

@if(Test is not null && _boundDescription is not null)
{
    <MudStack Style="width: 100%">
        <TbToolbar>

            <MudTooltip Text="Run">
                <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Primary"/>
            </MudTooltip>

            <VerticalDivider />

            @if (!_preview)
            {
                <MudTooltip Text="Save Changes">
                    <MudIconButton Color="Color.Tertiary" Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="async () => await SaveChangesAsync()" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Edit">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => BeginEdit()" />
                </MudTooltip>
            }

            <MudSpacer/>

            <MudText>@Test.Slug</MudText>

            <VerticalDivider />

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="async x => await DeleteTestCaseAsync()">Delete</MudMenuItem>
            </MudMenu>

        </TbToolbar>

        <div class="pa-3">
            <MudStack>

                @if (!_preview)
                {
                    <MudTextField Style="width: auto" Variant="Variant.Text" Label="Name" Value="@Test.Name" ValueChanged="OnNameChanged" T="string" AutoFocus="true" />
                }
                else
                {
                    <MudText Typo="Typo.h3">@Test.Name</MudText>
                }
                <MudMarkdownEditorTheming>
                    <MarkdownEditor 
                        MaxHeight="500px"
                        Color="Color.Primary"
                        AllowResize="true"
                        @bind-Preview="_preview"
                        Value="@_boundDescription"
                        @ref=_editor
                        ValueChanged="OnDescriptionChanged"
                        SpellChecker="false">
                    </MarkdownEditor>
                </MudMarkdownEditorTheming>

                <FieldsEditor TestCase="@Test"/>

            </MudStack>
        </div>
    </MudStack>
}


@code {
    [Parameter] public TestCase? Test { get; set; }
    [Parameter] public EventCallback<TestCase?> TestChanged { get; set; }
    [Parameter] public EventCallback<TestCase?> DeleteTestClicked { get; set; }

    private bool _preview = false;
    
    private void BeginEdit()
    {
        _preview = false;
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        await TestChanged.InvokeAsync(Test);
    }

    private async Task DeleteTestCaseAsync()
    {
        await DeleteTestClicked.InvokeAsync(Test);
    }

    private IReadOnlyList<FieldDefinition> _fields = [];

    private MarkdownEditor? _editor;
    private string? _boundDescription;

    private long? _projectId;

    protected override async Task OnParametersSetAsync()
    {
        if(_projectId != Test?.TestProjectId && Test?.TestProjectId is not null)
        {
            _projectId = Test?.TestProjectId;
            _fields = await fieldService.SearchDefinitionsAsync(FieldTarget.TestCase, new SearchQuery() { ProjectId = Test?.TestProjectId });
        }
    }

    protected override void OnParametersSet()
    {
        if(Test is null)
        {
            _boundDescription = null;
        }
        else
        {
            if(Test.Description != _boundDescription)
            {
                _boundDescription = null;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Test is not null)
        {
            Test.Description ??= "";
            if(_boundDescription != Test.Description)
            {
                _boundDescription = Test.Description;

                if(_editor is not null)
                {
                    await _editor.SetValueAsync(_boundDescription);
                }
                this.StateHasChanged();
            }
        }
    }

    public async Task OnNameChanged(string name)
    {
        if(Test is not null)
        {
            Test.Name = name;
            await TestChanged.InvokeAsync(Test);
        }
    }

    public async Task OnDescriptionChanged(string description)
    {
        if (Test is not null)
        {
            _boundDescription = description;
            Test.Description = description;
            await TestChanged.InvokeAsync(Test);
        }
    }
}
