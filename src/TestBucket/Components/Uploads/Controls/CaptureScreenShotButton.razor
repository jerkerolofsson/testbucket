@using TestBucket.Components.Uploads.Services
@using TestBucket.Formats.Dtos
@using TestBucket.Formats.Shared
@inject UploadService uploadService
@inject IJSRuntime js
@inject IStringLocalizer<SharedStrings> loc

<MudButton 
    Class="tb-button-primary"
    Variant="Variant.Outlined"
    OnClick="CaptureScreenShot">@loc["capture-screenshot-on-this-device"]</MudButton>

@code {
    [Parameter] public long? TestCaseId { get; set; }
    [Parameter] public long? TestRunId { get; set; }
    [Parameter] public long? TestCaseRunId { get; set; }
    [Parameter] public long? TestProjectId { get; set; }
    [Parameter] public long? TestSuiteId { get; set; }
    [Parameter] public long? TestSuiteFolderId { get; set; }
    [Parameter] public long? RequirementId { get; set; }
    [Parameter] public long? RequirementSpecificationId { get; set; }

    [Parameter] public EventCallback<AttachmentDto> ScreenshotCaptured { get; set; }

    private async Task CaptureScreenShot()
    {
        var dataUrl = await js.InvokeAsync<string>("captureDesktopScreenshot");
        if(dataUrl is not null)
        {
            var attachment = DataUriParser.ParseDataUri(dataUrl);
            attachment.Name = "Screenshot";

            ResourceCategory category = ResourceCategory.TestResults;

            await uploadService.UploadAsync(category, attachment,
                TestCaseId, TestRunId, TestCaseRunId,
                TestSuiteId, TestSuiteFolderId,
                TestProjectId,
                RequirementId, RequirementSpecificationId);

            await ScreenshotCaptured.InvokeAsync(attachment);
        }
    }
}
