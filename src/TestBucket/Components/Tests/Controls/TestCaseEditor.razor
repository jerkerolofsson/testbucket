@using Humanizer
@using TestBucket.Components.Shared
@inject FieldService fieldService
@inject TestCaseEditorService testCaseEditorService
@inject TestRunCreationService testRunCreationService
@inject NavigationManager navigationManager

@if(Test is not null && _boundDescription is not null)
{
    <MudStack Style="width: 100%; background: var(--mud-palette-surface)">
        <MudToolBar Style="background: var(--mud-palette-primary)">

            @if (!_preview && _editor is not null)
            {
                <MudTextField Variant="Variant.Outlined" Label="Name" AdornmentColor="Color.Tertiary" Value="@Test.Name" ValueChanged="OnNameChanged" T="string" AutoFocus="true" />

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="Save Changes">
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveChangesAsync" Class="rounded-0" />
                </MudTooltip>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
            }
            else
            {
                @* <MudText Typo="Typo.h3" Style="color: #fff" Class="mr-3">@Test.Name</MudText> *@
                <PathNavigation Test="@Test"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="Edit">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => BeginEdit()" Class="rounded-0" />
                </MudTooltip>
            }

            <MudSpacer/>

            <MudText>@Test.Slug</MudText>

            <MudDivider DividerType="DividerType.Middle" Vertical />

            <MudTooltip Text="Run">
                <MudIconButton OnClick="RunTestAsync" Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="rounded-0" />
            </MudTooltip>

            <MudDivider DividerType="DividerType.Middle" Vertical />

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="async x => await DeleteTestCaseAsync()">Delete</MudMenuItem>
            </MudMenu>

        </MudToolBar>

        <MudSplitter Style="height: 100%" Color="Color.Primary" Bordered="false" Dimension="80" EnableMargin="false">
            <StartContent>
                <MudStack Class="pa-2" Style="width: 100%">
                    <MarkdownEditor 
                    ShowToolbar="false"
                    MaxHeight="500px"
                    Color="Color.Primary"
                    AllowResize="true"
                    @bind-Preview="_preview"
                    Value="@_boundDescription"
                    @ref=_editor
                    ValueChanged="OnDescriptionChanged"
                    SpellChecker="false">
                    </MarkdownEditor>

                    <FieldsEditor TestCase="@Test"/>

                </MudStack>
            </StartContent>
            <EndContent>
                <MudTabs Style="width: 100%">
                    <MudTabPanel Text="Metadata">
                        <MudStack Class="pa-2" Style="width: 100%">

                            <Field>
                                <FieldHeader>Created</FieldHeader>
                                @Test.Created.Humanize()
                            </Field>

                            <FieldsEditor TestCase="@Test" />
                        </MudStack>
                    </MudTabPanel>
                    <MudTabPanel Text="Attachments">
                        <MudStack Class="pa-2" Style="width: 100%">

                            <Field>
                                <FieldHeader>Attachments</FieldHeader>
                                <AttachmentGrid TestCaseId="@Test.Id" Style="width: 100%"/>
                            </Field>
                        </MudStack>
                    </MudTabPanel>
                </MudTabs>
            </EndContent>
        </MudSplitter>

    </MudStack>
}


@code {
    [Parameter] public TestCase? Test { get; set; }
    [Parameter] public EventCallback<TestCase?> TestChanged { get; set; }

    private bool _preview = true;

    private void BeginEdit()
    {
        _preview = false;
    }

    private async Task RunTestAsync()
    {
        if(Test is null || Test.TestProjectId is null)
        {
            return;
        }
        var run = await testRunCreationService.CreateTestRunAsync(Test.TestProjectId.Value, Test.Id);
        if(run is not null)
        {
            var tenantId = TenantResolver.ResolveTenantIdFromUrl(navigationManager.Uri);
            navigationManager.NavigateTo($"/{tenantId}/Testing/TestRuns/{run.Id}");
        }
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        await TestChanged.InvokeAsync(Test);
    }

    private async Task DeleteTestCaseAsync()
    {
        if(Test is null)
        {
            return;
        }
        await testCaseEditorService.DeleteTestCaseAsync(Test);
    }

    private IReadOnlyList<FieldDefinition> _fields = [];

    private MarkdownEditor? _editor;
    private string? _boundDescription;

    private long? _projectId;

    protected override async Task OnParametersSetAsync()
    {
        if(_projectId != Test?.TestProjectId && Test?.TestProjectId is not null)
        {
            _projectId = Test?.TestProjectId;
            _fields = await fieldService.SearchDefinitionsAsync(FieldTarget.TestCase, new SearchQuery() { ProjectId = Test?.TestProjectId });
        }
    }

    protected override void OnParametersSet()
    {
        if(Test is null)
        {
            _boundDescription = null;
        }
        else
        {
            if(Test.Description != _boundDescription)
            {
                _boundDescription = null;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Test is not null)
        {
            Test.Description ??= "";
            if(_boundDescription != Test.Description)
            {
                _boundDescription = Test.Description;

                if(_editor is not null)
                {
                    await _editor.SetValueAsync(_boundDescription);
                }
                this.StateHasChanged();
            }
        }
    }

    public async Task OnNameChanged(string name)
    {
        if(Test is not null)
        {
            Test.Name = name;
            await TestChanged.InvokeAsync(Test);
        }
    }

    public async Task OnDescriptionChanged(string description)
    {
        if (Test is not null)
        {
            _boundDescription = description;
            Test.Description = description;
            await TestChanged.InvokeAsync(Test);
        }
    }
}
