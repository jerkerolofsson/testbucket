@using TestBucket.Components.Shared
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Teams.Models
@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject TestSuiteService testSuiteService
@inject TestCaseEditorService testCaseEditor
@implements ITestCaseObserver 
@implements IDisposable

<MudStack Spacing="0" Class="pa-2" Style="width: 100%; background: var(--mud-palette-surface)">
    <MudStack Row="true" Style="border-bottom: solid 1px var(--mud-palette-darken)" Spacing="0">
        <MudTooltip Text="Add test suite">
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTestSuiteAsync"/>
        </MudTooltip>

        <MudSpacer/>

        @if (_selectedTreeItem is not null)
        {
            <MudTooltip Text="Add folder">
                <MudIconButton Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="() => AddTestSuiteFolderAsync(_selectedTreeItem?.TestSuite, _selectedTreeItem?.Folder, _selectedTreeItem?.TestCase)" />
            </MudTooltip>
        }
        <MudMenu Icon="@Icons.Material.Filled.MoreHoriz">

            @if (_selectedTreeItem?.Folder is not null)
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Palette" OnClick="() => EditTestSuiteFolderAsync(_selectedTreeItem.Folder)" Label="Customize folder" />
                <MudMenuItem Icon="@Icons.Material.Filled.FolderDelete" IconColor="Color.Error" OnClick="() => DeleteTestSuiteFolderAsync(_selectedTreeItem?.Folder)" Label="Delete folder" />
            }
            else if (_selectedTreeItem?.TestCase is not null)
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="() => DeleteTestCaseAsync(_selectedTreeItem?.TestCase)" Label="Delete test case" />
            }
            else if (_selectedTreeItem?.TestSuite is not null)
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="EditTestSuiteAsync" Label="Edit" />
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="() => DeleteTestSuiteAsync(_selectedTreeItem?.TestSuite)" Label="Delete test suite" />
            }
            else
            {
                <MudMenuItem Icon="@Icons.Material.Filled.ImportExport" OnClick="ImportAsync" Label="Import" />
            }
        </MudMenu>

    </MudStack>

    <MudTreeView 
        Class="pa-2"
        @ref="_treeView"
        SelectionMode="@SelectionMode.ToggleSelection"
        T="BrowserItem"
        SelectedValue="@_selectedTreeItem"
        SelectedValueChanged="OnSelectedValueChangedAsync"
        Hover="true" 
        Color="Color.Tertiary" 
        ServerData="@LoadServerData" 
        Items="@_rootItems">

        <ItemTemplate>

            @{
                string style = "";
                if (context.Value?.Color is not null)
                {
                    style += $"color: {context.Value.Color}";
                }
            }


            <DropZone T="TestEntity" OnDrop="(test) => OnDrop(test, context)">
                <MudTreeViewItem Value="@context.Value"
                Style="@style"
                Items="@context.Children"
                ItemsChanged="@(new Action<IReadOnlyCollection<TreeItemData<BrowserItem>>>(items => OnItemsLoaded(context, items)))"
                @bind-Expanded="@context.Expanded"
                CanExpand="@context.Expandable"
                Icon="@context.Icon"
                Text="@context.Text"
                Context="treeNode"
                LoadingIconColor="Color.Info">
                    <BodyContent>

                        <MudMenu ActivationEvent="@MouseEvent.RightClick" Dense="true">
                            <ActivatorContent>
                                @if(treeNode.Value?.TestCase is not null)
                                {
                                    <Draggable T="TestEntity" Data="@treeNode.Value.TestCase">
                                        @treeNode.Text
                                    </Draggable>
                                }
                                else if (treeNode.Value?.Folder is not null)
                                {
                                    <Draggable T="TestEntity" Data="@treeNode.Value.Folder">
                                        @treeNode.Text
                                    </Draggable>
                                }
                                else
                                {
                                    @treeNode.Text
                                }
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Icon="@Icons.Material.Filled.ImportExport" OnClick="ImportAsync" Label="Import" />
                                <MudDivider/>
                                @if (context.Value?.TestCase is not null)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="() => AddTestSuiteFolderAsync(null, null, context.Value.TestCase)">Create Folder</MudMenuItem>
                                    <MudDivider />
                                    <MudMenuItem Icon="@Icons.Material.Filled.Code" OnClick="() => EditTestCaseAutomationLinkAsync(context.Value.TestCase)">Link to automated test</MudMenuItem>
                                    <MudDivider />
                                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="() => DeleteTestCaseAsync(context.Value?.TestCase)" Label="Delete test case" />
                                }
                                else if (context.Value?.TestRun is not null)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="() => DeleteTestRunAsync(context.Value.TestRun)" Label="Delete run" />
                                }
                                else if (context.Value?.Folder is not null)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="() => CreateNewTestCaseAsync(context.Value.Folder)">Create New Test</MudMenuItem>
                                    <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="() => GenerateAiTestsAsync(context.Value.Folder)">Generate New Tests with AI</MudMenuItem>
                                    <MudDivider />
                                    <MudMenuItem Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="() => AddTestSuiteFolderAsync(null, context.Value.Folder, null)">Create Folder</MudMenuItem>
                                    <MudMenuItem Icon="@Icons.Material.Filled.Palette" OnClick="() => EditTestSuiteFolderAsync(context.Value.Folder)" Label="Customize folder" />
                                    <MudDivider />
                                    <MudMenuItem Icon="@Icons.Material.Filled.FolderDelete" IconColor="Color.Error" OnClick="() => DeleteTestSuiteFolderAsync(context.Value.Folder)" Label="Delete folder" />
                                }
                                else if(context.Value?.TestSuite is not null)
                                {
                                    <MudMenuItem Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="() => AddTestSuiteFolderAsync(context.Value.TestSuite, null, null)">Create Folder</MudMenuItem>
                                    <MudDivider />
                                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="() => DeleteTestSuiteAsync(context.Value.TestSuite)" Label="Delete test suite" />
                                }
                            </ChildContent>
                        </MudMenu>
                    </BodyContent>
                </MudTreeViewItem>
            </DropZone>
        </ItemTemplate>
    </MudTreeView>
</MudStack>
