@using TestBucket.Domain.Appearance
@inject ThemingService themingService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject IUserPreferencesManager userPreferencesManager
@inject ITestBucketThemeManager testBucketThemeManager
@implements IDisposable

@code {

    [Parameter] public EventCallback<UserPreferences> UserPreferencesChanged { get; set; }

    /// <summary>
    /// We keep track of the settings and trigger a refresh if they changed to reload the style sheet
    /// </summary>

    private bool? _increasedContrast;
    private bool? _increasedFontSize;
    private bool? _darkMode;
    private string? _theme;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userPreferences = await userPreferencesManager.LoadUserPreferencesAsync(authenticationState.User);
        _theme = userPreferences.Theme;
        _darkMode = userPreferences.DarkMode;
        _increasedContrast = userPreferences.IncreasedContrast;
        _increasedFontSize = userPreferences.IncreasedFontSize;
        userPreferencesManager.UserPreferencesChanged += OnUserPreferencesChanged;
    }
    public void Dispose()
    {
        userPreferencesManager.UserPreferencesChanged -= OnUserPreferencesChanged;
    }

    private void OnUserPreferencesChanged(object? sender, UserPreferences preferences)
    {
        var changed = _darkMode != preferences.DarkMode || 
        _increasedFontSize != preferences.IncreasedFontSize ||
                _increasedContrast != preferences.IncreasedContrast ||
                _theme != preferences.Theme;
        if (changed)
        {
            _increasedFontSize = preferences.IncreasedFontSize;
            _darkMode = preferences.DarkMode;
            _increasedContrast = preferences.IncreasedContrast;
            _theme = preferences.Theme;

            navigationManager.Refresh(true);
        }
    }

    // private MarkupString GenerateStylesMarkup()
    // {
    //     var isDarkMode = _userPreferences?.DarkMode == true ? true : false;
    //     var highContrast = _userPreferences?.IncreasedContrast == true ? true : false;

    //     var stylesheet = new StringBuilder();

    //     var fieldPalette = isDarkMode ? themingService.FieldPaletteDark : themingService.FieldPaletteLight;

    //     stylesheet.AppendLine("<style>");
    //     stylesheet.AppendLine("body {");
    //     stylesheet.AppendLine($" --tb-palette-field-background: {fieldPalette.Background};");
    //     stylesheet.AppendLine($" --tb-palette-field-border: {fieldPalette.Border};");

    //     High contrast mode overrides some settings
    //     if (highContrast)
    //     {
    //         if(isDarkMode)
    //         {
    //             stylesheet.AppendLine($" --mud-palette-surface: #111;");
    //             stylesheet.AppendLine($" --mud-palette-background: #000;");
    //             stylesheet.AppendLine($" --mud-palette-black: #000;");

    //             stylesheet.AppendLine($" --mud-palette-primary: hotpink;");
    //         }
    //         else
    //         {
    //             stylesheet.AppendLine($" --mud-palette-surface: #fff;");
    //             stylesheet.AppendLine($" --mud-palette-background: #eee;");

    //             stylesheet.AppendLine($" --mud-palette-primary: hotpink;");
    //         }
    //     }

    //     stylesheet.AppendLine("}");

    //     stylesheet.AppendLine(".tb-field {");
    //     stylesheet.AppendLine($" background: var(--tb-palette-field-background);");
    //     stylesheet.AppendLine($" border: solid 1px var(--tb-palette-field-border);");
    //     stylesheet.AppendLine("}");

    //     stylesheet.AppendLine("</style>");

    //     return new MarkupString(stylesheet.ToString());
    // }
}
