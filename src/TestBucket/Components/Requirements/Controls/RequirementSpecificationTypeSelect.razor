@using TestBucket.Contracts.Requirements.States
@using TestBucket.Contracts.Requirements.Types
@using TestBucket.Contracts.Testing.Models
@using TestBucket.Contracts.Testing.States
@using TestBucket.Domain.States
@inject IStringLocalizer<RequirementStrings> loc

<MudSelect Variant="Variant.Outlined" T="string" Value="@Type" ValueChanged="OnTypeChanged">
    @foreach (var type in RequirementSpecificationTypes.AllTypes)
    {
        <MudSelectItem Value="@type">
            @type
        </MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter] public long TestProjectId { get; set; }
    [Parameter] public string? Type { get; set; }
    [Parameter] public EventCallback<string?> TypeChanged { get; set; }

    private async Task OnTypeChanged(string? type)
    {
        await TypeChanged.InvokeAsync(type);
    }
}
