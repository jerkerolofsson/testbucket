@attribute [Authorize()]
@page "/{TenantId}/Issues/Dashboard"
@using TestBucket.Components.Issues.Layouts
@using TestBucket.Components.Reporting.Controllers
@using TestBucket.Contracts.Issues.States
@using TestBucket.Domain
@using TestBucket.Domain.Commands
@using TestBucket.Domain.ExtensionManagement
@using TestBucket.Domain.Insights.Model
@using TestBucket.Domain.Issues.Insights
@using TestBucket.Domain.Issues.Models
@using TestBucket.Domain.Issues.Search
@layout IssuesLayout
@inject AppNavigationManager appNavigationManager
@inject InsightsController controller
@inject IExtensionManager extensionManager
@inject ICommandManager commandManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc

<MudStack Style="width: 100%">
    <div class="tb-issues-charts pa-2">
        <InsightsChart ChartType="ChartType.Bar" T="string" U="double" Results="_countPerState" />
        <InsightsChart ChartType="ChartType.Line" T="string" U="double" Results="_inflowOutflow" />
    </div>
</MudStack>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }
    private long _projectId;

    private InsightsData<string, double>? _countPerState = new();    
    private InsightsData<string, double>? _inflowOutflow = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync()
    {
        if(Project is not null)
        {
            if (Project.Id != _projectId)
            {
                _projectId = Project.Id;
                _countPerState = await controller.GetDataAsync(Project.Id, new InsightsDataQuery { DataSource = IssueDataSourceNames.IssuesByState });
                _inflowOutflow = await controller.GetDataAsync(Project.Id, new InsightsDataQuery { DataSource = IssueDataSourceNames.IssuesInflowOutflow });
                var _ = InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }
}
