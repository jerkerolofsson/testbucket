@using TestBucket.Contracts
@inject ProjectService projectService
@inject IDialogService dialogService

<MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="dropdown-container">
    <MudSelect 
    Style="min-width: 200px"
    Variant="Variant.Outlined" 
    Label="Project" 
    Value="@SelectedProject" Text="@SelectedProject?.Name" T="TestProject" ValueChanged="OnSelectedProjectChanged">
        @foreach(var project in _projects)
        {
            <MudSelectItem Value="@project">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    @if(project.IconUrl is not null)
                    {
                        <MudImage Src="@project.IconUrl" Width="24" Height="24"/>
                    }
                    <MudText>@project.Name</MudText>
                </MudStack>


            </MudSelectItem>
        }
    </MudSelect>

    <AuthorizeView Roles="ADMIN">
        @if(SelectedProject is not null)
        {
            string projectAdminUrl = $"{SelectedProject.TenantId}/Settings/Projects/{SelectedProject.Slug}";
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Settings" Href="@projectAdminUrl"></MudIconButton>
        }
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Add" OnClick="AddProject"></MudIconButton>
    </AuthorizeView>
</MudStack>

@code {
    private TestProject[] _projects = [];

    [Parameter] public Team? Team { get; set; }
    [Parameter] public TestProject? SelectedProject { get; set; }
    [Parameter] public EventCallback<TestProject?> SelectedProjectChanged { get; set; }

    private async Task OnSelectedProjectChanged(TestProject testProject)
    {
        await SelectedProjectChanged.InvokeAsync(testProject);
    }

    private async Task AddProject()
    {
        var parameters = new DialogParameters<AddProjectDialog>
        {
            { x=>x.Team, Team }
        };
        var dialog = await dialogService.ShowAsync<AddProjectDialog>(null, parameters);
        var result = await dialog.Result;
        if(result?.Data is TestProject testProject)
        {
            _projects = [testProject, .. _projects];
            await SelectedProjectChanged.InvokeAsync(testProject);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var result = await projectService.SearchAsync(new SearchQuery() { TeamId = Team?.Id, Offset = 0, Count = 1000 });
        _projects = result.Items;
    }
}
