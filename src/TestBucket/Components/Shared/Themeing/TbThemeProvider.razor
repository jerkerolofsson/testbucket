@inject ThemingService themingService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IUserPreferencesManager userPreferencesManager
@implements IDisposable

@((MarkupString)GenerateStylesMarkup())

@code {

    [Parameter] public EventCallback<UserPreferences> UserPreferencesChanged { get; set; }

    private UserPreferences? _userPreferences;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        _userPreferences = await userPreferencesManager.LoadUserPreferencesAsync(authenticationState.User);
        userPreferencesManager.UserPreferencesChanged += OnUserPreferencesChanged;
    }
    public void Dispose()
    {
        userPreferencesManager.UserPreferencesChanged -= OnUserPreferencesChanged;
    }

    private void OnUserPreferencesChanged(object? sender, UserPreferences preferences)
    {
        var changed = false;
        if(_userPreferences is null)
        {
            changed = true;
        }
        else
        {
            changed = _userPreferences.DarkMode != preferences.DarkMode || 
                _userPreferences.IncreasedContrast != preferences.IncreasedContrast ||
                _userPreferences.Theme != preferences.Theme;
        }

        if (changed)
        { 
            _userPreferences = preferences;
            InvokeAsync(() =>
            {
                this.StateHasChanged();
            });
            UserPreferencesChanged.InvokeAsync();
        }
    }

    private MarkupString GenerateStylesMarkup()
    {
        var isDarkMode = _userPreferences?.DarkMode == true ? true : false;
        var highContrast = _userPreferences?.IncreasedContrast == true ? true : false;

        var stylesheet = new StringBuilder();

        var fieldPalette = isDarkMode ? themingService.FieldPaletteDark : themingService.FieldPaletteLight;

        stylesheet.AppendLine("<style class='tb-theme-provider'>");
        stylesheet.AppendLine("body {");
        stylesheet.AppendLine($" --tb-palette-field-background: {fieldPalette.Background};");
        stylesheet.AppendLine($" --tb-palette-field-border: {fieldPalette.Border};");

        if (highContrast)
        {
            if(isDarkMode)
            {
                stylesheet.AppendLine($" --mud-palette-surface: #111;");
                stylesheet.AppendLine($" --mud-palette-background: #000;");
                stylesheet.AppendLine($" --mud-palette-black: #000;");

                stylesheet.AppendLine($" --mud-palette-primary: hotpink;");
            }
            else
            {
                stylesheet.AppendLine($" --mud-palette-surface: #eee;");
                stylesheet.AppendLine($" --mud-palette-background: #fff;");

                stylesheet.AppendLine($" --mud-palette-primary: hotpink;");
            }
        }

        stylesheet.AppendLine("}");

        // stylesheet.AppendLine(".tb-field {");
        // stylesheet.AppendLine($" background: var(--tb-palette-field-background);");
        // stylesheet.AppendLine($" border: solid 1px var(--tb-palette-field-border);");
        // stylesheet.AppendLine("}");

        stylesheet.AppendLine("</style>");

        return new MarkupString(stylesheet.ToString());
    }
}
