@attribute [Authorize()]
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis
@using Plotly.Blazor.LayoutLib
@using TestBucket.Components.Reporting.Controllers
@using TestBucket.Components.Reporting.Dialogs
@using TestBucket.Components.Reporting.Helpers
@using TestBucket.Components.Shared.Themeing.Models
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Contracts.Insights
@using TestBucket.Domain.Appearance
@using TestBucket.Domain.Appearance.Models
@using TestBucket.Domain.Insights
@using TestBucket.Domain.Insights.Model
@using TestBucket.Domain.Testing.Aggregates
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject InsightsController controller
@inject ThemingService themingService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ITestBucketThemeManager testBucketThemeManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<InsightStrings> insightLoc
@inject IDialogService dialogService

@if(Spec is not null && State is not null)
{
    <MudPaper Elevation="2" Class="tb-tile">
        <MudStack Spacing="0" Class="tb-insights-chart">
            <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">@insightLoc[Spec.Name]</MudText>
                <MudSpacer />

                <MudToggleGroup T="ChartType" Value="@_chartType" ValueChanged="OnChartTypeChanged" Color="Color.Surface"> 
                    @if((Spec.AllowedChartTypes&ChartType.Donut) == ChartType.Donut)
                    {
                        <MudToggleItem Value="ChartType.Donut"><MudIcon Icon="@Icons.Material.Rounded.DonutLarge" Size="Size.Small" /></MudToggleItem>
                    }
                    @if((Spec.AllowedChartTypes&ChartType.Pie) == ChartType.Pie)
                    {
                        <MudToggleItem Value="ChartType.Pie"><MudIcon Icon="@Icons.Material.Rounded.PieChart" Size="Size.Small" /></MudToggleItem>
                    }
                    @if((Spec.AllowedChartTypes&ChartType.Bar) == ChartType.Bar)
                    {
                        <MudToggleItem Value="ChartType.Bar"><MudIcon Icon="@Icons.Material.Rounded.BarChart" Size="Size.Small" /></MudToggleItem>
                    }
                    @if ((Spec.AllowedChartTypes & ChartType.Line) == ChartType.Line)
                    {
                        <MudToggleItem Value="ChartType.Line"><MudIcon Icon="@Icons.Material.Rounded.StackedLineChart" Size="Size.Small" /></MudToggleItem>
                    }
                </MudToggleGroup>

                @if(!ReadOnly)
                {
                    <MudIconButton data-testid="edit" Icon="@Icons.Material.Filled.Brush" OnClick="EditAsync"/>
                    <MudIconButton data-testid="delete" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteAsync" />
                }
            </MudStack>

            @if (_results is not null)
            {
            
                @if (_layout is not null && _results is not null && _config is not null)
                {
                    if(Spec?.ChartType is ChartType.Bar or ChartType.Line or ChartType.Donut or ChartType.Pie or ChartType.StackedBar)
                    {
                        <PlotlyChart class="tb-chart result-chart" @ref="_chart" Config="_config" Layout="@_layout" Data="@_data"/>
                    }
                    else if(Spec?.ChartType is ChartType.Text)
                    {
                        <InsightsChartText Spec="@Spec" Data="_results" ColorMap="_legendTitleColorMap"/>
                   
                    }
                    else if(Spec?.ChartType is ChartType.ActivityHeatmap)
                    {
                        <InsightsHeatmap Data="_results" ColorMap="_legendTitleColorMap"/>
                    }

                    @if (Spec is not null)
                    {
                        if (Spec.ShowLegend)
                        {
                            <div class="legend">
                                @foreach (var legendItem in _legendTitleColorMap)
                                {
                                    var color = legendItem.Value;
                                    <div class="item">
                                        <ColorCell Color="@color" />
                                        @insightLoc[legendItem.Key]
                                    </div>
                                }
                            </div>
                        }
                        if(Spec.ShowDataTable)
                        {
                            <InsightsDataTable Spec="@Spec" Results="@_results"/>
                        }
                    }
                }
            }
            else
            {
                <MudSkeleton SkeletonType="SkeletonType.Text" Class="tb-chart-skeleton" />
            }
       
        </MudStack>
    </MudPaper>
}

@code {
	[Parameter] public string Title { get; set; } = "";
	[Parameter] public string UserQuery { get; set; } = "";
	[Parameter] public bool ReadOnly { get; set; }
	[Parameter] public InsightsVisualizationSpecification? Spec { get; set; }
	[Parameter] public EventCallback<InsightsVisualizationSpecification> SpecChanged { get; set; }
	[Parameter] public EventCallback<InsightsVisualizationSpecification> Delete { get; set; }
	[Parameter] public TestProject Project { get; set; } = default!;
	[Parameter] public ApplicationState? State { get; set; }


	private ChartType _chartType = ChartType.Line;

	private PlotlyChart? _chart;
	private Config? _config = new Config()
    {
        Responsive = true,

    };
	private Layout? _layout;
	private Dictionary<string, string> _legendTitleColorMap = [];

	// Using of the interface IList is important for the event callback!
	private readonly IList<ITrace> _data = new List<ITrace>();

	private InsightsData<string, double>? _results;

	private Task OnChartTypeChanged(ChartType chartType)
	{
		_chartType = chartType;
		BuildChartData();
		return Task.CompletedTask;
	}

	private string? _userQuery;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(Spec is null)
		{
			return;
		}
		if (Spec.DataQueries.Count == 0)
		{
			return;
		}

		if(_results is null || _userQuery != UserQuery)
		{
			_userQuery = UserQuery;

			// Combine the query from the specification and the user
			var realQueryString = string.Join(" ", Spec.DataQueries[0].Query, UserQuery).Trim();
			var query = new InsightsDataQuery
                {
                    Colors = Spec.DataQueries[0].Colors,
                    Query = realQueryString,
                    DataSource = Spec.DataQueries[0].DataSource,
					DateFormat = Spec.DataQueries[0].DateFormat
                };

			_results = await controller.GetDataAsync(Project?.Id, query);
			_chartType = Spec.ChartType;

			if (_results is not null)
			{
				BuildChartData();
				await InvokeAsync(this.StateHasChanged);
			}
		}
	}

	private InsightsVisualizationSpecification? _spec;

	protected override void OnParametersSet()
	{
		if (Spec is not null && Spec != _spec)
		{
			_spec = Spec;
			_results = null;
		}
		if (State is not null)
		{
			ConfigureLayout(State.Theme);
		}
	}

    private List<string> GetColorway(TestBucketBaseTheme theme)
    {
        if (Spec is null)
        {
            return [];
        }
        _legendTitleColorMap.Clear();

        List<string> colorway = [];
        ThemePalette palette = theme.ChartPalette;
        if (_results is not null)
        {
            var colors = new ChartColorizer(palette);
            _legendTitleColorMap = colors.GetColorway(Spec, _results, themingService.IsDarkMode);
            colorway = _legendTitleColorMap.Values.ToList();
        }
        else
        {
            colorway = palette.Colors.Select(c => c.ToString(ColorOutputFormats.HexA)).ToList();
        }
        return colorway;
    }

    [MemberNotNull(nameof(_layout))]
    private void ConfigureLayout(TestBucketBaseTheme theme)
    {
        var state = State!;
        _layout ??= PlotlyChartBuilder.GetDefaultLayout(state.IsDarkMode);
        _layout.AutoSize = true;
        _layout.ShowLegend = false;
        if (Spec is not null)
        {
            _layout.XAxis = [
                new XAxis {
                    ShowTickLabels = true,
                    GridColor = Spec.GetGridLineColor(state.IsDarkMode),
                    TickFont = new Plotly.Blazor.LayoutLib.XAxisLib.TickFont
                    {
                        Color = Spec.GetTickLabelColor(state.IsDarkMode),
                        Family = "monospace",
                        Size = 10,
                    }
                }
            ];
            _layout.YAxis = [
                new YAxis {
                    ShowTickLabels = true,
                    GridColor = Spec.GetGridLineColor(state.IsDarkMode),
                    TickFont = new Plotly.Blazor.LayoutLib.YAxisLib.TickFont
                    {
                        Color = Spec.GetTickLabelColor(state.IsDarkMode),
                        Family = "monospace",
                        Size = 10,
                    }
                }
            ];

            if(Spec.ChartType == ChartType.StackedBar)
            {
                _layout.BarMode = BarModeEnum.Stack;
            }
        }

        _layout.Margin = new Plotly.Blazor.LayoutLib.Margin
        {
            L = 20,
            T = 0,
            R = 0,
            B = 20
        };
    }


    protected override void OnInitialized()
    {
        if (State is not null)
        {
            ConfigureLayout(State.Theme);
        }
    }

    private void BuildChartData()
    {
        if (_results is null || State is null)
        {
            return;
        }

        var colorway = GetColorway(State.Theme);
        ConfigureLayout(State.Theme);

        _data.Clear();
        _layout.Annotations = [];
        _layout.Colorway = null;
        if (_chartType == ChartType.Line)
        {
            int colorWayIndex = 0;
            foreach (var series in _results.Series)
            {
                string? color = null;
                if(colorway.Count > 0)
                {
                    color = colorway[colorWayIndex];
                    colorWayIndex++;
                    if(colorWayIndex >= colorway.Count)
                    {
                        colorWayIndex = 0;
                    }
                }
                var scatter = new Scatter()
                {
                    Name = series.Name.ToString(),
                    X = new List<object>(),
                    Y = new List<object>(),
                    Marker = new Plotly.Blazor.Traces.ScatterLib.Marker
                    {
                        Color = color
                    },
                };
                _data.Add(scatter);

                foreach (var point in series.Data)
                {
                    scatter.X.Add(point.Label.ToString());
                    scatter.Y.Add(point.Value);
                }
            }
        }
        else if (_chartType == ChartType.Bar)
        {
            foreach (var series in _results.Series)
            {
                var scatter = new Bar()
                {
                    Name = series.Name.ToString(),
                    X = new List<object>(),
                    Y = new List<object>()
                };

                if (colorway.Count > 0)
                {
                    scatter.Marker = new Plotly.Blazor.Traces.BarLib.Marker
                    {
                        ColorArray = [..colorway]
                    };
                }

                _data.Add(scatter);

                foreach (var point in series.Data)
                {
                    scatter.X.Add(point.Label.ToString());
                    scatter.Y.Add(point.Value);
                }
            }
        }
        else if (_chartType == ChartType.StackedBar)
        {
            int colorWayIndex = 0;
            foreach (var series in _results.Series)
            {
                string? color = null;
                if(colorway.Count > 0)
                {
                    color = colorway[colorWayIndex];
                    colorWayIndex++;
                    if(colorWayIndex >= colorway.Count)
                    {
                        colorWayIndex = 0;
                    }
                }
                var scatter = new Bar()
                {
                    Name = series.Name.ToString(),
                    X = new List<object>(),
                    Y = new List<object>()
                };

                if (colorway.Count > 0)
                {
                    scatter.Marker = new Plotly.Blazor.Traces.BarLib.Marker
                    {
                        Color = color
                        //ColorArray = [..colorway]
                    };
                }

                _data.Add(scatter);

                foreach (var point in series.Data)
                {
                    scatter.X.Add(point.Label.ToString());
                    scatter.Y.Add(point.Value);
                }
            }
        }
        else if (_chartType is ChartType.Pie or ChartType.Donut)
        {
            foreach (var series in _results.Series)
            {

                var pie = new Pie()
                {
                    AutoMargin = true,
                    Sort = false,
                    TextInfo = Plotly.Blazor.Traces.PieLib.TextInfoFlag.None,
                    Name = series.Name.ToString(),
                    Labels = [],
                    Values = []
                };
                if (_chartType == ChartType.Donut)
                { 
                    pie.Hole = 0.8M; 
                }
                _data.Add(pie);

                foreach (var point in series.Data)
                {
                    pie.Labels.Add(point.Label.ToString());
                    pie.Values.Add(point.Value);
                }
            }

            // For pie and donut charts, use the colorway on the layout to define the colors
            // These are ordered by the label so should be correct order
            if (colorway.Count > 0)
            {
                _layout.Colorway = colorway.ToArray();
            }

        }

        if (_chart is not null)
        {
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task DeleteAsync()
    {
        if (Spec is null)
        {
            return;
        }

        await Delete.InvokeAsync(Spec);
    }

    private async Task EditAsync()
    {
        if(Spec is null)
        {
            return;
        }

        var parameters = new DialogParameters<EditInsightsVisualizationSpecification>
        {
            { x => x.Specification, Spec },
            { x => x.State, State} ,
            { x => x.Project, Project },
        };
        var dialog = await dialogService.ShowAsync<EditInsightsVisualizationSpecification>(null, parameters, DefaultBehaviors.DialogOptions);
        var result = await dialog.Result;
        if(result?.Data is InsightsVisualizationSpecification spec)
        {
            await SpecChanged.InvokeAsync(spec);
        }
    }
}
