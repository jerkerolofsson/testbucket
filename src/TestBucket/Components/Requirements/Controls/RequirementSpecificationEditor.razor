@using MudBlazor.Utilities
@using TestBucket.Components.Shared.Kanban
@inject RequirementEditorController editor
@inject RequirementBrowser browser
@inject IStringLocalizer<SharedStrings> loc

@if(Specification is not null)
{
    <div class="container-fill-2-rows">
        <MudToolBar Class="tb-toolbar">

            <TestBucket.Components.Shared.Tab.TbTabHeader Labels="@TabLabels" SelectedLabel="@_selectedTab" SelectedLabelChanged="OnSelectedTabChanged"/>

            @if (_selectedTab == "edit" && _editor is not null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
            }
        </MudToolBar>

        <Splitter Class="container-fill" Bordered="false" Dimension="80" EnableMargin="false" Color="Color.Tertiary">
            <StartContent>
                <MudStack Class="pa-2" Style="width: 100%; height: 100%">
                    @if (_selectedTab != "edit")
                    {
                        <MudText Typo="Typo.h1">@Specification.Name</MudText>
                    }

                    @if(_selectedTab == "kanban" && _specification is not null)
                    {
                        <RequirementKanbanBoard Requirements="@_requirements" ProjectId="@_specification.TestProjectId"/>
                     
                    }

                    @if (_selectedTab == "edit" || _selectedTab == "preview")
                    {
                        <MarkdownEditor @ref="_editor"
                        @bind-Preview="_preview"
                        ShowToolbar="false"
                        MaxHeight="100%"
                        Color="Color.Primary"
                        AllowResize="true"
                        Value="@Specification.Description"
                        ValueChanged="OnDescriptionChanged"
                        SpellChecker="false">
                        </MarkdownEditor>
                    }
                </MudStack>
            </StartContent>
            <EndContent>
                <MudStack Class="pa-2" Style="width: 100%">
                    @if (_selectedTab == "edit")
                    {
                        <Field>
                            <MudTextField Variant="Variant.Outlined"
                            Label="@loc["title"]"
                            HelperText="@loc["title"]"
                            AdornmentColor="Color.Tertiary"
                            Value="@Specification.Name"
                            ValueChanged="OnNameChanged"
                            T="string"
                            AutoFocus="true" />
                        </Field>
                    }
                </MudStack>
            </EndContent>
        </Splitter>

    </div>
}

@code {
    [Parameter] public RequirementSpecification? Specification { get;set; }
    private MarkdownEditor? _editor;
    private bool _preview = true;
    private Requirement[] _requirements = [];
    private RequirementSpecification? _specification;

    private string[] TabLabels => ["edit", "preview", "kanban"];
    private string _selectedTab = "preview";

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if(_specification?.Id != Specification?.Id && Specification is not null)
        {
            _specification = Specification;
            var result = await browser.SearchRequirementsInSpecificationAsync(_specification.Id, 0, 100);
            _requirements = result.Items;
        }
    }

    private async Task OnSelectedTabChanged(string label)
    {
        if (_selectedTab == label)
        {
            return;
        }

        if (label == "edit" && _editor is not null)
        {
            // Clicked on edit
            await _editor.SetPreviewAsync(wantedState: false);
        }
        if (_selectedTab == "edit")
        {
            // Was edit
            await SaveChangesAsync();
        }
        _preview = label == "preview";
        _selectedTab = label;
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        if (Specification is not null)
        {
            await editor.SaveRequirementSpecificationAsync(Specification);
        }
    }

    private void OnNameChanged(string name)
    {
        if(Specification is null)
        {
            return;
        }
        Specification.Name = name;
    }

    private void OnDescriptionChanged(string description)
    {
        if (Specification is null)
        {
            return;
        }
        Specification.Description = description;
    }
}
