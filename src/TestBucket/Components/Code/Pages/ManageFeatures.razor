@attribute [Authorize()]
@page "/{TenantId}/Code/Features"
@using TestBucket.Components.Code.Controls
@using TestBucket.Domain
@using TestBucket.Domain.Code.Models
@layout RequirementsLayout
@inject ArchitectureController architectureController
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<CodeStrings> codeLoc
@inject AuthenticationStateProvider authenticationStateProvider 

@if (_project is not null)
{
    <MudDataGrid 
    @ref="_grid"
    ServerData="LoadGridData"
    Dense Hover RowClass="tb-datarow cursor-pointer"
    RowClick="async (row) => await OnRowClicked(row.Item)"
    T="Feature" SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudTextField Value="@_searchText" T="string" ValueChanged="OnSearch"
                Style="min-width: 15vw"
                Class="mt-2"
                Clearable="true"
                Variant="Variant.Text"
                IconSize="Size.Small"
                Adornment="Adornment.Start"
                Placeholder="@loc["search"]"
                AdornmentIcon="@Icons.Material.Filled.Search" />

                <MudSpacer />
                <PermissionView Entity="PermissionEntityType.Architecture" Level="PermissionLevel.Write">
                    <Authorized>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddAsync"></MudIconButton>
                    </Authorized>
                </PermissionView>
            </MudStack>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 30%" />
            <col style="width: 30%;" />
            <col style="width: 30%;" />
            <col style="width: 10%;" />
        </ColGroup>

        <Columns>
            <TemplateColumn Title="@loc["name"]">
                <CellTemplate>
                    @context.Item.Name
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="@codeLoc["dev-lead"]">
                <CellTemplate>
                    @context.Item.DevLead
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="@codeLoc["test-lead"]">
                <CellTemplate>
                    @context.Item.TestLead
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn>
                <CellTemplate>
                    <PermissionView Entity="PermissionEntityType.Architecture" Level="PermissionLevel.Delete">
                        <Authorized>
                            <MudIconButton OnClick="async() => await DeleteAsync(context.Item)" Color="Color.Error" Icon="@Icons.Material.Filled.Clear" />
                        </Authorized>
                    </PermissionView>

                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Feature" />
        </PagerContent>
    </MudDataGrid>
}


@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    private TestProject? _project;
    private IReadOnlyList<Feature> _features = [];
    private MudDataGrid<Feature>? _grid;
    private string _searchText = "";

    protected void OnSearch(string text)
    {
        _searchText = text;
        _grid?.ReloadServerData();
    }

    private async Task AddAsync()
    {
        await architectureController.AddFeatureAsync();
        await LoadAsync();
    }

    private async Task OnRowClicked(Feature feature)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.HasPermission(PermissionEntityType.Architecture, PermissionLevel.Write))
        {
            await architectureController.EditFeatureAsync(feature);
            await LoadAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if(_project?.Id != Project?.Id && Project is not null)
        {
            _project = Project;
            _features = await architectureController.GetFeaturesAsync(Project.Id);
            _grid?.ReloadServerData();
        }
    }

    protected async Task DeleteAsync(Feature feature)
    {
        await architectureController.DeleteFeatureAsync(feature);
    }

    /// <summary>
    /// Loads commit data
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    private Task<GridData<Feature>> LoadGridData(GridState<Feature> state)
    {
        if (Project is null)
        {
            return Task.FromResult(new GridData<Feature> { TotalItems = 0 });
        }

        Feature[] page;
        if(string.IsNullOrEmpty(_searchText))
        {
            page = _features.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }
        else
        {
            page = _features.Where(x=>x.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase)).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }


        GridData<Feature> data = new()
        {
            Items = page,
            TotalItems = (int) _features.Count
        };

        return Task.FromResult(data);
    }
}