@attribute [Authorize(Roles="SUPERADMIN")]
@page "/{TenantId}/Settings/Categories/AI"
@using TestBucket.Domain
@using TestBucket.Domain.Settings
@layout SettingsLayout
@inject ISettingsManager settingsManager
@inject ISettingsProvider settingsProvider
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject IStringLocalizer<SettingStrings> settingsLoc
@inject IStringLocalizer<SharedStrings> loc

<MudStack Class="container-settings-page">

    <MudText Typo="Typo.h1">AI</MudText>

    <MudStack Class="pa-5">
        <MudExpansionPanels>

            <MudExpansionPanel>
                <TitleContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@GetProviderIcon(_aiProvider)"/>
                        @settingsLoc["ai-provider"]
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudStack>
                        <MudStack Row>
                            <MudRadioGroup Value="_aiProvider" ValueChanged="OnAiProviderChanged" T="string">
                                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("ollama")"><MudIcon Size="Size.Small" Icon="@TbIcons.Brands.Ollama"/>  Ollama</MudRadio>
                                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("open-ai")"><MudIcon Size="Size.Small" Icon="@TbIcons.Brands.OpenAI" />  Open AI</MudRadio>
                                @* <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("github-models")"><MudIcon Size="Size.Small" Icon="@Icons.Custom.Brands.GitHub" /> Github Models</MudRadio>
                                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("azure-ai")"><MudIcon Size="Size.Small" Icon="@TbIcons.Brands.AzureAI" /> Azure AI</MudRadio> *@
                                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("anthropic")"><MudIcon Size="Size.Small" Icon="@TbIcons.Brands.Claude" /> Anthropic</MudRadio>
                            </MudRadioGroup>
                        </MudStack>

                        @if(_aiProvider == "ollama")
                        {
                            <Field Row>
                                <FieldHeader>Ollama URL</FieldHeader>
                                <MudSpacer/>
                                <MudTextField T="string" Placeholder="Ollama URL" Variant="Variant.Outlined" Value="@_aiProviderUrl" ValueChanged="OnAiProviderUrlChanged" />
                            </Field>

                            <MudAlert>@settingsLoc["ollama-context-length-message"]</MudAlert>
                        }

                        @if(_aiProvider == "anthropic")
                        {
                            <Field Row>
                                <FieldHeader>API URL</FieldHeader>
                                <MudSpacer/>
                                <MudTextField T="string"Placeholder="Azure URL"  Variant="Variant.Outlined" Value="@_aiProviderUrl" ValueChanged="OnAiProviderUrlChanged"/>
                            </Field>

                            @foreach (var setting in _settings.Where(x => x.Metadata.SearchText.Contains("anthropic")))
                            {
                                if (_fieldMap.TryGetValue(setting.Metadata.Id, out var fieldValue))
                                {
                                    <FieldEditor Field="@fieldValue" FieldChanged="OnFieldChangedAsync">
                                    </FieldEditor>
                                }
                            }
                        }


                        @if (_aiProvider == "open-ai")
                        {
                            <Field Row>
                                <FieldHeader>OpenAI API URL</FieldHeader>
                                <MudSpacer />
                                <MudTextField T="string" Placeholder="OpenAI URL" Variant="Variant.Outlined" Value="@_aiProviderUrl" ValueChanged="OnAiProviderUrlChanged" />
                            </Field>

                            @foreach (var setting in _settings.Where(x => x.Metadata.SearchText.Contains("open-ai")))
                            {
                                if (_fieldMap.TryGetValue(setting.Metadata.Id, out var fieldValue))
                                {
                                    <FieldEditor Field="@fieldValue" FieldChanged="OnFieldChangedAsync">
                                    </FieldEditor>
                                }
                            }
                        }

                        @if(_aiProvider == "azure-ai")
                        {
                            <Field Row>
                                <FieldHeader>Azure URL</FieldHeader>
                                <MudSpacer/>
                                <MudTextField T="string"Placeholder="Azure URL"  Variant="Variant.Outlined" Value="@_aiProviderUrl" ValueChanged="OnAiProviderUrlChanged"/>
                            </Field>

                            @foreach (var setting in _settings.Where(x => x.Metadata.SearchText == "azure-ai"))
                            {
                                if (_fieldMap.TryGetValue(setting.Metadata.Id, out var fieldValue))
                                {
                                    <FieldEditor Field="@fieldValue" FieldChanged="OnFieldChangedAsync">
                                    </FieldEditor>
                                }
                            }
                        }
                        @if(_aiProvider == "github-models")
                        {
                            <Field Row>
                                <FieldHeader>Github Models URL</FieldHeader>
                                <MudSpacer/>
                                <MudTextField T="string"Placeholder="Github Models URL"  Variant="Variant.Outlined" Value="@_aiProviderUrl" ValueChanged="OnAiProviderUrlChanged"/>
                            </Field>
                            <MudText Typo="Typo.subtitle1" Color="Color.Warning">Gibhub models should only be used for prototyping</MudText>

                            @foreach (var setting in _settings.Where(x => x.Metadata.SearchText == "github-models"))
                            {
                                if (_fieldMap.TryGetValue(setting.Metadata.Id, out var fieldValue))
                                {
                                    <FieldEditor Field="@fieldValue" FieldChanged="OnFieldChangedAsync">
                                    </FieldEditor>
                                }
                            }           
                        }
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
                
            <MudExpansionPanel>
                <TitleContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@GetModelIcon(_defaultModel)"/>
                        @settingsLoc["ai-default-model"]
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudStack>
                        <MudStack Row Spacing="5">
                            <MudRadioGroup Value="_defaultModel" ValueChanged="OnDefaultModelChanged" T="string">
                                @foreach(var model in LlmModels.GetModels(_aiProvider, ModelCapability.Tools))
                                {
                                    <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@model.Name">
                                        <MudIcon Size="Size.Small" Icon="@GetModelIcon(model)" />
                                        <span>@model.Name</span>
                                    </MudRadio>
                                }
                            </MudRadioGroup>
                        </MudStack>

                        @foreach (var setting in _settings.Where(x => x.Metadata.SearchText.Contains("ai-models-shared")))
                        {
                            if (_fieldMap.TryGetValue(setting.Metadata.Id, out var fieldValue))
                            {
                                <FieldEditor Field="@fieldValue" FieldChanged="OnFieldChangedAsync">
                                </FieldEditor>
                            }
                        }
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>

            
            <MudExpansionPanel>
                <TitleContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@GetProviderIcon(_embeddingAiProvider)"/>
                        @settingsLoc["embedding-ai-provider"]
                    </MudStack>
                </TitleContent>
                <ChildContent>
                    <MudStack>
                        <MudStack Row>
                            <MudRadioGroup Value="_embeddingAiProvider" ValueChanged="OnEmbeddingAiProviderChanged" T="string">
                                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("ollama")"><MudIcon Size="Size.Small" Icon="@TbIcons.Brands.Ollama"/>  Ollama</MudRadio>
                            </MudRadioGroup>
                        </MudStack>

                        @if(_embeddingAiProvider == "ollama")
                        {
                            <Field Row>
                                <FieldHeader>Ollama URL</FieldHeader>
                                <MudSpacer/>
                                <MudTextField T="string" Placeholder="Ollama URL" Variant="Variant.Outlined" Value="@_embeddingAiProviderUrl" ValueChanged="OnEmbeddingAiProviderUrlChanged" />
                            </Field>
                        }
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
                
            <MudExpansionPanel>
                <TitleContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@GetModelIcon(_embeddingModel)"/>
                        @settingsLoc["ai-embedding-model"]
                    </MudStack>
                </TitleContent>
                <ChildContent>
                <MudStack Row Spacing="5">
                    <MudRadioGroup Value="_embeddingModel" ValueChanged="OnEmbeddingModelChanged" T="string">
                        @foreach(var model in LlmModels.GetModels(ModelCapability.Embedding))
                        {
                            <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@model.Name">
                                <MudIcon Size="Size.Small" Icon="@GetModelIcon(model)" />
                                <span>@model.Name</span>
                            </MudRadio>
                        }
                    </MudRadioGroup>
                </MudStack>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>

        <MudLink Href="@($"/{TenantId}/Settings/Search?q=ai-")">@loc["more-options"]</MudLink>
        <MudLink Href="@McpUrl">@settingsLoc["mcp"]</MudLink>

    </MudStack>
</MudStack>
