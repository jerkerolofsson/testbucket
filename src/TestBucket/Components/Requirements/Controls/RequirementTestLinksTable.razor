@using TestBucket.Contracts.Fields
@inject RequirementBrowser browser
@inject RequirementEditorController editor
@inject FieldController fieldController
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc

<MudDataGrid Items="_links" Dense Hover T="RequirementTestLink" SortMode="SortMode.Single">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
            <MudText>@loc["test-coverage"]</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTestLinkAsync"></MudIconButton>
        </MudStack>
    </ToolBarContent>

    <ColGroup>
        <col style="width: 60%;" />
        <col style="width: 30%;"/>
        <col style="width: 10%;" />
    </ColGroup>

    <Columns>

        <TemplateColumn Title="@loc["title"]" Sortable="true" SortBy="x => x.TestCase!.Name">
            <CellTemplate>
                @if(context.Item.TestCase is not null)
                {
                    <MudLink Href="@appNavigationManager.GetUrl(context.Item.TestCase)">@context.Item.TestCase!.Name</MudLink>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="@loc["test-category"]" Sortable="true" SortBy="x => x.TestCase!.Name">
            <CellTemplate>
                @if (context.Item.TestCase?.TestCaseFields is not null && _category is not null)
                {
                    var field = context.Item.TestCase.TestCaseFields.Where(x => x.FieldDefinitionId == _category.Id).FirstOrDefault();
                    if(field is not null)
                    {
                        @field.GetValueAsString()
                    }
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn CellStyle="width: 1%">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="async () => await DeleteLinkAsync(context.Item)"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>

</MudDataGrid>

@code {
    [Parameter] public Requirement? Requirement { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }

    private RequirementTestLink[] _links = [];
    private IReadOnlyList<FieldDefinition> _fieldDefinitions = [];
    private FieldDefinition? _category;

    private async Task AddTestLinkAsync()
    {
        if(Requirement is null)
        {
            return;
        }

        await editor.LinkRequirementToTestCaseAsync(Requirement, Project, Team);
        await LoadDataAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (Requirement is not null)
        {
            _links = await browser.GetLinksForRequirementAsync(Requirement);

            if(Requirement.TestProjectId is not null)
            {
                _fieldDefinitions = await fieldController.GetDefinitionsAsync(Requirement.TestProjectId.Value, FieldTarget.TestCase);
                _category = _fieldDefinitions.Where(x => x.TraitType == TraitType.TestCategory).FirstOrDefault();
            }
        }

    }

    private async Task DeleteLinkAsync(RequirementTestLink link)
    {
        await browser.DeleteRequirementLinkAsync(link);
        await LoadDataAsync();
    }
}
