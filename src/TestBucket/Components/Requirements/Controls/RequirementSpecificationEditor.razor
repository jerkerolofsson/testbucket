@inject RequirementEditorController editor

@if(Specification is not null)
{
    <div class="container-fill-2-rows">
        <MudToolBar Class="tb-toolbar">

            @if (!_preview && _editor is not null)
            {
                <MudTextField Variant="Variant.Outlined" Label="Name" AdornmentColor="Color.Tertiary" Value="@Specification.Name" ValueChanged="OnNameChanged" T="string" AutoFocus="true" />

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="Save Changes">
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveChangesAsync" Class="rounded-0" />
                </MudTooltip>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
            }
            else
            {
                <MudText Typo="Typo.h3" Style="color: #fff" Class="mr-3">@Specification.Name</MudText>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="Edit">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => BeginEdit()" Class="rounded-0" />
                </MudTooltip>
            }
        </MudToolBar>

        <MarkdownEditor 
            @ref="_editor"
            @bind-Preview="_preview"
            ShowToolbar="false"
            MaxHeight="100%"
            Color="Color.Primary"
            AllowResize="true"
            Value="@Specification.Description"
            ValueChanged="OnDescriptionChanged"
            SpellChecker="false">
            </MarkdownEditor>
    </div>
}

@code {
    [Parameter] public RequirementSpecification? Specification { get;set; }
    private MarkdownEditor? _editor;
    private bool _preview = true;

    private void BeginEdit()
    {
        _preview = false;
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        if (Specification is not null)
        {
            await editor.SaveRequirementSpecificationAsync(Specification);
        }
    }


    private void OnNameChanged(string name)
    {
        if(Specification is null)
        {
            return;
        }
        Specification.Name = name;
    }

    private void OnDescriptionChanged(string description)
    {
        if (Specification is null)
        {
            return;
        }
        Specification.Description = description;
    }
}
