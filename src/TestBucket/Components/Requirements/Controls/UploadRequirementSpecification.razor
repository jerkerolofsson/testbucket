@using TestBucket.Domain.Progress
@using TestBucket.Domain.Requirements
@using TestBucket.Domain.Requirements.Import
@inject RequirementEditorController editor
@inject IProgressManager progressManager

@if(Project is not null)
{
    <UploadFile MaxFileSize="10_000_000" TestProjectId="@Project.Id" Accept=".pdf,.md,.txt" FileUploadStarted="OnFileUploadStarted" FileUploaded="OnFileUploaded">

        @if(_loading)
        {
            <MudProgressLinear Indeterminate Color="Color.Tertiary"/>
        }
        else
        {
            <MudStack Row>
                <MudIcon Icon="@Icons.Material.Filled.FileUpload" />
                <MudText Typo="Typo.h6">
                    Drag and drop documents here or click to browse for a file
                </MudText>
            </MudStack>
            <MudText Typo="Typo.subtitle1">Supported formats: .pdf, .md, .txt</MudText>
        }
    </UploadFile>
}
@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private bool _loading = false;

    public void OnFileUploadStarted()
    {
        _loading = true;
    }

    public async Task OnFileUploaded(FileResource fileResource)
    {
        if(Project?.TenantId is null)
        {
            return;
        }

        await using var progressTask = progressManager.CreateProgressTask("Importing " + fileResource.Name + "..");

        var spec = await editor.ImportAsync(Project.TeamId, Project.Id, fileResource);
        _loading = false;
    }
}
