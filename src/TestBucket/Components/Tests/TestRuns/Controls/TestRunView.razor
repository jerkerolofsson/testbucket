@implements IAsyncDisposable
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject IStringLocalizer<SharedStrings> loc

<MudStack Spacing="0" Style="width: 100%">

    <Splitter Style="height: 100%" Color="Color.Tertiary" Bordered="false" Dimension="70" EnableMargin="false">
        <StartContent>

            <TestCaseRunGrid 
                @ref="testCaseRunGrid" 
                Run="@TestRun" 
                SelectedTestCaseRun="_selectedTestCaseRun" 
                SelectedTestCaseRunChanged="OnSelectedTestCaseRunChanged" />
        </StartContent>
        <EndContent>
            <MudStack Class="pa-2" Style="width: 100%">
                @if (_selectedTestCaseRun is not null)
                {
                    var readOnly = _selectedTestCaseRun.Result != TestResult.NoRun;

                    <CascadingValue Value="@_selectedTestCaseRun">
                        <MudStack Class="pa-2" Style="width: 100%">

                            <MudStack Row Style="width: 100%">
                                <ResultPill Result="@_selectedTestCaseRun.Result" ReadOnly="@readOnly" ResultChanged="OnTestCaseRunResultChanged"/>
                                <MudSpacer/>
                                <TestCaseRunDuration />
                            </MudStack>

                            <MarkdownEditor ShowToolbar="false"
                                            MaxHeight="100%"
                                            MinHeight="100%"
                                            AllowResize="false"
                                            Preview="true"
                                            Value="@_markdown"
                                            SpellChecker="false">
                            </MarkdownEditor>

                            @if (!readOnly)
                            {
                                <TestCaseRunEditor TestCaseRun="@_selectedTestCaseRun" TestCaseRunChanged="OnTestCaseRunChanged" />
                                <TestRunStatePicker State="@State" StateChanged="OnTestCaseRunStateChanged" />
                            
                                <FieldsEditor TestCaseRun="@_selectedTestCaseRun" />
                            }
                            else
                            {
                                <TestCaseRunReadOnlyView TestCaseRun="@_selectedTestCaseRun" />
                            }
                        </MudStack>
                    </CascadingValue>
                }
            </MudStack>
        </EndContent>
    </Splitter>


</MudStack>
@code {
}
