@using MudBlazor.Utilities
@using TestBucket.Components.Users.Services
@inject UserController controller

<MudTooltip Text="@UserName">
    <img class="@ClassImg" style="@Style" src="@ProfileImage" onerror="@OnErrorJs" @onclick="OnUserClickedAsync" />
    <div class="@ClassDiv" style="@Style" @onclick="OnUserClickedAsync">@UserInitials</div>
</MudTooltip>

@code {
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string? Style { get; set; }
    [Parameter] public string? UserName { get; set; }
    [Parameter] public EventCallback<string> ImageClicked { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public Size Size { get; set; } = Size.Medium;

    private string OnErrorJs => $"tbProfileImageFailedToLoad('{_id}')";
    private string _id = "tb-profile-" + Guid.NewGuid().ToString();
    private string ClassImg => new CssBuilder("tb-profile-image")
            .AddClass("small", Size == Size.Small)
            .AddClass("medium", Size == Size.Medium)
            .AddClass("large", Size == Size.Large)
            .AddClass("read-only", ReadOnly)
            .AddClass(_id, true)
            .AddClass(Class, !string.IsNullOrEmpty(Class))
            .Build();
    
    private string ClassDiv => new CssBuilder("tb-profile-image")
            .AddClass("small", Size == Size.Small)
            .AddClass("medium", Size == Size.Medium)
            .AddClass("large", Size == Size.Large)
            .AddClass("read-only", ReadOnly)
            .AddClass(_id, true)
            .AddClass($"tb-background-{BackgroundHash}", true)
            .AddClass(Class, !string.IsNullOrEmpty(Class))
            .Build();

    private int BackgroundHash
    {
        get
        {
            if(_userName is not null)
            {
                var hash = Math.Abs(_userName.GetHashCode()) % 10;
                return hash;
            }
            return 0;    
        }
    }

    private string UserInitials
    {
        get
        {
            if(string.IsNullOrEmpty(_userName))
            {
                return "-";
            }
            return _userName[0].ToString().ToUpperInvariant();
        }
    }
    private string _userName = "nouser";
    private string ProfileImage => $"/api/users/profile/{_userName}/image";

    private async Task OnUserClickedAsync()
    {
        if(ReadOnly)
        {
            return;
        }
        await ImageClicked.InvokeAsync(_userName);
    }

    protected override void OnParametersSet()
    {
        if(UserName is not null)
        {
            _userName = UserName;
        }
    }
}
