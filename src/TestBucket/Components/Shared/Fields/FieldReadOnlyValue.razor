@if(Field?.FieldDefinition is not null) 
{
    <MudText Class="tb-read-only-field">
    @if (Field.FieldDefinition.Type is (FieldType.String or FieldType.SingleSelection) )
    {
        @Field.StringValue
    }
    else if (Field.FieldDefinition.Type == FieldType.Boolean)
    {
        <MudSwitchM3 Color="Color.Primary" ReadOnly Value="@Field.BooleanValue" />
    }
    else if (Field.FieldDefinition.Type == FieldType.Double)
    {
        @Field.DoubleValue
    }
    else if (Field.FieldDefinition.Type == FieldType.DateOnly)
    {
        @Field.DateValue?.Humanize()
    }
    else if (Field.FieldDefinition.Type == FieldType.TimeSpan)
    {
        @Field.TimeSpanValue?.Humanize()
    }
    else if (Field.FieldDefinition.Type == FieldType.DateTimeOffset)
    {
        @Field.DateTimeOffsetValue?.ToLocalTime().Humanize()
    }
    else if ((Field.FieldDefinition.Type is FieldType.StringArray or FieldType.MultiSelection) && Field.StringValuesList is not null)
    {
        <MudChipSet T="string">
            @foreach (var value in Field.StringValuesList)
            {
                    string style = "";
                    if (Field.FieldDefinition.OptionColors is not null)
                    {
                        if (Field.FieldDefinition.OptionColors.TryGetValue(value, out var color))
                        {
                            style += $" background: {color}";
                        }
                    }

                <MudChip T="string" Style="@style">@value</MudChip>
            }
        </MudChipSet>
    }
    </MudText>
}
@code {
    [Parameter] public FieldValue? Field { get; set; }
}
