@using Plotly.Blazor.LayoutLib
@using TestBucket.Contracts.Fields
@using TestBucket.Domain.Testing.Aggregates
@using TestBucket.Domain.Testing.TestRuns.Search
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject IStringLocalizer<SharedStrings> loc
@inject ThemingService themingService
@inject FieldController fieldController

<MudStack Spacing="0" Style="width: 100%" Class="pa-2">

    @if (TestRun is not null)
    {
        <MudStack Spacing="3" Row AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h1" Color="Color.Primary">@_accentText</MudText>
            <MudText Typo="Typo.h1">@TestRun.Name</MudText>
        </MudStack>

        <MudStack Row Justify="Justify.Center" Style="width:100%">
            <MudTextField Value="_searchText" T="string" ValueChanged="OnSearch"
            Class="default-search"
            Clearable="true"
            Placeholder="@loc["search-results"]"
            Variant="Variant.Outlined"
            IconSize="Size.Small"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" />
        </MudStack>

        @if (_results is not null)
        {
            @* <TestResultSummaryBar Summary="@_results"/> *@

            <div class="tb-run-main-charts">
                <ResultChart Results="@_results" Title="@loc["test-results"]" />

                @foreach(var kvp in _groupedByField)
                {
                    string title = kvp.Key.Name;
                    <StackedResultChart Results="@kvp.Value" Title="@title" />
                }
            </div>
        }
        else
        {

        }

        <AttachmentGrid AllowUpload TestRunId="@TestRun.Id" Style="width: 100%"  />

        @if (TestRun.SystemOut is not null)
        {
            <pre>
                <code>@TestRun.SystemOut</code>
            </pre>
        }
    }
</MudStack>
@code {

    [Parameter] public TestRun? TestRun { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }

    private Dictionary<FieldDefinition, Dictionary<string, TestExecutionResultSummary>> _groupedByField = [];
    private TestExecutionResultSummary? _results;
    private string? _queryKey;
    private string _accentText = "";
    private string _searchText = "";

    private IReadOnlyList<FieldDefinition> _fields = [];
    private long _testProjectId;

    private async Task OnSearch(string text)
    {
        if(TestRun is null)
        {
            return;
        }

        var query = SearchTestCaseRunQueryParser.Parse(text, _fields);
        
        // Remove test run id from search string shown to user
        query.TestRunId = null;
        _searchText = query.ToSearchText();
        query.TestRunId = TestRun.Id;

        // Create a key so we only reload data if the query actually changed
        var queryKey = query.AsCacheKey();
        if (queryKey != _queryKey)
        {
            _queryKey = queryKey;
            _results = await testBrowser.GetTestExecutionResultSummaryAsync(query);

            _accentText = "";
            if (_results.Total > 0)
            {
                var passrate = Math.Round(_results.Passed * 100.0 / _results.Total);
                _accentText = $"{passrate.ToString()}%";
            }

            if (Project is not null)
            {
                var fields = await fieldController.GetDefinitionsAsync(Project.Id, FieldTarget.TestCaseRun);
                _groupedByField.Clear();
                foreach (var field in fields.Where(x => x.Type == FieldType.SingleSelection))
                {
                    var results = await testBrowser.GetTestExecutionResultSummaryByFieldAsync(query, field);
                    _groupedByField[field] = results;
                }
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Project?.Id is not null)
        {
            if (_fields.Count == 0 || Project.Id != _testProjectId)
            {
                _testProjectId = Project.Id;
                _fields = await fieldController.GetDefinitionsAsync(_testProjectId, FieldTarget.TestCaseRun);
            }
        }
        if (TestRun is not null)
        {
            await OnSearch("");
        }
    }
}
