@using TestBucket.Contracts.Localization
@using TestBucket.Domain.AI.Agent
@using TestBucket.Domain.AI.Agent.Models
@inject AppNavigationManager appNavigationManager
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject IAppLocalization loc
@implements IDisposable

<div class="references">

    <MudMenu Icon="@Icons.Material.Filled.Add" Color="Color.Success">
        <MudMenuItem OnClick="AddTestCaseAsync">@loc.Shared["test-case"]</MudMenuItem>
    </MudMenu>

    @foreach (var reference in _context.References)
    {
        <MudChip Size="Size.Small" Value="@reference" T="ChatReference" OnClose="() => RemoveReference(reference)">@reference.Name</MudChip>
    }

</div>


@code {
    [Parameter] public EventCallback ReferencesChanged { get; set; }

    [Parameter] public AgentChatContext? ChatContext { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    private AgentChatContext _context = new();

    private async Task AddTestCaseAsync()
    {
        var testCase = await testBrowser.PickTestCaseAsync(Project, Team);
        if(testCase is not null)
        {
            await AddReferenceAsync(ChatReferenceBuilder.Create(testCase));
        }
    }

    private async Task RemoveReference(ChatReference reference)
    {
        _context.References.Remove(reference);
        await ReferencesChanged.InvokeAsync(_context);
    }

    private async void OnActiveDocumentChanged(object? sender, ChatReference? reference)
    {
        try
        {
            _context.References.RemoveAll(x => x.IsActiveDocument);
            if (reference is not null)
            {
                await AddReferenceAsync(reference);
            }
            await InvokeAsync(this.StateHasChanged);
        }
        catch
        {

        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        appNavigationManager.State.ActiveDocumentChanged += OnActiveDocumentChanged;
    }

    public void Dispose()
    {
        appNavigationManager.State.ActiveDocumentChanged -= OnActiveDocumentChanged;
    }

    private async Task AddReferenceAsync(ChatReference reference)
    {
        if (!_context.References.Any(x => x.Id == reference.Id))
        {
            _context.References.Add(reference);
        }
        await ReferencesChanged.InvokeAsync(_context);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ChatContext is not null)
        {
            // Check if it has changed
            bool hasChanged = false;
            if(_context.References.Count != ChatContext.References.Count)
            {
                hasChanged = true;
            }
            else
            {
                for(int i=0; i<_context.References.Count; i++)
                {
                    var a = _context.References[i];
                    var b = ChatContext.References[i];
                    if (!a.Equals(b))
                    {
                        hasChanged = true;
                        break;
                    }
                }
            }

            if (hasChanged)
            { 
                _context = ChatContext;

                // Call AddReferenceAsync so we compile tests
                List<ChatReference> references = [.. _context.References];
                _context.References.Clear();
                foreach(var reference in references)
                {
                    await AddReferenceAsync(reference);
                }
            }
        }
    }
}
