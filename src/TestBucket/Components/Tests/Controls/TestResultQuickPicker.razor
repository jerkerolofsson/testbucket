@using TestBucket.Contracts.Testing.Models
@using TestBucket.Domain.States


@if(Result == TestResult.NoRun)
{
    <MudStack Row>
        <MudButton OnClick="() => OnResultChanged(TestResult.Passed)" StartIcon="@Icons.Material.Filled.CheckCircle" Style="color: var(--clr-passed)" Color="Color.Success">PASS</MudButton>
        <MudButton OnClick="() => OnResultChanged(TestResult.Failed)" StartIcon="@Icons.Material.Filled.RemoveCircle" Style="color: var(--clr-failed)" Color="Color.Error">FAIL</MudButton>
        <MudButton OnClick="() => OnResultChanged(TestResult.Blocked)" StartIcon="@Icons.Material.Filled.StopCircle" Style="color: var(--clr-blocked)" Color="Color.Warning">BLOCK</MudButton>
        <MudButton OnClick="() => OnResultChanged(TestResult.Skipped)" StartIcon="@Icons.Material.Filled.SkipNext" Style="color: var(--clr-skipped)" Color="Color.Warning">SKIP</MudButton>
    </MudStack>
}

@code {
    [Parameter] public long? TestProjectId { get; set; }
    [Parameter] public TestResult Result { get; set; } = TestResult.NoRun;
    [Parameter] public EventCallback<TestResult> ResultChanged { get; set; }

    private async Task OnResultChanged(TestResult result)
    {
        await ResultChanged.InvokeAsync(result);
    }
}
