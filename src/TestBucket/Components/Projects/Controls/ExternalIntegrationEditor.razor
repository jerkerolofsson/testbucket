@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Components.Uploads.Controls
@using TestBucket.Contracts.Integrations
@using TestBucket.Contracts.Projects
@using TestBucket.Domain.Files.Models
@using TestBucket.Domain.Teams.Models
@inject ProjectController projectService
@inject IStringLocalizer<IntegrationStrings> intLoc
@inject IStringLocalizer<SharedStrings> loc

@if (Name is not null && Integration is not null && Extension is not null)
{
    <MudPaper Class="mb-3 pa-3" Style="width: 100%">

        <MudStack>
            <MudStack Row AlignItems="AlignItems.Center" Class="tb-integration-title mb-5">
                <ExternalSystemIcon SystemName="@Extension?.SystemName" Size="Size.Large"/>
                <MudText Typo="Typo.h1">@(Extension?.FriendlyName ?? Name)</MudText>
            </MudStack>

            <MudText>@Extension?.Description</MudText>
        </MudStack>

        <MudTabs Style="width: 100%">
            <MudTabPanel Text="@intLoc["integration"]">
                <MudStack Class="pt-3">
                    @if (Integration is not null)
                    {
                        <Field Row>
                            <FieldHeader>@loc["name"]</FieldHeader>
                            <MudSpacer />
                            <MudTextField Value="Integration.Name" T="string" ValueChanged="NameChanged" />
                        </Field>

                        @if (Extension is not null && (Extension.RequiredFields & ExtensionFields.BaseUrl) == ExtensionFields.BaseUrl)
                        {
                            <Field Row>
                                <FieldHeader>@intLoc["integration-base-url"]</FieldHeader>
                                <MudSpacer />
                                <MudTextField Value="Integration.BaseUrl" T="string" ValueChanged="BaseUrlChanged" />
                            </Field>
                        }

                        @if (Extension is not null && (Extension.RequiredFields & ExtensionFields.ProjectId) == ExtensionFields.ProjectId)
                        {
                            <Field Row>
                                <FieldHeader>@intLoc["project-id"]</FieldHeader>
                                <MudSpacer />
                                <MudTextField Value="Integration.ExternalProjectId"
                                              T="string"
                                              ValueChanged="ExternalProjectIdChanged"
                                              HelperText="@Extension?.ProjectIdHelperText" />
                            </Field>
                        }

                        @if (Extension is not null && (Extension.RequiredFields & ExtensionFields.ClientId) == ExtensionFields.ClientId)
                        {
                            <Field Row>
                                <FieldHeader>@intLoc["client-id"]</FieldHeader>
                                <MudSpacer />
                                <MudTextField Value="Integration.ClientId" T="string" ValueChanged="OnClientIdChanged" />
                            </Field>
                             <Field Row>
                                <FieldHeader>@intLoc["client-secret"]</FieldHeader>
                                <MudSpacer />
                                <MudTextField Value="Integration.ClientSecret" T="string" ValueChanged="OnClientSecretChanged" />
                            </Field>
                            <Field Row>
                                <FieldHeader>@intLoc["scope"]</FieldHeader>
                                <MudSpacer />
                                <MudTextField Value="Integration.Scope" T="string" ValueChanged="OnScopeChanged" />
                            </Field>
                        }

                        @if (Extension is not null && (Extension.RequiredFields & ExtensionFields.AccessToken) == ExtensionFields.AccessToken)
                        {
                            <Field Row>
                                <FieldHeader>@intLoc["access-token"]</FieldHeader>
                                <MudSpacer />
                                @* InputType="InputType.Password"  *@
                                <MudTextField Value="Integration.AccessToken"
                                              T="string"
                                              ValueChanged="AccessTokenChanged"
                                              HelperText="@Extension?.AccessTokenHelperText" />
                            </Field>
                        }

                        @if (Extension is not null && (Extension.RequiredFields & ExtensionFields.ApiKey) == ExtensionFields.ApiKey)
                        {
                            <Field Row>
                                <FieldHeader>@intLoc["api-key"]</FieldHeader>
                                <MudSpacer />
                                @* InputType="InputType.Password"  *@
                                <MudTextField Value="Integration.ApiKey"
                                              T="string"
                                              ValueChanged="ApiKeyChanged" />
                            </Field>
                        }

                        <Field Row>
                            <FieldHeader>@loc["enabled"]</FieldHeader>
                            <MudSpacer />
                            <MudSwitchM3 Color="Color.Primary" T="bool" Value="Integration.Enabled" ValueChanged="EnabledChanged" />
                        </Field>


                    }
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="@intLoc["features"]">
                <MudStack Class="pt-3">
                    @if (Extension is not null)
                    {
                        ExternalSystemCapability[] capabilities = [ExternalSystemCapability.McpServerProvider, ExternalSystemCapability.CreatePipeline, ExternalSystemCapability.CreateIssues, ExternalSystemCapability.GetIssues, ExternalSystemCapability.GetMilestones, ExternalSystemCapability.GetReleases, ExternalSystemCapability.GetLabels, ExternalSystemCapability.GetRequirements, ExternalSystemCapability.ReadCodeRepository, ExternalSystemCapability.ReadPipelineArtifacts];
                        string[] labels = ["mcp-server", "create-pipeline", "create-issues", "get-issues", "get-milestones", "get-releases", "get-labels", "get-requirements", "read-repository", "read-artifacts"];

                        @for (int i = 0; i < Math.Min(capabilities.Length, labels.Length); i++)
                        {
                            <ExternalSystemCapabilityField SupportedCapabilities="@Extension.SupportedCapabilities"
                                                           EnabledCapabilities="@Integration.EnabledCapabilities"
                                                           Title="@intLoc[labels[i]]"
                                                           OnEnabled="OnEnabledAsync"
                                                           OnDisabled="OnDisabledAsync"
                                                           Capability="@capabilities[i]" />
                        }
                    }
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="@intLoc["artifacts"]">
                <MudStack Class="pt-3">
                    @if(Extension is not null)
                    {
                        <MudText Typo="Typo.h3">@intLoc["artifacts-pattern"]</MudText>
                        <MudText Typo="Typo.subtitle2">@intLoc["artifacts-pattern-description"]</MudText>
                        if((Extension.SupportedCapabilities&ExternalSystemCapability.ReadPipelineArtifacts) == ExternalSystemCapability.ReadPipelineArtifacts)
                        {
                            <Field>
                                <FieldHeader>@intLoc["test-result-artifact-pattern"]</FieldHeader>
                                <MudTextField InputType="InputType.Text"
                                Value="Integration.TestResultsArtifactsPattern"
                                T="string"
                                ValueChanged="TestResultsArtifactsPatternChanged"
                                HelperText="@intLoc["test-result-artifact-pattern-helper-text"]" />
                            </Field>

                            <Field>
                                <FieldHeader>@intLoc["coverage-report-artifact-pattern"]</FieldHeader>
                                <MudTextField InputType="InputType.Text"
                                Value="Integration.CoverageReportArtifactsPattern"
                                T="string"
                                ValueChanged="CoverageReportArtifactsPatternChanged"
                                HelperText="@intLoc["coverage-report-artifact-pattern-helper-text"]" />
                            </Field>
                        }
                        else
                        {
                            <MudText>@intLoc["read-pipeline-artifacts-is-not-enabled"]</MudText>
                        }
                    }
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
}

@code {
    [Parameter] public EventCallback<ExternalSystem> IntegrationChanged { get; set; }
    [Parameter] public ExternalSystem? Integration { get; set; }
    [Parameter] public IExtension? Extension { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Name { get; set; }

    protected override void OnInitialized()
    {
        if (Extension is not null && Integration is not null)
        {
            Integration.SupportedCapabilities = Extension.SupportedCapabilities;
        }
    }

    private async Task ExternalProjectIdChanged(string externalProjectId)
    {
        if (Integration is not null)
        {
            Integration.ExternalProjectId = externalProjectId;
            if (Extension is not null)
            {
                Integration.SupportedCapabilities = Extension.SupportedCapabilities;
            }
            await OnChangedAsync();
        }
    }
        private async Task NameChanged(string name)
    {
        if (Integration is not null)
        {
            Integration.Name = name;
            await OnChangedAsync();
        }
    }
    private async Task BaseUrlChanged(string baseUrl)
    {
        if (Integration is not null)
        {
            Integration.BaseUrl = baseUrl;
            await OnChangedAsync();
        }
    }
    private async Task ApiKeyChanged(string apiKey)
    {
        if (Integration is not null)
        {
            Integration.ApiKey = apiKey;
            await OnChangedAsync();
        }
    }

    private async Task OnClientIdChanged(string clientId)
    {
        if (Integration is not null)
        {
            Integration.ClientId = clientId;
            await OnChangedAsync();
        }
    }
    private async Task OnClientSecretChanged(string clientSecret)
    {
        if (Integration is not null)
        {
            Integration.ClientSecret = clientSecret;
            await OnChangedAsync();
        }
    }
    private async Task OnScopeChanged(string scope)
    {
        if (Integration is not null)
        {
            Integration.Scope = scope;
            await OnChangedAsync();
        }
    }

    private async Task AccessTokenChanged(string accessToken)
    {
        if (Integration is not null)
        {
            Integration.AccessToken = accessToken;
            await OnChangedAsync();
        }
    }
    private async Task TestResultsArtifactsPatternChanged(string pattern)
    {
        if (Integration is not null)
        {
            Integration.TestResultsArtifactsPattern = pattern;
            await OnChangedAsync();
        }
    }
    private async Task CoverageReportArtifactsPatternChanged(string pattern)
    {
        if (Integration is not null)
        {
            Integration.CoverageReportArtifactsPattern = pattern;
            await OnChangedAsync();
        }
    }
    private async Task EnabledChanged(bool value)
    {
        if (Integration is not null)
        {
            Integration.Enabled = value;
            await OnChangedAsync();
        }
    }
    private async Task OnDisabledAsync(ExternalSystemCapability capability)
    {
        if (Integration is not null)
        {
            Integration.EnabledCapabilities &= ~capability;
            await OnChangedAsync();
        }
    }

    private async Task OnEnabledAsync(ExternalSystemCapability capability)
    {
        if (Integration is not null)
        {
            Integration.EnabledCapabilities |= capability;
            await OnChangedAsync();
        }
    }

    private async Task OnChangedAsync()
    {
        await IntegrationChanged.InvokeAsync(Integration);
    }
    
}
