@using Humanizer
@using TestBucket.Components.Environments.Controls
@using TestBucket.Components.Shared
@using TestBucket.Components.Shared.Splitter
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Testing.Compiler
@inject FieldController fieldService
@inject TestCaseEditorController testCaseEditorController
@inject NavigationManager navigationManager
@inject TestRunCreationController testRunCreation
@inject AppNavigationManager appNavigationManager
@inject ITestCompiler compiler
@inject ISnackbar snackbar

@if(Test is not null)
{
    <div class="container-fill-2-rows">
        <MudToolBar Class="tb-toolbar">

            @if (!_preview && _editor is not null)
            {
                <MudTextField Variant="Variant.Outlined" Label="Name" AdornmentColor="Color.Tertiary" Value="@Test.Name" ValueChanged="OnNameChanged" T="string" AutoFocus="true" />

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="Save Changes">
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveChangesAsync" Class="rounded-0" />
                </MudTooltip>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
            }
            else
            {
                @* <MudText Typo="Typo.h3" Style="color: #fff" Class="mr-3">@Test.Name</MudText> *@
                <PathNavigation Test="@Test"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <AuthorizeView Roles="ADMIN">
                    <Authorized>
                        <MudTooltip Text="Edit">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => BeginEdit()" Class="rounded-0" />
                        </MudTooltip>
                    </Authorized>
                </AuthorizeView>
            }

            <MudSpacer/>

            <MudText>@Test.Slug</MudText>

            <MudDivider DividerType="DividerType.Middle" Vertical />

            <MudTooltip Text="Run">
                <MudIconButton OnClick="RunTestAsync" Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="rounded-0" />
            </MudTooltip>

            <MudDivider DividerType="DividerType.Middle" Vertical />

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="async x => await DeleteTestCaseAsync()">Delete</MudMenuItem>
            </MudMenu>

        </MudToolBar>

        <Splitter Class="container-fill" Bordered="false" Dimension="80" EnableMargin="false" Color="Color.Default">
            <StartContent>
                <MudStack Class="pa-2" Style="width: 100%; height: 100%">

                    @if(_errors.Count > 0)
                    {
                        foreach(var error in _errors)
                        {
                            <MudStack Row>
                                <MudIcon Color="Color.Warning" Icon="@Icons.Material.Outlined.Warning"/>
                                <MudText>Line @error.Line</MudText>
                                <MudText>Column @error.Column</MudText>
                                <MudText>@error.Message</MudText>
                            </MudStack>
                        }
                    }

                    <MarkdownEditor ShowToolbar="false"
                                    MaxHeight="100%"
                                    MinHeight="100%"
                                    EnableRunCode="true"
                                    EnableCopyCodeToClipboard="true"
                                    Color="Color.Primary"
                                    AllowResize="false"
                                    @bind-Preview="_preview"
                                    Value="@Text"
                                    @ref=_editor
                                    RunCodeLanguages="http python"
                                    RunCode="OnRunCodeClickedAsync"
                                    ValueChanged="OnDescriptionChanged"
                                    SpellChecker="false">
                    </MarkdownEditor>

                </MudStack>
            </StartContent>
            <EndContent>
                <MudTabs Style="width: 100%">
                    <MudTabPanel Text="Metadata">
                        <MudStack Class="pa-2" Style="width: 100%">

                            <Field>
                                <FieldHeader>Created</FieldHeader>
                                @Test.Created.Humanize()
                            </Field>

                            <MudText>VARIABLES</MudText>
                            <EnvironmentVariableEditor Variables="@_testParameters" VariablesChanged="OnTestParametersChangedAsync" />

                            <FieldsEditor TestCase="@Test" />
                        </MudStack>
                    </MudTabPanel>

                    <MudTabPanel Text="Coverage">
                        <TestRequirementLinksTable TestCase="@Test" Project="@Project" Team="@Team"/>
                    </MudTabPanel>

                    <MudTabPanel Text="Attachments">
                        <MudStack Class="pa-2" Style="width: 100%">

                            <Field>
                                <FieldHeader>Attachments</FieldHeader>
                                <AttachmentGrid AllowUpload="true" TestCaseId="@Test.Id" Style="width: 100%"/>
                            </Field>
                        </MudStack>
                    </MudTabPanel>
                </MudTabs>
            </EndContent>
        </Splitter>

    </div>
}



