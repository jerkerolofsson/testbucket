@using TestBucket.Domain.Fields.Helpers
@inject IStringLocalizer<SharedStrings> loc
@inject AuthenticationStateProvider authenticationStateProvider

@if (Field?.FieldDefinition is not null)
{
    <MudStack Spacing="0">
        <Field Row="@Row">
            <MudTooltip Text="@Field.FieldDefinition.Description">
                <FieldHeader Icon="@Field.FieldDefinition.Icon">@Field.FieldDefinition.Name</FieldHeader>
            </MudTooltip>

            @if (Row && !Field.FieldDefinition.WriteOnly)
            {
                <MudSpacer/>
            }

            @if (Field.FieldDefinition.WriteOnly)
            {
                @if(_editingWriteOnlyField)
                {
                    @if(!_readOnly)
                    {
                        <MudSpacer />
                        <FieldValueEditor Field="@Field" FieldChanged="async (f) => await OnWriteOnlyFieldChangedAsync(f)" />
                    }
                }
                else
                {
                    <MudStack Row Style="width: 100%">
                        <MudSpacer />

                        <MudText>••••</MudText>

                        @if(!_readOnly)
                        {
                            <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="EditField">@loc["change"]</MudButton>
                        }
                    </MudStack>
                }
            }
            else if (Field.FieldDefinition.ReadOnly || _readOnly)
            {
                <FieldReadOnlyValue Field="@Field" />
            }
            else
            {
                <FieldValueEditor 
                AllowMultiSelection="@AllowMultiSelection" 
                Field="@Field" 
                FieldChanged="async (f) => await FieldChanged.InvokeAsync(f)" />
            }

        </Field>

        @if (Field.FieldDefinition.ShowDescription)
        {
            <FieldDescription>@Field.FieldDefinition.Description</FieldDescription>
        }
    </MudStack>
}

@code {
    [Parameter] public FieldValue? Field { get; set; }
    [Parameter] public EventCallback<FieldValue?> FieldChanged { get; set; }
    [Parameter] public bool AllowMultiSelection { get; set; } = true;
    [Parameter] public bool ReadOnly { get; set; }

    private bool _readOnly = false;

    private bool Row => Field?.FieldDefinition?.Type == FieldType.Boolean ||
                Field?.FieldDefinition?.Type == FieldType.String || 
                Field?.FieldDefinition?.Type == FieldType.DateOnly || 
                Field?.FieldDefinition?.Type == FieldType.DateTimeOffset ||
                Field?.FieldDefinition?.Type == FieldType.SingleSelection || 
                Field?.FieldDefinition?.Type == FieldType.MultiSelection || 
                Field?.FieldDefinition?.Type == FieldType.Integer ||
                Field?.FieldDefinition?.Type == FieldType.ImageUri ||
                Field?.FieldDefinition?.Type == FieldType.Double ||
                Field?.FieldDefinition?.Type == FieldType.TimeSpan ||
                Field?.FieldDefinition?.WriteOnly == true;

    private bool _editingWriteOnlyField = false;

    private void EditField()
    {
        if(Field is not null)
        {
            Field.DoubleValue = null;
            Field.StringValuesList = [];
            Field.StringValue = null;
            Field.BooleanValue = null;
            Field.LongValue = null;
        }
        _editingWriteOnlyField = true;
    }

    private async Task OnWriteOnlyFieldChangedAsync(FieldValue field)
    {
        _editingWriteOnlyField = false;
        await FieldChanged.InvokeAsync(field);
    }

    protected override async Task OnParametersSetAsync()
    {
        _readOnly = ReadOnly;
        if(Field?.FieldDefinition is not null)
        {
            var state = await authenticationStateProvider.GetAuthenticationStateAsync();
            var principal = state.User;

            bool hasAccess = principal.HasPermission(Field.FieldDefinition);
            if(!hasAccess)
            {
                _readOnly = true;
            }
        }

        if (Field?.FieldDefinition is not null)
        {
            Field.StringValuesList ??= [];
        }
    }
}
