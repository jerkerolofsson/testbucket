<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add-custom-field" xml:space="preserve">
    <value>Add custom field</value>
  </data>
  <data name="add-new-field" xml:space="preserve">
    <value>Add new field</value>
  </data>
  <data name="advanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="appearance" xml:space="preserve">
    <value>Appearance</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>Bug</value>
    <comment>Label type</comment>
  </data>
  <data name="data-source" xml:space="preserve">
    <value>Data Source</value>
  </data>
  <data name="data-source-type-commits" xml:space="preserve">
    <value>Commits</value>
  </data>
  <data name="data-source-type-components" xml:space="preserve">
    <value>Components</value>
  </data>
  <data name="data-source-type-external" xml:space="preserve">
    <value>Fetch data from external service</value>
  </data>
  <data name="data-source-type-features" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="data-source-type-issues" xml:space="preserve">
    <value>Issues</value>
  </data>
  <data name="data-source-type-labels" xml:space="preserve">
    <value>Labels</value>
  </data>
  <data name="data-source-type-layers" xml:space="preserve">
    <value>Layers</value>
  </data>
  <data name="data-source-type-list" xml:space="preserve">
    <value>User defined list</value>
  </data>
  <data name="data-source-type-milestones" xml:space="preserve">
    <value>Milestones</value>
  </data>
  <data name="data-source-type-releases" xml:space="preserve">
    <value>Releases</value>
  </data>
  <data name="data-source-type-requirements" xml:space="preserve">
    <value>Requirements</value>
  </data>
  <data name="data-source-type-systems" xml:space="preserve">
    <value>Systems</value>
  </data>
  <data name="data-source-type-testcases" xml:space="preserve">
    <value>Test Cases</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="description-helpertext" xml:space="preserve">
    <value>A helpful description that may be shown to the user</value>
  </data>
  <data name="documentation" xml:space="preserve">
    <value>Documentation</value>
    <comment>Label type</comment>
  </data>
  <data name="duplicate" xml:space="preserve">
    <value>Duplicate</value>
    <comment>Label type</comment>
  </data>
  <data name="enhancement" xml:space="preserve">
    <value>Enhancement</value>
    <comment>Label type</comment>
  </data>
  <data name="field-data-source-not-available" xml:space="preserve">
    <value>Data source is not available for this type of input</value>
  </data>
  <data name="field-icon" xml:space="preserve">
    <value>Field Icon</value>
  </data>
  <data name="field-options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="field-readonly" xml:space="preserve">
    <value>Read-Only</value>
  </data>
  <data name="field-required-permission" xml:space="preserve">
    <value>Required permission to edit</value>
  </data>
  <data name="field-target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="field-target-helpertext" xml:space="preserve">
    <value>Defines the types of entities that can be have this field</value>
  </data>
  <data name="field-type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="good first issue" xml:space="preserve">
    <value>Good first issue</value>
    <comment>Label type</comment>
  </data>
  <data name="help wanted" xml:space="preserve">
    <value>Help wanted</value>
    <comment>Label type</comment>
  </data>
  <data name="icons" xml:space="preserve">
    <value>Icons</value>
  </data>
  <data name="inherit" xml:space="preserve">
    <value>Inherit</value>
  </data>
  <data name="inherit-helpertext" xml:space="preserve">
    <value>If enabled, entities will inherit the value from a parent entity. For example a test case could inherit the value from a folder which inherits the value from a test suite, or an executed test case will inherit the value from the test case.</value>
  </data>
  <data name="inherited" xml:space="preserve">
    <value>Inherited</value>
  </data>
  <data name="input-type" xml:space="preserve">
    <value>Input Type</value>
  </data>
  <data name="input-type-helpertext" xml:space="preserve">
    <value>The type of input UI control that will be shown to the user to enter a value for the field</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="name-helpertext" xml:space="preserve">
    <value>Unique name for the custom field</value>
  </data>
  <data name="options" xml:space="preserve">
    <value>Input Options</value>
  </data>
  <data name="options-helpertext" xml:space="preserve">
    <value>Options that the user can choose from for this field</value>
  </data>
  <data name="preview" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>Question</value>
    <comment>Label type</comment>
  </data>
  <data name="show-description" xml:space="preserve">
    <value>Show Description</value>
  </data>
  <data name="trait" xml:space="preserve">
    <value>Field Trait Mapping</value>
  </data>
  <data name="trait-helpertext" xml:space="preserve">
    <value>Well-defined trait that this field maps to. The trait is used to map import/export fields between various formats and can be used for reporting and analytics</value>
  </data>
  <data name="trait-match-known-type" xml:space="preserve">
    <value>This trait matches a well known type</value>
  </data>
  <data name="use-classifier" xml:space="preserve">
    <value>AI Classification</value>
  </data>
  <data name="use-classifier-helpertext" xml:space="preserve">
    <value>Uses AI to update this field, if it is empty after changes has been made.</value>
  </data>
  <data name="use-predefined-field" xml:space="preserve">
    <value>Use a predefined field</value>
  </data>
  <data name="visible" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="wontfix" xml:space="preserve">
    <value>Won't Fix</value>
    <comment>Label type</comment>
  </data>
</root>