@attribute [Authorize()]
@using MudBlazor.Utilities
@using TestBucket.Components.Issues.Layouts
@using TestBucket.Components.Reporting.Controllers
@using TestBucket.Components.Shared.Themeing.Models
@using TestBucket.Contracts.Appearance
@using TestBucket.Contracts.Insights
@using TestBucket.Contracts.Issues.States
@using TestBucket.Domain
@using TestBucket.Domain.Appearance
@using TestBucket.Domain.Commands
@using TestBucket.Domain.ExtensionManagement
@using TestBucket.Domain.Insights.Model
@using TestBucket.Domain.Issues.Insights
@using TestBucket.Domain.Issues.Models
@using TestBucket.Domain.Issues.Search
@using TestBucket.Domain.Testing.TestCases.Insights
@using TestBucket.Domain.Testing.TestRuns.Insights
@inject AppNavigationManager appNavigationManager
@inject InsightsController controller
@inject IExtensionManager extensionManager
@inject ICommandManager commandManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc
@inject IStringLocalizer<InsightStrings> insightLoc
@inject DashboardController controller

<div class="@ContainerCssClass">

    @if(_dashboard is not null)
    {
        @if(!ReadOnly)
        {
            <MudStack Style="width: 100%" Row AlignItems="AlignItems.Center" Class="top-bar">
				<MudTextField T="string" Value="_dashboard.Name" Variant="Variant.Outlined" ShrinkLabel Label="@insightLoc["dashboard-name"]" />
                <MudSpacer/>
				<MudSwitchM3 @bind-Value="@EnableMove" Color="Color.Tertiary">@insightLoc["rearrange"]</MudSwitchM3>
                <MudIconButton Color="Color.Error" data-testid="delete-dashboard" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteDashboardAsync" />
			</MudStack>

			<div class="@CssClass">
				@if (_dashboard.Specifications is not null)
				{
					@foreach (var data in _dashboard.Specifications)
					{
						<div class="dash-cell" style="@GetSpecCssStyle(data)">
							<Draggable Data="@data" Enabled="@EnableMove">
								<DropZone T="InsightsVisualizationSpecification" OnDrop="(droppedData) => OnDropRearrange(data, droppedData)">
									<InsightsChart State="State" Project="Project" ReadOnly="@(ReadOnly || EnableMove)" UserQuery="@_query" Spec="@data"
													Delete="OnDeleteAsync"
													SpecChanged="OnSpecChangedAsync" />
								</DropZone>
							</Draggable>
						</div>
					}

					<div class="dash-cell cell-add">
						<MudPaper Elevation="2" Class="tb-tile">
							<button @onclick="AddSpec" class="add" data-testid="add" style="font-size: 64pt; width: 100%; height: 100%">+</button>
						</MudPaper>
					</div>
				}
			</div>
		}
		else
		{
			<div class="tb-insights-dashboard read-only">
				@if (_dashboard.Specifications is not null)
				{
					@foreach (var data in _dashboard.Specifications)
					{
						<div class="dash-cell" style="@GetSpecCssStyle(data)">
							<InsightsChart State="State" Project="Project" ReadOnly="@ReadOnly" UserQuery="@_query" Spec="@data"/>
						</div>
					}
				}
			</div>
		}
    }
</div>

@code {
	[Parameter] public bool ReadOnly { get; set; } = true;
	[Parameter] public bool EnableMove { get; set; } = false;
	[Parameter] public string? DashboardName { get; set; }
	[Parameter] public long? DashboardId { get; set; }
	[Parameter] public string Query { get; set; } = "";
	[CascadingParameter] public TestProject Project { get; set; } = default!;
	[CascadingParameter] public ApplicationState? State { get; set; }
	[CascadingParameter] public Team? Team { get; set; }

	private string CssClass => new CssBuilder("tb-insights-dashboard")
		.AddClass("enable-move", EnableMove)
		.Build();


	private async Task OnDropRearrange(InsightsVisualizationSpecification? target, InsightsVisualizationSpecification? data)
	{
		if(target is null || data is null || this._dashboard?.Specifications is null)
		{
			return;
		}
		if(data == target)
		{
			return;
		}

		var indexTarget = this._dashboard.Specifications.IndexOf(target);
		var indexData = this._dashboard.Specifications.IndexOf(data);
		if(indexTarget != indexData)
		{
			this._dashboard.Specifications.Remove(data);
			this._dashboard.Specifications.Insert(indexTarget, data);
			// if (indexTarget < indexData)
			// {
			// }
			// else
			// {
			// 	this._dashboard.Specifications.Insert(indexTarget, data);
			// }
			await controller.UpdateDashboardAsync(_dashboard);
		}
	}

    private string GetSpecCssStyle(InsightsVisualizationSpecification spec)
    {
        if (spec is null)
        {
            return "";
        }
        return $"grid-column: auto/span {spec.Columns}; grid-row: auto/span {spec.Rows}";
    }
    private string ContainerCssClass => new MudBlazor.Utilities.CssBuilder("tb-insights-dashboard-container")
        .AddClass("read-only", ReadOnly)
        .Build();

    [Parameter] public EventCallback<Dashboard> Deleted { get; set; }
    private string _query = "";
    private Dashboard? _dashboard;

    private async Task AddSpec()
    {
        if (_dashboard is not null)
        {
            _dashboard.Specifications ??= [];
            _dashboard.Specifications.Add(new InsightsVisualizationSpecification()
            {
                Name = "New Insight"
            });
            await controller.UpdateDashboardAsync(_dashboard);
        }
    }

    private async Task DeleteDashboardAsync()
    {
        if (_dashboard is not null)
        {
            var deleted = await controller.DeleteDashboardAsync(_dashboard);
            if(deleted)
            {
                await Deleted.InvokeAsync(_dashboard);
            }
        }
    }
    private async Task OnDeleteAsync(InsightsVisualizationSpecification spec)
    {
        if (spec is not null && _dashboard is not null)
        {
            _dashboard.Specifications ??= [];
            _dashboard.Specifications.Remove(spec);
            await controller.UpdateDashboardAsync(_dashboard);
        }
    }
    private async Task OnSpecChangedAsync(InsightsVisualizationSpecification? spec)
    {
        if(spec is not null && _dashboard is not null)
        {
            await controller.UpdateDashboardAsync(_dashboard);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        bool update = false;
        if(_query != Query && Query is not null)
        {
            update = true;
        }
        if (DashboardId is not null && DashboardId != _dashboard?.Id)
        {
            update = true;
        }
        if (DashboardName is not null && DashboardName != _dashboard?.Name)
        {
            update = true;
        }
        if(update)
        {
            _query = Query??"";

            if (DashboardId is not null)
            {
                _dashboard = await controller.GetDashboardByIdAsync(DashboardId.Value);
            }
            else if (DashboardName is not null)
            {
                _dashboard = await controller.GetDashboardByNameAsync(Project.Id, DashboardName);
            }

            if (_dashboard is not null)
            {
                _dashboard.TestProjectId = Project.Id;
            }
            this.StateHasChanged();
        }
    }

}
