@using TestBucket.Components.Requirements.Services
@using TestBucket.Domain.Requirements.Models
@inject RequirementBrowser browser
@inject TestCaseEditorController editor

<MudDataGrid Items="_links"
Dense="true"
Hover="true"
T="RequirementTestLink"
SortMode="SortMode.Single">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
            <MudText>Requirement Coverage</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddRequirementLinkAsync"></MudIconButton>
        </MudStack>
    </ToolBarContent>

    <Columns>
        <TemplateColumn Title="">
            <CellTemplate>
                @{
                    string url = $"{context.Item.Requirement!.TenantId}/Requirements/Requirements/{context.Item.RequirementId}";
                }
                <MudLink Href="@url">@context.Item.Requirement!.Name</MudLink>
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn CellStyle="width: 1%">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="async () => await DeleteLinkAsync(context.Item)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>

</MudDataGrid>

@code {
    [Parameter] public TestCase? TestCase { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }

    private RequirementTestLink[] _links = [];

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (TestCase is not null)
        {
            _links = await browser.GetLinksForTestAsync(TestCase);
        }
    }

    public async Task AddRequirementLinkAsync()
    {
        if(TestCase is null)
        {
            return;
        }
        await editor.LinkTestCaseToRequirementAsync(TestCase, Project, Team);
        await LoadDataAsync();
    }

    private async Task DeleteLinkAsync(RequirementTestLink link)
    {
        await browser.DeleteRequirementLinkAsync(link);
        await LoadDataAsync();
    }
}
