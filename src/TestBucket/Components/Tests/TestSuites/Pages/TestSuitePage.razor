@attribute [Authorize()]
@page "/{TenantId}/Testing/TestSuites/{SuiteId:long}"
@using TestBucket.Components.Tests.Metrics.TestCases
@using TestBucket.Components.Tests.TestRuns.Controllers
@using TestBucket.Domain
@using TestBucket.Domain.Commands
@layout TestingLayout
@inject TestBrowser testBrowser
@inject TestSuiteService controller
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc
@inject TestRunCreationController testRunCreationController
@inject FieldController fieldController 

<div class="container-fill-2-rows">
    <MudToolBar Class="tb-toolbar">
        @_testSuite?.Name
    </MudToolBar>

    <Splitter Class="container-fill" Bordered="false" Dimension="80" EnableMargin="false" Color="Color.Tertiary">
        <StartContent>
             <article class="center">
                <MudStack>
                    <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Spacing="0">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="@TbIcons.BoldDuoTone.Box" Size="Size.Large" />
                            <MudText Typo="Typo.h2">@_testSuite?.Name</MudText>
                        </MudStack>
                        <MudSpacer/>
                        <MudTooltip Text="@loc["attachments"]">
                            <MudIconButton Icon="@Icons.Material.Filled.AttachFile"  Href="@appNavigationManager.GetTestSuiteAttachmentsUrl()"/>
                        </MudTooltip>
                        <MudTooltip Text="@loc["variables"]">
                            <MudIconButton Icon="@Icons.Material.Filled.Abc" Href="@appNavigationManager.GetTestSuiteVariablesUrl()"/>
                        </MudTooltip>
                        <MudTooltip Text="@loc["settings"]">
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Href="@appNavigationManager.GetTestSuiteSettingsUrl()"/>
                        </MudTooltip>
                        <MudButton OnClick="RunSuiteAsync" Color="Color.Primary" Variant="Variant.Filled">@loc["run"]</MudButton>
                    </MudStack>
                    @if(_testSuite is not null)
                    {
                        <TestCaseGrid Query="_query" QueryChanged="OnQueryChanged"
                        Project="@Project" TestSuiteId="@SuiteId" CompareFolder="true" OnTestCaseClicked="OnTestCaseClicked" OnTestSuiteFolderClicked="OnFolderClicked"/>

                        <BasicMarkdownEditor ToolbarTitle="@loc["readme"]" Text="@_testSuite.Description" TextChanged="OnDescriptionChanged"/>
                    }
                </MudStack>
            </article>
        </StartContent>
        <EndContent>

        </EndContent>
    </Splitter>
</div>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    [Parameter] public long SuiteId { get; set; }

    private TestSuite? _testSuite = null;
    private SearchTestQuery _query = new();
    private SearchTestQuery _querySuite = new();
    private IReadOnlyList<FieldDefinition> _testCaseFields = [];
    private FieldDefinition? _fieldCategory;
    private FieldDefinition? _fieldFeature;

    private async Task RunSuiteAsync()
    {
        if(_testSuite is null)
        {
            return;
        }
        await testRunCreationController.CreateTestRunAsync(_testSuite);
    }


    /// <summary>
    /// Load the test suite when changed
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        if (_testSuite is null || _testSuite.Id != SuiteId)
        {
            _testSuite = await testBrowser.GetTestSuiteByIdAsync(SuiteId);
            if (_testSuite?.TestProjectId is not null)
            {
                _testCaseFields = await fieldController.GetDefinitionsAsync(_testSuite.TestProjectId.Value, Contracts.Fields.FieldTarget.TestCase);
                _fieldCategory = _testCaseFields.Where(x => x.TraitType == TraitType.TestCategory).FirstOrDefault();
                _fieldFeature = _testCaseFields.Where(x => x.TraitType == TraitType.Feature).FirstOrDefault();
            }
            appNavigationManager.State.SelectedTestSuite = _testSuite;
            OnQueryChanged(null);
        }
    }

    private void OnQueryChanged(SearchTestQuery? query)
    {
        if(query is null)
        {
            _query = new();
            _query.ProjectId = _testSuite?.TestProjectId;
            _query.CompareFolder = true;
            _query.TestSuiteId = _testSuite?.Id;
        }
        else
        {
            _query = query;
        }

        _querySuite = new()
        {
            CreatedFrom = _query.CreatedFrom,
            CreatedUntil = _query.CreatedUntil,
            CompareFolder = false,
            TestSuiteId = _testSuite?.Id,
            Fields = _query.Fields.ToList()
        };
    }

    private async Task OnDescriptionChanged(string description)
    {
        if (_testSuite is null)
        {
            return;
        }
        _testSuite.Description = description;
        await controller.SaveTestSuiteAsync(_testSuite);
    }

    private async Task OnTestSuiteChanged(TestSuite testSuite)
    {
        _testSuite = testSuite;
        await controller.SaveTestSuiteAsync(_testSuite);
    }

    private void OnFolderClicked(TestSuiteFolder folder)
    {
        appNavigationManager.NavigateTo(folder);
    }

    private void OnTestCaseClicked(TestCase testCase)
    {
        appNavigationManager.NavigateTo(testCase);
    }
}
