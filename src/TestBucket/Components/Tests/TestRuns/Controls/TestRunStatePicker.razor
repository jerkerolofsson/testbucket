@using TestBucket.Contracts.Testing.Models
@using TestBucket.Contracts.Testing.States
@using TestBucket.Domain.States
@inject ProjectController controller
@inject IStringLocalizer<StateStrings> loc

<Field Row>
    <FieldHeader>@loc["state"]</FieldHeader>
    <MudSpacer/>
    <MudSelect Variant="Variant.Outlined" T="TestState" Value="@State" ValueChanged="OnStateChanged">
        @foreach(var state in _states)
        {
            <MudSelectItem Value="@state">
                @if(state.MappedState == MappedTestState.Other)
                {
                    @state.Name
                }
                else
                {
                    var name = state.MappedState.ToString().ToLower();
                    @loc[name]
                }
            </MudSelectItem>
        }
    </MudSelect>
</Field>

@code {
    [Parameter] public long TestProjectId { get; set; }
    [Parameter] public TestState? State { get; set; }
    [Parameter] public EventCallback<TestState?> StateChanged { get; set; }

    private IReadOnlyList<TestState> _states = [];

    protected override async Task OnInitializedAsync()
    {
        _states = await controller.GetTestCaseRunStatesAsync(TestProjectId);
    }

    private async Task OnStateChanged(TestState? state)
    {
        await StateChanged.InvokeAsync(state);
    }
}
