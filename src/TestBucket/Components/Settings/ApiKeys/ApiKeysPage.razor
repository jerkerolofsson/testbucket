@attribute [Authorize()]
@page "/{TenantId}/Settings/ManageApiKeys"
@using Humanizer
@using TestBucket.Domain.Settings
@layout SettingsLayout
@inject UserApiKeysController controller
@inject  IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<SecurityStrings> securityLoc

<MudStack Class="container-settings-page">

    <MudDataGrid Items="_keys"
                 Dense="true"
                 Hover="true"
                 T="ApplicationUserApiKey"
                 SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudIcon Icon="@Icons.Material.Filled.Security" Size="Size.Large" />
                <MudText Typo="Typo.h2">@loc["api-keys"]</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddApiKeyAsync"></MudIconButton>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.Name" Title="@securityLoc["access-token-name"]" />
            <TemplateColumn Title="@securityLoc["expires"]">
                <CellTemplate>
                    @context.Item.Expiry.Humanize()
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="ApplicationUserApiKey" />
        </PagerContent>
    </MudDataGrid>

    
    @if(_newApiKey is not null)
    {
        <MudPaper Class="pa-2 mt-2">
            <MudStack Spacing="1">
                <MudText Typo="Typo.h2">@securityLoc["token-created"]</MudText>
                <MudTextField ReadOnly Value="@_newApiKey.Key"/>
                <MudText Typo="Typo.body1">@securityLoc["access-token-created-message"]</MudText>
            </MudStack>
        </MudPaper>
    }
</MudStack>


@code {
    private ApplicationUserApiKey[] _keys = [];
    private ApplicationUserApiKey? _newApiKey = null;

    [Parameter] public string? TenantId { get; set; }

    private async Task AddApiKeyAsync() 
    {
        _newApiKey = await controller.AddApiKeyAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _keys = await controller.GetApiKeysAsync();
    }
}
