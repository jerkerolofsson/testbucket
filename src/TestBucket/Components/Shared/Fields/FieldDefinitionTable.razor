@using System.Diagnostics
@using TestBucket.Components.Shared.Fields.Dialogs
@using TestBucket.Contracts.Fields
@using TestBucket.Domain
@using TestBucket.Domain.Fields.Models
@inject FieldController fieldController
@inject IDialogService dialogService
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<FieldStrings> fieldLoc

<MudDataGrid    
    Items="_fields"
    Dense
    Hover
    RowClass="tb-datarow cursor-pointer"
    T="FieldDefinition"
    RowClick="async e => await EditFieldAsync(e.Item)"
    SortMode="SortMode.Single">

    <ToolBarContent>
        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
            <MudIcon Icon="@TbIcons.BoldDuoTone.Field" Size="Size.Large" Color="Color.Tertiary" />
            <MudText Typo="Typo.h2">@loc["fields"]</MudText>
            <MudSpacer />

            <MudStack Spacing="1" Row>
                <TbNavLink Selected="@(FilterTarget == FilterAll)" OnClick="() => SetFilterTarget(FilterAll)">@loc["all"]</TbNavLink>
                <TbNavLink Selected="@(FilterTarget == FilterRequirements)" OnClick="() => SetFilterTarget(FilterRequirements)">@loc["requirements"]</TbNavLink>
                <TbNavLink Selected="@(FilterTarget == FilterTest)" OnClick="() => SetFilterTarget(FilterTest)">@loc["testing"]</TbNavLink>
                <TbNavLink Selected="@(FilterTarget == FilterIssue)" OnClick="() => SetFilterTarget(FilterIssue)">@loc["issues"]</TbNavLink>
            </MudStack>

            <PermissionView Entity="PermissionEntityType.Project" Level="PermissionLevel.Write">
                <Authorized>
                    <MudButton data-testid="add-milestone"
                               Class="tb-button-new"
                               StartIcon="@Icons.Material.Filled.Add" OnClick="AddFieldAsync">@loc["add"]</MudButton>

                </Authorized>
            </PermissionView>
        </MudStack>
    </ToolBarContent>

    <ColGroup>
        <col style="width: 30%;" />
        <col style="width: 5%;" />
        <col style="width: 20%;"/>
        <col style="width: 40%;" />
        <col style="width: 5%;" />
    </ColGroup>

    <Columns>
        <TemplateColumn Title="@loc["name"]" Sortable="true" SortBy="x => x.Name">
            <CellTemplate>
                <MudStack Row AlignItems="AlignItems.Center">
                    @if (context.Item.Icon is not null)
                    {
                        <MudIcon Icon="@context.Item.Icon" />
                    }
                    else
                    {
                        <MudIcon Icon="@TbIcons.BoldDuoTone.Field" />
                    }
                    @context.Item.Name
                </MudStack>
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="@fieldLoc["inherited"]" Sortable="true" SortBy="x => x.Inherit">
            <CellTemplate>
                @if(context.Item.Inherit)
                {
                    <MudTooltip Text="@loc["inherited"]">
                        <MudText Color="Color.Success">●</MudText>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="@loc["not-inherited"]">
                        <MudText Color="Color.Error">●</MudText>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="@fieldLoc["field-target"]">
            <CellTemplate>
                @string.Join(", ", context.Item.Target)
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="@fieldLoc["field-options"]">
            <CellTemplate>
                @if(context.Item.Options is not null)
                {
                    @string.Join(", ", context.Item.Options)
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn>
            <CellTemplate>
                @if(!context.Item.IsDefinedBySystem)
                {
                    <PermissionView Entity="PermissionEntityType.Project" Level="PermissionLevel.Write">
                        <Authorized>
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Clear" OnClick="async () => await DeleteAsync(context.Item)" />
                        </Authorized>
                    </PermissionView>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="FieldDefinition" />
    </PagerContent>
</MudDataGrid>


@code {
    [Parameter] public long? ProjectId { get; set; }
    private long? _projectId;

    private IReadOnlyList<FieldDefinition> _fields = [];
    private IReadOnlyList<FieldDefinition> _allFields = [];

    private FieldTarget FilterRequirements = FieldTarget.Requirement | FieldTarget.RequirementSpecificationFolder | FieldTarget.RequirementSpecification;
    private FieldTarget FilterTest = FieldTarget.TestSuite | FieldTarget.TestSuiteFolder | FieldTarget.TestCase | FieldTarget.TestRun | FieldTarget.TestCaseRun;
    private FieldTarget FilterIssue = FieldTarget.Issue;
    private FieldTarget FilterAll => FilterTest | FilterRequirements | FilterIssue;

    private FieldTarget FilterTarget { get; set; }

    private async Task EditFieldAsync(FieldDefinition fieldDefinition)
    {
        var parameters = new DialogParameters<EditFieldDefinitionDialog>
        {
            { x=>x.FieldDefinition, fieldDefinition }
        };
        var dialog = await dialogService.ShowAsync<EditFieldDefinitionDialog>(null, parameters);
        var result = await dialog.Result;
        await ReloadFieldsAsync();
    }

    private async Task DeleteAsync(FieldDefinition definition)
    {
        await fieldController.DeleteAsync(definition);
        await ReloadFieldsAsync();
    }


    private async Task AddFieldAsync()
    {
        if(ProjectId is null)
        {
            return;
        }

        FieldDefinition definition = new()
            {
                IsVisible = true,
                Name = "Priority",
                Options = ["Low", "Medium", "High"],
                TestProjectId = ProjectId,
                Type = Domain.Fields.Models.FieldType.String
            };

        var parameters = new DialogParameters<AddFieldDefinitionDialog>
        {
            { x=>x.FieldDefinition, definition }
        };
        var dialog = await dialogService.ShowAsync<AddFieldDefinitionDialog>(null, parameters);
        var result = await dialog.Result;
        await ReloadFieldsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        FilterTarget = FilterAll;
        await LoadAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }


    private async Task LoadAsync()
    {
        if (_projectId != ProjectId)
        {
            _projectId = ProjectId;
            await ReloadFieldsAsync();
        }
    }

    private async Task ReloadFieldsAsync()
    {
        if (ProjectId is not null)
        {
            var start = Stopwatch.GetTimestamp();
            FieldTarget? target = null;
            _allFields = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery() { ProjectId = ProjectId, Target = target });
            _fields = _allFields.ToList();
            _loadTime = Stopwatch.GetElapsedTime(start);

            foreach(var field in _allFields)
            {
                if(field.TestProjectId is null)
                {
                    field.TestProjectId = ProjectId.Value;
                    await fieldController.UpdateAsync(field);   
                }
            }
        }
    }
    private TimeSpan _loadTime = TimeSpan.Zero;

    private void SetFilterTarget(FieldTarget target)
    {
        FilterTarget = target;
        var fields = new List<FieldDefinition>();
        foreach(var field in _allFields)
        {
            if ((field.Target&target) > 0)
            {
                fields.Add(field);
            }
        }
        _fields = fields;
    }
}
