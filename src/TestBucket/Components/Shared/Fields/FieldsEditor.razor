@using TestBucket.Contracts.Fields
@using TestBucket.Domain.Requirements.Models
@inject FieldController fieldController

@foreach (var field in _testCaseFields.Where(x => x.FieldDefinition != null && x.FieldDefinition.IsVisible))
{
    <FieldEditor AllowMultiSelection="@AllowMultiSelection" Field="@field" FieldChanged="OnTestCaseFieldChangedAsync" />
}
@foreach (var field in _testRunFields.Where(x => x.FieldDefinition != null && x.FieldDefinition.IsVisible))
{
    <FieldEditor AllowMultiSelection="@AllowMultiSelection" Field="@field" FieldChanged="OnTestRunFieldChangedAsync" />
}
@foreach (var field in _testCaseRunFields.Where(x => x.FieldDefinition != null && x.FieldDefinition.IsVisible))
{
    <FieldEditor AllowMultiSelection="@AllowMultiSelection" Field="@field" FieldChanged="OnTestCaseRunFieldChangedAsync" />
}
@foreach (var field in Fields.Where(x => x.FieldDefinition != null && x.FieldDefinition.IsVisible))
{
    <FieldEditor AllowMultiSelection="@AllowMultiSelection" Field="@field" FieldChanged="async(f) => await FieldChanged.InvokeAsync(f)" />
}

@code {
    [Parameter] public Requirement? Requirement { get; set; }
    [Parameter] public TestCase? TestCase { get; set; }
    [Parameter] public TestRun? TestRun { get; set; }
    [Parameter] public TestCaseRun? TestCaseRun { get; set; }
    [Parameter] public bool AutoSaveChanges { get; set; } = true;
    [Parameter] public bool AllowMultiSelection { get; set; } = true;


    /// <summary>
    /// Manuall defined fields
    /// </summary>
    [Parameter] public IReadOnlyList<FieldValue> Fields { get; set; } = [];
    [Parameter] public EventCallback<FieldValue> FieldChanged { get; set; }

    public IReadOnlyList<TestCaseField> TestCaseFields => _testCaseFields;
    public IReadOnlyList<TestCaseRunField> TestCaseRunFields => _testCaseRunFields;
    public IReadOnlyList<TestRunField> TestRunFields => _testRunFields;
    public IReadOnlyList<RequirementField> RequirementFields => _requirementFields;


    private List<TestCaseField> _testCaseFields = [];
    private List<TestCaseRunField> _testCaseRunFields = [];
    private List<TestRunField> _testRunFields = [];
    private List<RequirementField> _requirementFields = [];

    private long? _testCaseId;
    private long? _testCaseRunId;
    private long? _testRunId;
    private long? _requirementId;
    private long? _testProjectId;

    private async Task LoadAsync()
    {
        if (Requirement is not null && (_testCaseId != Requirement.Id || _testProjectId != Requirement.TestProjectId))
        {
            _requirementId = Requirement.Id;
            _testProjectId = Requirement.TestProjectId;
            var definitions = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery { ProjectId = Requirement.TestProjectId, Target = FieldTarget.Requirement });
            _requirementFields = (await fieldController.GetRequirementFieldsAsync(Requirement.Id, definitions)).OrderBy(x => x.FieldDefinition!.Name).ToList();
        }
        if (TestCase is not null && (_testCaseId != TestCase.Id || _testProjectId != TestCase.TestProjectId))
        {
            _testCaseId = TestCase.Id;
            _testProjectId = TestCase.TestProjectId;
            var definitions = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery { ProjectId = TestCase.TestProjectId, Target = FieldTarget.TestCase });
            _testCaseFields = (await fieldController.GetTestCaseFieldsAsync(TestCase.Id, definitions)).OrderBy(x => x.FieldDefinition!.Name).ToList();
        }
        if (TestCaseRun is not null && (_testCaseRunId != TestCaseRun.Id || _testProjectId != TestCaseRun.TestProjectId))
        {
            _testCaseRunId = TestCaseRun.Id;
            _testProjectId = TestCaseRun.TestProjectId;
            var definitions = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery { ProjectId = TestCaseRun.TestProjectId, Target = FieldTarget.TestCaseRun });
            _testCaseRunFields = (await fieldController.GetTestCaseRunFieldsAsync(TestCaseRun.TestRunId, TestCaseRun.Id, definitions)).OrderBy(x=>x.FieldDefinition!.Name).ToList();
        }
        else if (TestRun is not null && (_testRunId != TestRun.Id || _testProjectId != TestRun.TestProjectId))
        {
            _testRunId = TestRun.Id;
            _testProjectId = TestRun.TestProjectId;
            var definitions = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery { ProjectId = TestRun.TestProjectId, Target = FieldTarget.TestRun });
            _testRunFields = (await fieldController.GetTestRunFieldsAsync(TestRun.Id, definitions)).OrderBy(x => x.FieldDefinition!.Name).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();

    }
    private async Task OnTestRunFieldChangedAsync()
    {
        if (_testRunFields.Count > 0 && AutoSaveChanges)
        {
            await fieldController.SaveTestRunFieldsAsync(_testRunFields);
        }
    }

    private async Task OnTestCaseRunFieldChangedAsync()
    {
        if(_testCaseRunFields.Count > 0 && AutoSaveChanges)
        {
           await fieldController.SaveTestCaseRunFieldsAsync(_testCaseRunFields);
        }
    }

    private async Task OnTestCaseFieldChangedAsync()
    {
        if (_testCaseFields.Count > 0 && AutoSaveChanges)
        {
            await fieldController.SaveTestCaseFieldsAsync(_testCaseFields);
        }
    }
}
