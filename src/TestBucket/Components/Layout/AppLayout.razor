@using TestBucket.Components.Shared.Commands
@using TestBucket.Components.Shared.Profile
@using TestBucket.Components.Shared.Themeing.Models
@using TestBucket.Domain

@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject TenantResolver tenantResolver
@inject AuthenticationStateProvider authStateProvider
@inject ProjectController projectService
@inject TestCaseEditorController testCaseEditor
@inject TeamController teamService
@inject TenantController tenantController
@inject ThemingService themingService
@inject AppNavigationManager appNavigationManager
@inject IUnifiedSearchManager unifiedSearchManager
@inject IStringLocalizer<SharedStrings> loc
@inject UserPreferencesService userPreferencesService

@if (tenantId is not null && _state is not null)
{
    string tenantAdminUrl = $"{tenantId}/tenants";
    string teamAdminUrl = $"{tenantId}/Settings/Teams";
    string projectAdminUrl = $"{tenantId}/Settings/ManageProjects";
    string projectSettingsUrl = $"{tenantId}/Settings/Projects/{_project?.Slug}";
    if (_project is null)
    {
        projectSettingsUrl = $"{tenantId}/Settings/Projects";
    }
    string homeUrl = $"/{tenantId}";
    string authUrl = $"/{tenantId}/Auth";
    string codeUrl = $"/{tenantId}/Code";
    string requirementsUrl = $"/{tenantId}/Requirements";
    string reportingUrl = $"/{tenantId}/Reporting";
    string issuesUrl = $"/{tenantId}/Issues";
    string testsUrl = $"/{tenantId}/Testing";
    string settingsUrl = $"/{tenantId}/Settings";
    string manageUrl = $"/{tenantId}/Account/Manage";
    string welcomeUrl = $"/{tenantId}/Welcome";
    string registerUrl = $"/{tenantId}/Account/Register";
    string loginUrl = $"/{tenantId}/Account/Login?returnUrl=/{tenantId}";

    <MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@_state.IsDarkMode" />
    <TbThemeProvider UserPreferencesChanged="OnUserPreferencesChanged" />
    <MudSnackbarProvider />
    <MudPopoverProvider />
    <MudDialogProvider MaxWidth="MaxWidth.ExtraLarge" />
    <ProgressStatus />
    <CommandBindings />

    <CascadingValue Value="@_userPreferences">
        <CascadingValue Value="@_tenant">
            <CascadingValue Value="@_project">
                <CascadingValue Value="@_team">
                    <CascadingValue Value="@_state">

                        <div style="display: grid; grid-template-rows: auto 1fr;" class="container-fill">

                            <MudToolBar Style="@MenuStyle" Class="@MenuClass" data-testid="main-toolbar">
                                <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">

                                    <ProjectBadgePicker Team="@_team" SelectedProject="@_project" SelectedProjectChanged="OnSelectedProjectChanged" />

                                    <TbNavLink Href="@codeUrl">@loc["code"]</TbNavLink>
                                    <TbNavLink Href="@requirementsUrl">@loc["requirements"]</TbNavLink>
                                    <TbNavLink Href="@testsUrl">@loc["testing"]</TbNavLink>
                                    <TbNavLink Href="@issuesUrl">@loc["issues"]</TbNavLink>
                                    <TbNavLink Href="@reportingUrl">@loc["reporting"]</TbNavLink>

                                    <MudSpacer/>

                                    <CommandPalette/>
                                    <UnifiedSearch/>

                                    <MudTooltip Text="@loc["menu-new-description"]">
                                    <MudMenu Icon="@Icons.Material.Filled.Add" AriaLabel="@loc["menu-new-description"]">
                                        <CommandMenuItems TypeNames="menu-new" Flatten/>
                                    </MudMenu>
                                    </MudTooltip>

                                    <DarkModeToggle IsDarkMode="@_state.IsDarkMode" IsDarkModeChanged="OnDarkModeChanged" />
                                    <SelfProfileImage/>

                                    @if(_prefTextToIcons)
                                    {
                                        <MudButton Color="Color.Primary" Href="@settingsUrl">@loc["settings"]</MudButton>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="@loc["settings"]">
                                            <MudIconButton aria-Label="@loc["settings"]" Icon="@TbIcons.BoldDuoTone.Settings" Href="@settingsUrl"></MudIconButton>
                                        </MudTooltip>
                                    }

                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">

                                        <!-- Profile / Logout -->
                                        <AuthorizeView>
                                            <MudMenuItem Icon="@TbIcons.BoldDuoTone.Settings" Label="@loc["settings"]" Href="@settingsUrl"></MudMenuItem>
                                            <MudMenuItem Icon="@Icons.Material.Filled.ManageAccounts" Label="@loc["account"]" Href="@manageUrl"></MudMenuItem>
                                            <MudMenuItem Label="@loc["welcome"]" Href="@welcomeUrl"></MudMenuItem>
                                            <MudMenuItem Label="@loc["about"]" Href="/about"></MudMenuItem>
                                            <MudMenuItem>
                                                <form action="/Logout" method="post">
                                                    <AntiforgeryToken />
                                                    <input type="hidden" name="ReturnUrl" value="/" />
                                                    <button type="submit">@loc["logout"]</button>
                                                </form>
                                            </MudMenuItem>
                                        </AuthorizeView>
                                    </MudMenu>
                                </MudStack>
                            </MudToolBar>

                            <main class="container-fill">
                                <article class="content container-fill">
                                    @Body
                                </article>
                            </main>

                        </div>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
}
else
{
    <MudProgressLinear Indeterminate Color="Color.Tertiary"/>
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code {
    private Team? _team;
    private TestProject? _project;
    private Tenant? _tenant;
    private string? tenantId;
    private string? currentUrl;
    private MudThemeProvider _mudThemeProvider = default!;
    private ApplicationState _state = null!;

    public string MenuStyle => $"width: 100%; ";
    public string MenuClass => $"tb-toolbar main " + (_state.IsDarkMode ? "dark" : "light");

    private bool _prefTextToIcons = false;
    private UserPreferences? _userPreferences;

    private string MoreLabel => _prefTextToIcons == true ? loc["more"] : "";

    protected override async Task OnInitializedAsync()
    {
        _state = await themingService.GetApplicationStateAsync();
        tenantId = _state.User.Claims.FirstOrDefault(x => x.Type == "tenant")?.Value;
        _tenant = await tenantController.GetTenantAsync();

        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.LocationChanged += OnLocationChanged;

        _project = await projectService.GetActiveProjectAsync();
        if(_project?.Team is not null)
        {
            _team = _project.Team;
        }
        else
        {
            _team = await teamService.GetActiveTeamAsync();
        }

        _userPreferences = await userPreferencesService.GetUserPreferencesAsync();
        _prefTextToIcons = _userPreferences?.PreferTextToIcons ?? false;
    }

    private void OnUserPreferencesChanged(UserPreferences preferences)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OnDarkModeChanged(bool isDarkMode)
    {
        _state.IsDarkMode = isDarkMode;

        await themingService.SetDarkModeAsync(isDarkMode);

        navigationManager.Refresh(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isDarkMode = await themingService.IsDarkModeAsync();
            if(isDarkMode != _state.IsDarkMode)
            {
                _state.IsDarkMode = isDarkMode;
                StateHasChanged();
            }
        }
    }


    private async Task OnSelectedTeamChanged(Team? team)
    {
        _project = null;
        _team = team;
        await teamService.SetActiveTeamAsync(team);
    }
    private async Task OnSelectedProjectChanged(TestProject? testProject)
    {
        _team = testProject?.Team;
        _project = testProject;
        await projectService.SetActiveProjectAsync(testProject);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = navigationManager.ToBaseRelativePath(e.Location);
        //StateHasChanged();
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
}