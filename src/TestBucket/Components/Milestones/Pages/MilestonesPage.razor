@attribute [Authorize()]
@page "/{TenantId}/Milestones"
@using Heron.MudCalendar
@using TestBucket.Components.Issues.Layouts
@using TestBucket.Components.Milestones.Controllers
@using TestBucket.Domain
@using TestBucket.Domain.Issues.Models
@layout SettingsLayout
@inject MilestonesController controller
@inject AppNavigationManager appNavigationManager
@inject AuthenticationStateProvider authenticationStateProvider 
@inject IStringLocalizer<ProjectStrings> projectLoc
@inject IStringLocalizer<SharedStrings> loc

<TenantRedirect/>

<MudStack Class="container-settings-page">

    <MudBreadcrumbs Items="@_nav"></MudBreadcrumbs>

    <MudTabs Style="width: 100%">

         <MudTabPanel Text="@loc["manage"]">
            <MudDataGrid Items="_milestones"
                         Class="pa-2"
                         Dense Hover RowClass="tb-datarow cursor-pointer"
                         RowClick="async (row) => await OnRowClicked(row.Item)"
                         T="Milestone"
                         SortMode="SortMode.Single">

                <ToolBarContent>
                    <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                        <MudIcon Icon="@TbIcons.BoldDuoTone.Flag" Size="Size.Large" Color="Color.Tertiary" />
                        <MudText Typo="Typo.h2">@loc["milestones"]</MudText>
                        <MudSpacer />

                        <PermissionView Entity="PermissionEntityType.Issue" Level="PermissionLevel.Write">
                            <Authorized>
                                <MudButton data-testid="add-milestone"
                                           Class="tb-button-new"
                                           StartIcon="@Icons.Material.Filled.Add" OnClick="AddAsync">@loc["add"]</MudButton>
                            </Authorized>
                        </PermissionView>
                    </MudStack>
                </ToolBarContent>

                <ColGroup>
                    <col style="width: 2fr;" />
                    <col style="width: 3fr;" />
                    <col style="width: 1fr;" />
                    <col style="width: 2fr;" />
                    <col style="width: 2fr;" />
                </ColGroup>

                <Columns>

                    <TemplateColumn Title="@loc["system"]">
                        <CellTemplate>
                            @if (context.Item.ExternalSystemName is not null)
                            {
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                    <ExternalSystemIcon SystemName="@context.Item.ExternalSystemName" Size="Size.Small" />
                                    <div>@context.Item.ExternalSystemName</div>
                                </MudStack>
                            }
                            else
                            {
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                    <ExternalSystemIcon SystemName="Test Bucket" Size="Size.Small" />
                                    <div>Test Bucket</div>
                                </MudStack>
                            }
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="@loc["name"]">
                        <CellTemplate>
                            @if (context.Item.Title is not null)
                            {
                                <Chip Text="@context.Item.Title" Color="@context.Item.Color"></Chip>
                            }
                        </CellTemplate>
                    </TemplateColumn>

                    <PropertyColumn Property="x => x.State" Title="@loc["state"]" />

                    <TemplateColumn Title="@loc["start-date"]">
                        <CellTemplate>
                            @if(context.Item.StartDate is not null)
                            {
                                @context.Item.StartDate.Value.LocalDateTime.ToShortDateString()
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="@loc["end-date"]">
                        <CellTemplate>
                            @if (context.Item.EndDate is not null)
                            {
                                @context.Item.EndDate.Value.LocalDateTime.ToShortDateString()
                            }
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn>
                        <CellTemplate>
                            <PermissionView Entity="PermissionEntityType.Issue" Level="PermissionLevel.Delete">
                                <Authorized>
                                    @if (UserPreferences?.PreferTextToIcons == true)
                                    {
                                        <MudButton OnClick="async() => await DeleteAsync(context.Item)" Color="Color.Error">
                                            @loc["delete"]
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudIconButton OnClick="async () => await DeleteAsync(context.Item)" Color="Color.Error" Icon="@Icons.Material.Filled.Clear"/>
                                    }
                                </Authorized>
                            </PermissionView>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>

        <MudTabPanel Text="@loc["calendar"]">
            <MudCalendar Style="width: 100%" Items="_calendarItems" ToolbarPadding="4" Outlined>
            </MudCalendar>
        </MudTabPanel>
    </MudTabs>

	<PermissionView Level="Domain.Identity.Permissions.PermissionLevel.Write" Entity="PermissionEntityType.Project">
		<Authorized>
			@if(ManageProjectIntegrationsUrl is not null)
			{
				<FieldLink Icon="@TbIcons.Filled.Extensions" Href="@ManageProjectIntegrationsUrl" HeaderText="@projectLoc["integrations"]" Description="@projectLoc["integrations-description"]" />
			}
		</Authorized>
	</PermissionView>
</MudStack>

@code {
	[Parameter] public string? TenantId { get; set; }
	[CascadingParameter] public TestProject? Project { get; set; }
	[CascadingParameter] public Team? Team { get; set; }
	[CascadingParameter] public UserPreferences? UserPreferences { get; set; }

	public string? ManageProjectIntegrationsUrl => Project is null ? null : $"/{TenantId}/Settings/Projects/{Project.Slug}/Integrations";

    private TestProject? _project;
    private CalendarItem[] _calendarItems = [];

    private IReadOnlyList<Milestone> _milestones = [];

    private List<BreadcrumbItem> _nav = [];

    protected override void OnInitialized()
    {
        SetupBreadcrumbs();
    }

    private void SetupBreadcrumbs()
    {
        _nav.Clear();
        _nav.Add(new BreadcrumbItem(loc["settings"], appNavigationManager.GetSettingsUrl()));
        _nav.Add(new BreadcrumbItem(loc["milestones"], appNavigationManager.GetMilestonesUrl()));
    }

    private async Task AddAsync()
    {
        await controller.AddMilestoneAsync();
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        if(_project is not null)
        {
            _milestones = await controller.GetMilestonesAsync(_project);
            var items = new List<CalendarItem>();
            foreach(var milestone in _milestones)
            {
                if (milestone.StartDate is not null && 
                    milestone.EndDate is not null &&
                    milestone.Title is not null)
                {
                    var start = milestone.EndDate.Value.LocalDateTime;
                    start = new DateTime(start.Year, start.Month, start.Day, 0, 0, 0);
                    var end = new DateTime(start.Year, start.Month, start.Day, 23, 59, 59);
                    items.Add(new CalendarItem() 
                    { 
                        Text = milestone.Title, 
                        Start = start,
                        End = end,
                    });
                }
            }
            _calendarItems = items.ToArray();
        }
    }

    private async Task OnRowClicked(Milestone milestone)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.HasPermission(PermissionEntityType.Issue, PermissionLevel.Write))
        {
            await controller.EditMilestoneAsync(milestone);
            await LoadAsync();
        }
    }

    private async Task DeleteAsync(Milestone milestone)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.HasPermission(PermissionEntityType.Issue, PermissionLevel.Delete))
        {
            await controller.DeleteMilestoneAsync(milestone);
            await LoadAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Project is not null)
        {
            if(_project?.Id != Project.Id)
            {
                _project = Project;
                await LoadAsync();
            }
        }
    }
}
