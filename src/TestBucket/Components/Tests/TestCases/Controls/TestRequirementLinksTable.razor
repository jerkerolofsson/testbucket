@using TestBucket.Components.Requirements
@inject RequirementBrowser browser
@inject TestCaseEditorController editor
@inject IStringLocalizer<SharedStrings> loc

<DropZone T="RequirementEntity" OnDrop="OnDrop">
    <MudDataGrid Items="_links"
    Dense="true"
    Hover="true"
    T="RequirementTestLink"
    SortMode="SortMode.Single">

        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
                <MudText>@loc["requirement-coverage"]</MudText>
                <MudSpacer />
                <MudTooltip Text="@loc["link-requirement-to-test"]">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddRequirementLinkAsync"></MudIconButton>
                </MudTooltip>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <TemplateColumn Title="">
                <CellTemplate>
                    @{
                        string url = $"{context.Item.Requirement!.TenantId}/Requirements/Requirements/{context.Item.RequirementId}";
                    }
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIcon Icon="@RequirementIcons.GetIcon(context.Item.Requirement)"/>
                        <MudLink Href="@url">@context.Item.Requirement!.Name</MudLink>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn CellStyle="width: 1%">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="async () => await DeleteLinkAsync(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
</DropZone>

@code {
    [Parameter] public TestCase? TestCase { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }

    private RequirementTestLink[] _links = [];


    private async Task OnDrop(RequirementEntity? requirementEntity)
    {
        if(TestCase is null)
        {
            return;
        }
        if(requirementEntity is Requirement requirement)
        {
            await editor.LinkTestCaseToRequirementAsync(TestCase, requirement);
        }
        else if(requirementEntity is RequirementSpecificationFolder folder)
        {
            // ..
        }
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (TestCase is not null)
        {
            _links = await browser.GetLinksForTestAsync(TestCase);
        }
    }

    public async Task AddRequirementLinkAsync()
    {
        if(TestCase is null)
        {
            return;
        }
        await editor.LinkTestCaseToRequirementAsync(TestCase, Project, Team);
        await LoadDataAsync();
    }

    private async Task DeleteLinkAsync(RequirementTestLink link)
    {
        await browser.DeleteRequirementLinkAsync(link);
        await LoadDataAsync();
    }
}
