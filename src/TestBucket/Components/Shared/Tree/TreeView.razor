@typeparam T

<CascadingValue Value="this">

    <div class="@CssClass" style="@Style" aria-role="tree">
        @foreach(var item in Items)
        {
            <TreeViewNode T="T" Item="item" SelectedValue="@SelectedValue">
            </TreeViewNode>
        }
    </div>
</CascadingValue>

@code {
        private string CssClass => $"treeview {Class} treeview-{Color.ToDescriptionString()}";

    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public Color Color { get; set; } = Color.Primary;
    [Parameter] public Size IconSize { get; set; } = Size.Medium;
    

    [Parameter] public T? SelectedValue { get; set; }
    [Parameter] public EventCallback<T?> SelectedValueChanged { get; set; }
    [Parameter] public IReadOnlyCollection<T>? SelectedValues { get; set; }
    [Parameter] public EventCallback<IReadOnlyCollection<T>?> SelectedValuesChanged { get; set; }

    [Parameter] 
    public Func<T?, Task<IReadOnlyCollection<TreeNode<T>>>>? ServerData { get; set; }

    [Parameter] public IReadOnlyCollection<TreeNode<T>> Items { get; set; } = [];

    [Parameter] public RenderFragment<TreeNode<T>>? ItemTemplate { get; set; }
}
