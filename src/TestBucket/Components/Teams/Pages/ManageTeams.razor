@page "/{tenantId}/Settings/Teams"
@using TestBucket.Components.Shared.Profile
@using TestBucket.Components.Teams.Dialogs
@using TestBucket.Domain.Teams.Models
@layout SettingsLayout
@inject TeamController controller
@inject IDialogService dialogService
@inject IStringLocalizer<SharedStrings> loc
@inject AppNavigationManager appNav

<MudStack Class="container-settings-page">

    <MudBreadcrumbs Items="@_nav"></MudBreadcrumbs>

    <MudDataGrid ServerData="LoadGridData"
    Dense="true"
    Hover="true"
    T="Team"
    @ref="_dataGrid"
    SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudIcon Icon="@Icons.Material.Filled.Devices" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h2">@loc["teams"]</MudText>
                <MudSpacer />

                <PermissionView Entity="PermissionEntityType.Team" Level="PermissionLevel.Write">
                    <Authorized>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTeamAsync"></MudIconButton>
                    </Authorized>
                </PermissionView>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <TemplateColumn Title="@loc["name"]" SortBy="x => x.Name" Sortable="true">
                <CellTemplate>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <GenericAvatar Text="@context.Item.ShortName" ImageUri="@context.Item.IconUrl"/>
                        <MudText>@context.Item.Name</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn >
                <CellTemplate>
                    <PermissionView Entity="PermissionEntityType.Team" Level="PermissionLevel.Delete">
                        <Authorized>
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Clear" OnClick="async() => await DeleteAsync(context.Item)"></MudIconButton>
                        </Authorized>
                    </PermissionView>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Team" />
        </PagerContent>
    </MudDataGrid>
</MudStack>

@code {
    [Parameter] public string? TenantId { get; set; }

    private readonly List<BreadcrumbItem> _nav = [];
    private MudDataGrid<Team>? _dataGrid;

    private async Task AddTeamAsync()
    {
        var dialog = await dialogService.ShowAsync<AddTeamDialog>();
        var result = await dialog.Result;
        _dataGrid?.ReloadServerData();
    }

    private async Task DeleteAsync(Team team)
    {
        await controller.DeleteAsync(team);
    }

    protected override void OnInitialized()
    {
        SetupBreadcrumbs();
    }

    private void SetupBreadcrumbs()
    {
        _nav.Clear();
        _nav.Add(new BreadcrumbItem(loc["settings"], appNav.GetSettingsUrl()));
        _nav.Add(new BreadcrumbItem(loc["teams"], appNav.GetManageTeamsUrl()));
    }

    private async Task<GridData<Team>> LoadGridData(GridState<Team> state)
    {
        var result = await controller.SearchAsync(new Contracts.SearchQuery
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize
            });

        GridData<Team> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
