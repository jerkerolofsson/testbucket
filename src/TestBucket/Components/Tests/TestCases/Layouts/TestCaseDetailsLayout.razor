@inherits LayoutComponentBase
@layout TestingLayout
@using Humanizer
@using TestBucket.Components.Layout
@using TestBucket.Components.Shared.Splitter
@using TestBucket.Components.Tests.Layouts
@using TestBucket.Components.Tests.TestRuns.Controllers
@using TestBucket.Domain
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Teams.Models
@inject TestBrowser browser
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreation
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc

<TenantRedirect />

<div class="container-fill-2-rows">

    <div>
        @if (_loading)
        {
            <MudProgressLinear Indeterminate Color="Color.Tertiary" />
        }

        <div class="tb-toolbar">
            <MudStack Row Style="width: 100%; margin-right: 16px" AlignItems="AlignItems.Center" Spacing="1">
                <PathNavigation Test="@_testCase" TestSuite="@_testSuite" />
                <MudSpacer/>
                <MudTooltip Text="@loc["variables"]">
                    <MudIconButton Icon="@Icons.Material.Filled.Abc" Href="@appNavigationManager.GetTestCaseVariablesUrl()" Class="rounded-0" />
                </MudTooltip>

                <MudTooltip Text="@loc["fields"]">
                    <MudIconButton Icon="@TbIcons.BoldDuoTone.Field" Href="@appNavigationManager.GetTestCaseFieldsUrl()" Class="rounded-0" />
                </MudTooltip>

                <MudTooltip Text="@loc["test-coverage"]">
                    <MudIconButton Icon="@TbIcons.BoldDuoTone.Coverage" Href="@appNavigationManager.GetTestCaseRequimentsUrl()" Class="rounded-0" />
                </MudTooltip>

                <MudTooltip Text="@loc["attachments"]">
                    <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Href="@appNavigationManager.GetTestCaseAttachmentsUrl()" Class="rounded-0" />
                </MudTooltip>


                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="@loc["run-test"]">
                    <MudIconButton OnClick="RunTestAsync" Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="rounded-0" />
                </MudTooltip>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="async x => await DeleteTestCaseAsync()">@loc["delete"]</MudMenuItem>
                </MudMenu>

            </MudStack>
        </div>
    </div>
    <CascadingValue Value="@_testSuite">
        <CascadingValue Value="@_testCase">
            <MudStack Style="width: 100%; overflow: auto; ">
                @Body
            </MudStack>
        </CascadingValue>
    </CascadingValue>
</div>

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private TestCase? _testCase;
    private TestSuite? _testSuite;

    private Team? _team;
    private TestProject? _project;

    private bool _loading = false;

    private async Task DeleteTestCaseAsync()
    {
        if (_testCase is null)
        {
            return;
        }
        await testCaseEditor.DeleteTestCaseAsync(_testCase);
    }

    private async Task RunTestAsync()
    {
        if (_testCase is null || _testCase.TestProjectId is null)
        {
            return;
        }
        var run = await testRunCreation.CreateTestRunAsync(_testCase.Name, _testCase.TestProjectId.Value, [_testCase.Id]);
        if (run is not null)
        {
            appNavigationManager.NavigateTo(run);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if (_project != Project || _team != Team)
        {
            _project = Project;
            _team = Team;
        }
        var testCaseId = appNavigationManager.GetEntityIdFromCurrentUri();
        if(testCaseId is null)
        {
            _testCase = null;
            return;
        }

        if(testCaseId != _testCase?.Id)
        {
            _testCase = await browser.GetTestCaseByIdAsync(testCaseId.Value);
            appNavigationManager.State.SelectedTestCase = _testCase;
        }

        _testSuite = appNavigationManager.State.SelectedTestSuite;
        if (_testCase is not null && _testSuite?.Id != _testCase.TestSuiteId)
        {
            _testSuite = await browser.GetTestSuiteByIdAsync(_testCase.TestSuiteId);
            appNavigationManager.State.SelectedTestSuite = _testSuite;
        }
    }
}
