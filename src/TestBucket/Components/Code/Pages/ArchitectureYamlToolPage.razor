@attribute [Authorize()]
@page "/{TenantId}/Code/ArchitectureYamlTool"
@layout CodeLayout
@inject ArchitectureController controller
@inject IStringLocalizer<CodeStrings> loc

<Splitter Class="container-fill pa-2" Bordered="false" Dimension="50" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>
        <div class="tb-architecture-yaml-left">
            <MudText Typo="Typo.h1">@loc["architecture-yaml"]</MudText>

            <MudTextField @bind-Value="@_yaml"
                Style="font-family: monospace; overflow: auto"
                T="string" Variant="Variant.Outlined" Lines="20" AutoGrow/>

            <MudStack Row Style="width:100%;" Spacing="1" Class="pa-2">
                @if(_loading)
                {
                    <MudProgressLinear Indeterminate Style="width: 100%"/>
                }  
                else
                {
                    <MudSpacer />
                    <MudButton OnClick="Validate" Color="Color.Primary" Variant="Variant.Outlined">@loc["validate"]</MudButton>
                    <MudButton OnClick="Apply" Color="Color.Primary" Variant="Variant.Filled">@loc["apply"]</MudButton>
                }
            </MudStack>
        </div>
    </StartContent>
    <EndContent>

        <div class="tb-architecture-yaml-right">
            @if(_errors.Count == 0)
            {
                <MudText Typo="Typo.h1">@loc["preview"]</MudText>
                <TestBucket.Components.Code.Controls.ProjectArchitectureView Model="@_model"/>
            }
            else
            {
                <MudText Typo="Typo.h1">@loc["yaml-errors"]</MudText>
                <div style="display: grid; grid-template-columns: auto auto 1fr; gap: 4px">
                    @foreach(var error in _errors)
                    {
                        <MudText Color="Color.Error">@error.Line</MudText>
                        <MudText Color="Color.Error">@error.Column</MudText>
                        <MudText Color="Color.Error">@error.Message</MudText>
                    }
                </div>
            }
        </div>
    </EndContent>
</Splitter>

@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] TestProject? Project{get;set;}

    private string _yaml = "";
    private ProjectArchitectureModel? _model;
    private List<ArchitectureYamlValidationError> _errors = [];

    private bool _loading = false;


    protected override async Task OnInitializedAsync()
    {
        if(Project is not null)
        {
            _model = await controller.GetProductArchitectureAsync(Project);

            var parser = new ArchitectureYamlSerializer();
            _yaml = parser.Serialize(_model) ;
        }
    }

    private async Task Apply()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            Validate();
            if (Project is not null && _model is not null)
            {
                await controller.ImportProductArchitectureAsync(Project, _model);
            }
        }
        finally
        {
             _loading = false;
        }
    }

    private void Validate()
    {
        _model = null;
        var parser = new ArchitectureYamlSerializer();
        _errors = parser.Validate(_yaml);
        if(_errors.Count == 0)
        {
            try
            {
                _model = parser.Parse(_yaml);
            } 
            catch {}
        }
    }
}