@typeparam T where T : class

<CascadingValue Value="this">

    <div class="@CssClass" style="@Style" aria-role="tree">
        @foreach(var item in Items)
        {
            <TreeViewNode T="T" 
                Item="item" SelectedValue="@SelectedValue" EditItem="@EditItem" 
                ItemEdited="async (text) => await ItemEdited.InvokeAsync(text)"
                ItemEditCanceled="async () => await ItemEditCanceled.InvokeAsync()" >
            </TreeViewNode>
        }
    </div>
</CascadingValue>

@code {
    private string CssClass => $"treeview {Class} treeview-{Color.ToDescriptionString()}";

    [Parameter] public TreeNode<T>? EditItem { get; set; }

    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public Color Color { get; set; } = Color.Primary;
    [Parameter] public Size IconSize { get; set; } = Size.Medium;

    [Parameter] public T? SelectedValue { get; set; }
    [Parameter] public EventCallback<T?> SelectedValueChanged { get; set; }
    [Parameter] public IReadOnlyCollection<T>? SelectedValues { get; set; }
    [Parameter] public EventCallback<IReadOnlyCollection<T>?> SelectedValuesChanged { get; set; }
    [Parameter] public EventCallback<string> ItemEdited { get; set; }
    [Parameter] public EventCallback<string> ItemEditCanceled { get; set; }

    [Parameter] 
    public Func<T?, Task<IReadOnlyCollection<TreeNode<T>>>>? ServerData { get; set; }

    [Parameter] public IReadOnlyCollection<TreeNode<T>> Items { get; set; } = [];

    [Parameter] public RenderFragment<TreeNode<T>>? ItemTemplate { get; set; }

    protected override void OnParametersSet()
    {
    }

    public static TreeNode<BrowserItem>? RemoveTreeNode(TreeNode<BrowserItem>? parentNode, IEnumerable<TreeNode<BrowserItem>> treeItems, Predicate<BrowserItem> predicate)
    {
        foreach (var node in treeItems)
        {
            if (node.Value is not null && predicate(node.Value))
            {
                if (parentNode?.Children is not null)
                {
                    parentNode.Children = parentNode.Children.Where(x => x.Value != null && !predicate(x.Value)).ToList();
                }

                return node;
            }
            else if (node.Children is not null)
            {
                var match = RemoveTreeNode(node, node.Children, predicate);
                if (match is not null)
                {
                    return match;
                }
            }
        }
        return null;
    }
   
    public static TreeNode<BrowserItem>? FindTreeNode(IEnumerable<TreeNode<BrowserItem>> treeItems, Predicate<BrowserItem> predicate)
    {
        foreach (var node in treeItems)
        {
            if (node.Value is not null && predicate(node.Value))
            {
                return node;
            }
            else if (node.Children is not null)
            {
                var match = FindTreeNode(node.Children, predicate);
                if (match is not null)
                {
                    return match;
                }
            }
        }
        return null;
    }
}
