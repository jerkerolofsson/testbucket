@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<CodeStrings> codeLoc

@if (Component is not null)
{
    <MudStack Style="width: 100%" Class="pa-2">
        
        <Field>
            <FieldHeader>@loc["name"]</FieldHeader>
            <MudTextField Variant="Variant.Outlined"
                          data-testid="architecture-component-name"
                          AdornmentColor="Color.Tertiary"
                          Value="@Component.Name" ValueChanged="OnNameChanged"
                          T="string" AutoFocus="true" />
        </Field>

        <BasicMarkdownEditor Text="@Component.Description" TextChanged="OnDescriptionChanged"/>

        <Field Row>
            <FieldHeader>@codeLoc["dev-lead"]</FieldHeader>
            <MudSpacer/>
            <UserPicker SelectedUserName="@Component.DevLead" SelectedUserNameChanged="OnDevLeadChanged"/>
        </Field>

        <Field Row>
            <FieldHeader>@codeLoc["test-lead"]</FieldHeader>
            <MudSpacer/>
            <UserPicker SelectedUserName="@Component.TestLead" SelectedUserNameChanged="OnTestLeadChanged"/>
        </Field>

    </MudStack>
}

@code {
    [Parameter] public AritecturalComponentProjectEntity? Component { get; set; }
    [Parameter] public EventCallback<AritecturalComponentProjectEntity> ComponentChanged { get; set; }

    private async Task OnTestLeadChanged(string name)
    {
        if (Component is null)
        {
            return;
        }
        Component.TestLead = name;
        await ComponentChanged.InvokeAsync(Component);
    }

    private async Task OnDevLeadChanged(string name)
    {
        if (Component is null)
        {
            return;
        }
        Component.DevLead = name;
        await ComponentChanged.InvokeAsync(Component);
    }

    private async Task OnNameChanged(string name)
    {
        if (Component is null)
        {
            return;
        }
        Component.Name = name;
        await ComponentChanged.InvokeAsync(Component);
    }

    private async Task OnDescriptionChanged(string name)
    {
        if (Component is null)
        {
            return;
        }
        Component.Description = name;
        await ComponentChanged.InvokeAsync(Component);
    }
}
