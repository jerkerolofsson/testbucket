@using TestBucket.Contracts.Requirements
@using TestBucket.Contracts.Requirements.Types
@using TestBucket.Domain.Requirements.Models
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<RequirementStrings> reqLoc

<EditForm Model="@_requirement" OnValidSubmit="OnValidSubmit">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <TitleContent>
            @reqLoc["new-requirement"]
        </TitleContent>
        <DialogContent>

            <MudStack Spacing="5">

                <MudStack Spacing="0">
                    <FieldHeader>@reqLoc["title"]</FieldHeader>
                    <MudTextField Variant="Variant.Outlined" T="string" @bind-Value="@_requirement.Name"></MudTextField>
                </MudStack>

                <MudStack Spacing="0">
                    <FieldHeader>@reqLoc["type"]</FieldHeader>
                    <MudSelect T="string" @bind-Value="@_requirement.RequirementType" Variant="Variant.Outlined">
                        @foreach (var type in RequirementTypes.AllTypes)
                        {
                            <MudSelectItem Value="@type">
                                @reqLoc[type.ToLower()]
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>

                <MudStack Spacing="0">
                    <FieldHeader>@reqLoc["description"]</FieldHeader>
                    <MarkdownEditor @bind-Value="@_requirement.Description" @bind-Preview="@_preview" />
                </MudStack>

            </MudStack>
        </DialogContent>

        <DialogActions>
            @if (_requirement.Name.Length > 0)
            {
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            }
            <MudButton OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public string? RequirementType { get; set; }

    private Requirement _requirement = new() { Name = "", RequirementType = RequirementTypes.General };
    private bool _preview = false;

    protected override void OnInitialized()
    {
        if(RequirementType is not null)
        {
            _requirement.RequirementType = RequirementType;
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private void OnValidSubmit()
    {
        if (_requirement is null)
        {
            return;
        }
        MudDialog.Close(_requirement);
    }
}

