@using TestBucket.Components.Shared.Profile
@using TestBucket.Components.Tests.TestRuns.Controllers
@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject ITestCaseManager testCaseManager
@inject ITestRunManager testRunManager
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreationService
@inject TestExecutionController testExecutionController
@inject FieldController fieldController
@implements IDisposable
@implements ITestRunObserver
@inject IStringLocalizer<SharedStrings> loc
@inject AuthenticationStateProvider authStateProvider

<MudStack>
    <MudStack Spacing="3" Row AlignItems="AlignItems.Center" Class="pa-2">
        @if (_run is not null)
        {
            <MudText Typo="Typo.h1" Color="Color.Primary">@_totalCount</MudText>
            <MudText Typo="Typo.h1">@_run.Name</MudText>
        }
    </MudStack>

    <DropZone T="TestEntity" OnDrop="OnDrop">
        <MudDataGrid ServerData="LoadGridData"
                     Class="tb-test-case-run-grid tb-data-grid-verydense"
                     RowClassFunc="RowClassFunc"
                     Dense
                     Bordered
                     RowsPerPage="25"
                     SelectOnRowClick="true"
                     MultiSelection="false"
                     T="TestCaseRun"
                     RowClick="(e) => OnClicked(e.Item)"
                     @ref="_dataGrid"
                     SortMode="SortMode.None">

            <ToolBarContent>
                <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">

                    <MudTextField Value="_searchText" T="string" ValueChanged="OnSearch"
                        Class="default-search"
                        Clearable="true"
                        Placeholder="@loc["search-tests"]"
                        Variant="Variant.Outlined"
                        IconSize="Size.Small"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" />

                    <MudSpacer />

                    <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert">
                        <CommandMenuItems TypeNames="TestRun" />
                    </MudMenu>
                </MudStack>
            </ToolBarContent>

            <ColGroup>
                <col style="width: 100px;" />
                <col style="width: 2fr;" />
                <col style="width: 220px;" />
                <col style="width: 150px;" />
                <col style="width: 70px;" />
            </ColGroup>

            <Columns>

                <TemplateColumn Title="@loc["test-result"]">
                    <CellTemplate>
                        <ResultPill Result="@context.Item.Result" ReadOnly="@(!CanChangeResult)" ResultChanged="async (result) => await SetTestCaseRunResultAsync(context.Item, result)" />
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["name"]" CellStyle="max-width: 100%; overflow: hidden">
                    <CellTemplate>
                        @context.Item.Name
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["assigned-to"]">
                    <CellTemplate>
                        @if(CanAssign)
                        {
                            <UserPicker 
                                Clearable
                                SelectedUserName="@context.Item.AssignedToUserName" SelectedUserNameChanged="async (user) => await AssignRunToUserAsync(context.Item, user)"/>
                        }
                        else if(!string.IsNullOrEmpty(context.Item.AssignedToUserName))
                        {
                            <UserProfileImage UserName="@context.Item.AssignedToUserName"/>
                        }
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="">
                    <CellTemplate>
                        @if(CanRun)
                        {
                            @if(context.Item.Result != Contracts.Testing.Models.TestResult.NoRun)
                            {
                                <MudLink OnClick="async () => await RunTestAgain(context.Item)" Style="font-size: 8pt">@loc["run-test-again"]</MudLink>
                            }
                            else
                            {
                                <MudLink OnClick="async () => await RunTest(context.Item)" Style="font-size: 8pt">@loc["run"]</MudLink>
                            }
                        }
                        else
                        {
                            @context.Item.Modified.Humanize()
                        }

                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn Title="">
                    <CellTemplate>
                        <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert" OpenChanged="() => SetSelectedTestCaseRun(context.Item)">
                            <CommandMenuItems TypeNames="TestCaseRun" />
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>

            </Columns>

            <PagerContent>
                <MudDataGridPager T="TestCaseRun" />
            </PagerContent>
        </MudDataGrid>
    </DropZone>
</MudStack>