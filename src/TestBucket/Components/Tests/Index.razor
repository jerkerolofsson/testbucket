@attribute [Authorize()]
@page "/{TenantId}/Tests"
@using Humanizer
@using TestBucket.Components.Layout
@layout AppLayout
@inject TestCaseEditorService testCaseEditor

<TenantRedirect/>

<div style="display: grid; grid-template-columns: auto 1fr; height: 100%">
    <TestTreeView OnFolderClicked="OnFolderClicked" OnTestSuiteClicked="OnTestSuiteClicked" />

    @if(_selectedTestCase is not null)
    {
        <TestCaseEditor Test="@_selectedTestCase" TestChanged="OnTestModified"/>
    }
    else
    {
        <TestCaseGrid Folder="@_selectedFolder" TestSuiteId="@_selectedTestSuiteId" OnTestCaseClicked="OnTestCaseClicked" />
    }
</div>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] TestProject? Project { get; set; }

    private TestProject? _project;
    private TestCase? _selectedTestCase;
    private TestSuiteFolder? _selectedFolder;
    private long? _selectedTestSuiteId;

    protected override void OnParametersSet()
    {
        if(_project != Project)
        {
            _project = Project;

            // Clear selection
            _selectedFolder = null;
            _selectedTestCase = null;
            _selectedTestSuiteId = null;
        }
    }

    private void OnTestCaseClicked(TestCase test)
    {
        _selectedTestCase = test;
    }

    private async Task OnTestModified(TestCase test)
    {
        _selectedTestCase = test;
        await testCaseEditor.SaveTestCaseAsync(test);
    }

    private void OnTestSuiteClicked(TestSuite suite)
    {
        _selectedTestCase = null;
        _selectedFolder = null;
        _selectedTestSuiteId = suite.Id;
    }
    private void OnFolderClicked(TestSuiteFolder folder)
    {
        _selectedTestCase = null;
        _selectedFolder = folder;
        _selectedTestSuiteId = folder.TestSuiteId;
    }
}
