@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Components.Uploads.Controls
@using TestBucket.Contracts.Integrations
@using TestBucket.Contracts.Projects
@using TestBucket.Domain.Files.Models
@using TestBucket.Domain.Teams.Models
@inject ProjectController projectService
@inject IStringLocalizer<IntegrationStrings> loc

@if (Name is not null)
{
    <MudPaper Class="mb-3 pa-3">
        <MudStack Row AlignItems="AlignItems.Center" Class="tb-integration-title mb-5">
            @if (Icon is not null)
            {
                <MudIcon Size="Size.Large" Icon="@Icon" />
            }
            <MudText Typo="Typo.h1">@(Extension?.FriendlyName ?? Name)</MudText>
        </MudStack>

        @if(Extension is not null)
        {
            <MudText Class="mb-3">@Extension?.Description</MudText>
        }

        @if(Integration is null)
        {
            <MudText Style="font-weight: bold">@loc["no-integration"]</MudText>

            <MudStack Row Class="mt-5">
                <MudButton Variant="Variant.Outlined" OnClick="AddAsync">@loc["add-integration"]</MudButton>
            </MudStack>
        }
        else
        {
            <Field Row>
                <FieldHeader>@loc["integration-base-url"]</FieldHeader>
                <MudSpacer/>
                <MudTextField Value="Integration.BaseUrl" T="string" ValueChanged="BaseUrlChanged" />
            </Field>
            <Field Row>
                <FieldHeader>@loc["project-id"]</FieldHeader>
                <MudSpacer />
                <MudTextField 
                    Value="Integration.ExternalProjectId" 
                    T="string" 
                    ValueChanged="ExternalProjectIdChanged" 
                    HelperText="@Extension?.ProjectIdHelperText" />
            </Field>
            <Field Row>
                <FieldHeader>@loc["access-token"]</FieldHeader>
                <MudSpacer />
                <MudTextField 
                    InputType="InputType.Password" 
                    Value="Integration.AccessToken" 
                    T="string" 
                    ValueChanged="AccessTokenChanged"
                    HelperText="@Extension?.AccessTokenHelperText" />
            </Field>

            <Field Row>
                <FieldHeader>@loc["enabled"]</FieldHeader>
                <MudSpacer />
                <MudSwitchM3 Color="Color.Primary" T="bool" Value="Integration.Enabled" ValueChanged="EnabledChanged" />
            </Field>

            @if(Extension is not null)
            {
                ExternalSystemCapability[] capabilities = [ExternalSystemCapability.CreatePipeline, ExternalSystemCapability.CreateIssues, ExternalSystemCapability.GetIssues, ExternalSystemCapability.GetMilestones, ExternalSystemCapability.GetReleases];
                string[] labels = ["create-pipeline", "create-issues", "get-issues", "get-milestones", "get-releases"];

                @for(int i=0; i<Math.Min(capabilities.Length, labels.Length); i++)
                {
                    <ExternalSystemCapabilityField SupportedCapabilities="@Extension.SupportedCapabilities"
                                                   EnabledCapabilities="@Integration.EnabledCapabilities"
                                                   Title="@loc[labels[i]]"
                                                   OnEnabled="OnEnabledAsync"
                                                   OnDisabled="OnDisabledAsync"
                                                   Capability="@capabilities[i]" />
                }

                <MudText Class="mt-3" Style="opacity: 0.4">@Extension.FriendlyName @Extension.Version</MudText>
            }
        }
    </MudPaper>
}

@code {
    [Parameter] public EventCallback<ExternalSystem> IntegrationChanged { get; set; }
    [Parameter] public ExternalSystem? Integration { get; set; }
    [Parameter] public IExtension? Extension { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Name { get; set; }

    private async Task ExternalProjectIdChanged(string externalProjectId)
    {
        if (Integration is not null)
        {
            Integration.ExternalProjectId = externalProjectId;
            await OnChangedAsync();
        }
    }
    private async Task BaseUrlChanged(string baseUrl)
    {
        if (Integration is not null)
        {
            Integration.BaseUrl = baseUrl;
            await OnChangedAsync();
        }
    }
    private async Task AccessTokenChanged(string accessToken)
    {
        if (Integration is not null)
        {
            Integration.AccessToken = accessToken;
            await OnChangedAsync();
        }
    }
    private async Task EnabledChanged(bool value)
    {
        if (Integration is not null)
        {
            Integration.Enabled = value;
            await OnChangedAsync();
        }
    }
    private async Task OnDisabledAsync(ExternalSystemCapability capability)
    {
        if (Integration is not null)
        {
            if (Extension is not null)
            {
                Integration.SupportedCapabilities = Extension.SupportedCapabilities;
            }
            Integration.EnabledCapabilities &= ~capability;
            await OnChangedAsync();
        }
    }

    private async Task OnEnabledAsync(ExternalSystemCapability capability)
    {
        if (Integration is not null)
        {
            if(Extension is not null)
            {
                Integration.SupportedCapabilities = Extension.SupportedCapabilities;
            }
            Integration.EnabledCapabilities |= capability;
            await OnChangedAsync();
        }
    }

    private async Task OnChangedAsync()
    {
        await IntegrationChanged.InvokeAsync(Integration);
    }
    private async Task AddAsync()
    {
        if(this.Name is null) 
        {
            return;
        }


        await IntegrationChanged.InvokeAsync(new ExternalSystem
            {
                Name = this.Name,
                BaseUrl = Extension?.DefaultBaseUrl,
                Enabled = false,
                SupportedCapabilities = Extension?.SupportedCapabilities ?? ExternalSystemCapability.None
            });
    }
}
