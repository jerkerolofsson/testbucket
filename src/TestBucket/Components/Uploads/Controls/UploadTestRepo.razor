@using TestBucket.Components.Uploads.Services
@using TestBucket.Domain.Files.Models
@inject UploadService uploadService
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<ImportStrings> importLoc
@using Humanizer

<MudStack Style="@Style" Class="@Class">
    <MudFileUpload T="IBrowserFile"
                   @ref="@_fileUpload"
                   Accept="@Accept"
                   FilesChanged="UploadFilesAsync"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>

            <MudPaper Outlined="true" Class="@_dragClass">
                @if (ChildContent is null)
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mud-width-full mud-height-full" Spacing="1">
                        @if (!_loading)
                        {
                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.CloudUpload" />
                            <MudText Typo="Typo.h6">
                                @importLoc["import-repo-drop-header"]
                                Drag and drop files here or click to select a file
                            </MudText>
                            <MudText>
                                @importLoc["import-repo-drop-description"]
                            </MudText>
                            <MudText Style="font-style: italic" Color="Color.Tertiary">
                                @string.Format(loc["max-file-size"], MaxFileSize.Bytes().Humanize())
                            </MudText>
                        }
                    </MudStack>
                }
                else
                {
                    @ChildContent
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
</MudStack>


@code {
    [Parameter] public EventCallback FileUploadStarted { get; set; }
    [Parameter] public EventCallback<FileResource> FileUploaded { get; set; }
    [Parameter] public long MaxFileSize { get; set; } = 10_000_000;
    [Parameter] public string? Accept { get; set; }
    [Parameter] public string? Label { get; set; }

    [Parameter] public string? Class { get; set; }
    [Parameter] public string Style { get; set; } = "width: 100%";

    [Parameter] public RenderFragment? ChildContent { get; set; }

  
    [Parameter] public ResourceCategory UploadCategory { get; set; } = ResourceCategory.TestResults;

    private MudFileUpload<IBrowserFile>? _fileUpload;

    private bool _loading = false;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
       => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;


    private async Task UploadFilesAsync(IBrowserFile file)
    {
        ClearDragClass();
        _loading = true;
        await FileUploadStarted.InvokeAsync();

        this.StateHasChanged();

        var fileResource = await uploadService.UploadAsync(UploadCategory, file, MaxFileSize);
        await FileUploaded.InvokeAsync(fileResource);

        _loading = false;
    }
}
