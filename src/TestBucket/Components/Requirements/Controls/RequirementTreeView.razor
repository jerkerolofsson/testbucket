@using TestBucket.Components.Shared.Tree

@implements IRequirementObserver
@implements IDisposable
@inject RequirementBrowser browser
@inject RequirementEditorController editor
@inject AppNavigationManager appNav

<MudStack Spacing="0" Class="pa-2" Style="width: 100%; background: var(--mud-palette-surface)">
    <MudStack Row="true" Class="pr-2 pl-2" Spacing="0" AlignItems="AlignItems.Center">
        <MudTextField 
        Placeholder="Search Requirements"
        Clearable
        Variant="Variant.Outlined"
        Adornment="Adornment.Start" T="string" AdornmentIcon="@Icons.Material.Filled.Search" Value="_searchText" ValueChanged="OnSearchTextChangedAsync" />

        <MudSpacer />
        <MudTooltip Text="Add specification">
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddRequirementSpecificationAsync" />
            <MudIconButton Icon="@Icons.Material.Filled.ImportExport" Href="@(appNav.GetImportSpecificationsUrl())" />
        </MudTooltip>

    </MudStack>

    @if (_isSearching)
    {
        <MudProgressLinear Indeterminate Color="Color.Secondary"/>
    }
    else
    {
        <TreeView 
            Class="pa-2"
            ItemEdited="OnRenamed"
            ItemEditCanceled="OnItemEditCanceled"
            EditItem="@_editItem"
            T="BrowserItem"
            SelectedValue="@_selectedTreeItem"
            SelectedValueChanged="OnSelectedValueChangedAsync"
            Color="Color.Tertiary"
            ServerData="@LoadServerData"
            Items="@_rootItems">

            <ItemTemplate>

                @{
                    string style = "";
                    if (context.Value?.Color is not null)
                    {
                        style += $"color: {context.Value.Color}";
                    }
                }

                <DropZone T="Requirement" OnDrop="(test) => OnDrop(test, context)">
                    <MudMenu ActivationEvent="@MouseEvent.RightClick" Dense="true">
                        <ActivatorContent>
                            @if (context.Value?.Requirement is not null)
                            {
                                <Draggable T="Requirement" Data="@context.Value.Requirement">
                                    @context.Text
                                    @if (!string.IsNullOrEmpty(context.Value.Requirement.ExternalId))
                                    {
                                        <MudText Style="white-space: nowrap; word-wrap: nowrap;">@context.Value.Requirement.ExternalId</MudText>
                                    }
                                </Draggable>
                            }
                            else
                            {
                                @context.Text
                            }
                        </ActivatorContent>
                        <ChildContent>
                            @if (context.Value?.RequirementSpecification is not null)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">Rename</MudMenuItem>
                                <RequirementSpecificationMenuItems RequirementSpecification="@context.Value.RequirementSpecification"/>
                            }
                            else if (context.Value?.Requirement is not null)
                            {
                                <RequirementMenuItems 
                                    Project="@Project" Team="@Team"
                                    Requirement="context.Value.Requirement"/>
                            }

                            <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="() => AddRequirementSpecificationAsync()">Add Specification</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.ImportExport" Href="@(appNav.GetImportSpecificationsUrl())">Import Specification</MudMenuItem>

                        </ChildContent>
                    </MudMenu>
                </DropZone>
            </ItemTemplate>
        </TreeView>
    }
</MudStack>


@code {
    /// <summary>
    /// Instance of the tree view UI
    /// </summary>
    private MudTreeView<BrowserItem> _treeView = default!;

    /// <summary>
    /// Root items in the tree view
    /// </summary>
    private List<TreeNode<BrowserItem>> _rootItems = [];

    /// <summary>
    /// currently selected item
    /// </summary>
    private BrowserItem? _selectedTreeItem;

    /// <summary>
    /// Invoked when a specification is clicked
    /// </summary>
    [Parameter] public EventCallback<RequirementSpecification> OnSpecificationClicked { get; set; }

    /// <summary>
    /// Invoked when a specification is clicked
    /// </summary>
    [Parameter] public EventCallback<Requirement> OnRequirementClicked { get; set; }

    /// <summary>
    /// Invoked when a folder is clicked
    /// </summary>
    [Parameter] public EventCallback<RequirementSpecificationFolder> OnFolderClicked { get; set; }

    [Parameter] public TestProject? Project { get; set; }

    [Parameter] public Team? Team { get; set; }

    private bool _isSearching = false;

    private TreeNode<BrowserItem>? _editItem;

    private void BeginRename(TreeNode<BrowserItem> item)
    {
        _editItem = item;
    }

    private void OnItemEditCanceled()
    {
        _editItem = null;
    }

    private async Task OnRenamed(string text)
    {
        if(_editItem is not null)
        {
            if(_editItem.Value?.RequirementSpecification is not null)
            {
                _editItem.Text = text;
                _editItem.Value.RequirementSpecification.Name = text;
                await editor.SaveRequirementSpecificationAsync(_editItem.Value.RequirementSpecification);
            }
        }
        _editItem = null;
    }

    private async Task OnSelectedValueChangedAsync(BrowserItem? item)
    {
        _selectedTreeItem = item;
        if (item is not null)
        {
            if (item.Requirement is not null)
            {
                await OnRequirementClicked.InvokeAsync(item.Requirement);
            }
            else if (item.RequirementSpecification is not null)
            {
                await OnSpecificationClicked.InvokeAsync(item.RequirementSpecification);
            }
            else if (item.RequirementFolder is not null)
            {
                await OnFolderClicked.InvokeAsync(item.RequirementFolder);
            }
        }
    }

    protected override void OnInitialized()
    {
        editor.AddObserver(this);
    }

    public void Dispose()
    {
        editor.RemoveObserver(this);
    }

    private void SetRootItems(List<TreeNode<BrowserItem>> rootItems)
    {
        // Copy state and children from existing nodes
        foreach (var item in rootItems)
        {
            var existing = _rootItems.FirstOrDefault(x => x.Text == item.Text);
            if (existing is not null)
            {
                item.Expanded = existing.Expanded;
                item.Expandable = existing.Expandable;

                if (existing.Children is not null && item.Children is not null)
                {
                    foreach(var existingChild in existing.Children)
                    {
                        var itemChild = item.Children.Where(x=>x.Value?.RequirementSpecification == existingChild.Value?.RequirementSpecification).FirstOrDefault();
                        if(itemChild is not null)
                        {
                            itemChild.Children = existingChild.Children;
                            itemChild.Expanded = existingChild.Expanded;
                        }
                    }
                }
            }
        }

        _rootItems = rootItems;
        this.StateHasChanged();
    }

    public async Task OnSpecificationCreatedAsync(RequirementSpecification spec)
    {
        SetRootItems(await browser.BrowseAsync(_team?.Id, _project?.Id, null));
        // foreach (var specFolder in _rootItems.Where(x=>x.Text == "Specifications"))
        // {
        //     if(specFolder.Children is not null)
        //     {
        //         specFolder.Children = [.. specFolder.Children, browser.CreateSpecificationNode(spec)];
        //     }
        // }
    }
    public async Task OnSpecificationDeletedAsync(RequirementSpecification spec)
    {
        SetRootItems(await browser.BrowseAsync(_team?.Id, _project?.Id, null));
    }
    public async Task OnSpecificationSavedAsync(RequirementSpecification spec)
    {
        SetRootItems(await browser.BrowseAsync(_team?.Id, _project?.Id, null));
    }


    public async Task<IReadOnlyCollection<TreeNode<BrowserItem>>> LoadServerData(BrowserItem? browserItem)
    {
        if (Team is null || Project is null)
        {
            return [];
        }

        return await browser.BrowseAsync(Team?.Id, Project?.Id, browserItem);
    }

    private async Task AddRequirementSpecificationAsync()
    {
        var spec = new RequirementSpecification()
        {
            Name = "New Specification",
            TenantId = Project?.TenantId ?? "",
            TestProjectId = Project?.Id,
            TeamId = Team?.Id,
        };

        await editor.AddRequirementSpecificationAsync(spec);
    }

    private Task OnDrop(Requirement? requirement, TreeNode<BrowserItem>? targetNode)
    {
        if (requirement is null || targetNode is null)
        {
            return Task.CompletedTask;
        }
        var target = targetNode.Value;
        if (target is null)
        {
            return Task.CompletedTask;
        }
        return Task.CompletedTask;
    }

    private TestProject? _project;
    private Team? _team;
    private string _searchText = "";

    private async Task OnSearchTextChangedAsync(string text)
    {
        _isSearching = true;
        this.StateHasChanged();

        _searchText = text;
        if(string.IsNullOrWhiteSpace(_searchText))
        {
            _rootItems = await browser.BrowseAsync(_team?.Id, _project?.Id, null);
        }
        else
        {
            _rootItems = await browser.SearchAsync(_team?.Id, _project?.Id, _searchText);
        }

        _isSearching = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_rootItems.Count == 0 || _project != Project || _team != Team)
        {
            _team = Team;
            _project = Project;
            _selectedTreeItem = null;
            if (Project is not null && Team is not null)
            {
                _rootItems = await browser.BrowseAsync(_team?.Id, _project?.Id, null);
            }
        }
    }
}
