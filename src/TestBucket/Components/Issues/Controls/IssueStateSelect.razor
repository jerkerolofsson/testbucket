@using TestBucket.Contracts.Issues.States
@using TestBucket.Contracts.Requirements.States
@using TestBucket.Contracts.Testing.Models
@using TestBucket.Contracts.Testing.States
@using TestBucket.Domain.States
@inject ProjectController controller
@inject IStringLocalizer<StateStrings> loc

<MudSelect Variant="Variant.Outlined" T="IssueState" Value="@State" ValueChanged="OnStateChanged">
    @foreach (var state in _states)
    {
        <MudSelectItem Value="@state">
            @if (state.MappedState == MappedIssueState.Other)
            {
                @state.Name
            }
            else
            {
                var name = state.MappedState.ToString().ToLower();
                @loc[name]
            }
        </MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter] public long TestProjectId { get; set; }
    [Parameter] public IssueState? State { get; set; }
    [Parameter] public EventCallback<IssueState?> StateChanged { get; set; }

    private IReadOnlyList<IssueState> _states = [];

    protected override async Task OnInitializedAsync()
    {
        _states = await controller.GetIssueStatesAsync(TestProjectId);
    }

    private async Task OnStateChanged(IssueState? state)
    {
        await StateChanged.InvokeAsync(state);
    }
}
