@using MudBlazor.Utilities
@using TestBucket.Contracts.Appearance.Models
@if(!CanClose)
{
    <MudChip T="string" Value="@Text" Class="tb-chip" Style="@Style" Size="@Size" />

}
else
{
    <MudChip T="string" Value="@Text" Class="tb-chip" Style="@Style" Size="@Size" OnClose="async () => await OnClose.InvokeAsync(this)"/>
}

@code {
    [Parameter] public Size Size { get; set; } = Size.Small;
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string Color { get; set; } = "#777";
    [Parameter] public EventCallback<Chip> OnClose { get; set; }
    [Parameter] public bool CanClose { get; set; }
    [Parameter] public bool ColorFromTextHash { get; set; }
    [Parameter] public ThemePalette? Palette { get; set; }

    private string _textColor = "";
    private string _borderColor = "";
    private string _backgroundColor = "";

    private string Style => $"background: {_backgroundColor}; border-style: solid; border-width: 1px; border-color: {_borderColor}; color: {_textColor}";

    protected override void OnParametersSet()
    {
        ThemeColor color = Color;
        if (ColorFromTextHash && Palette is not null && Palette.Colors.Count > 0)
        {
            if(Text is not null)
            {
                var hash = Math.Abs(Text.GetHashCode()) % Palette.Colors.Count;
                color = Palette.Colors[hash];
            }
        }
        _textColor = color.ColorLighten(0.3).ToString(ColorOutputFormats.Hex);
        _borderColor = color.ToString(ColorOutputFormats.Hex);
        _backgroundColor = color.ColorDarken(0.2).ToString(ColorOutputFormats.Hex);
    }
}
