@if (Field?.FieldDefinition is not null)
{
    bool row = Field.FieldDefinition.Type == FieldType.Boolean;

    <MudTooltip Text="@Field.FieldDefinition.Description">
        <Field>
            <MudStack Spacing="0" Row="@row">
                <FieldHeader>@Field.FieldDefinition.Name</FieldHeader>

                @if (Field.FieldDefinition.WriteOnly)
                {
                    @if(_editingWriteOnlyField)
                    {
                        <FieldValueEditor Field="@Field" FieldChanged="async (f) => await OnWriteOnlyFieldChangedAsync(f)" />
                    }
                    else
                    {
                        <MudStack Row Style="width: 100%">
                            <MudText Class="tb-write-only-field">****</MudText>
                            <MudSpacer/>
                            <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="EditField">Change</MudButton>
                        </MudStack>
                    }

                }
                else if (Field.FieldDefinition.ReadOnly)
                {
                    <FieldReadOnlyValue Field="@Field" />
                }
                else
                {
                    <FieldValueEditor Field="@Field" FieldChanged="async (f) => await FieldChanged.InvokeAsync(f)" />
                }
            </MudStack>

            @if (Field.FieldDefinition.ShowDescription)
            {
                <FieldDescription>@Field.FieldDefinition.Description</FieldDescription>
            }

        </Field>
    </MudTooltip>
}

@code {
    [Parameter] public FieldValue? Field { get; set; }
    [Parameter] public EventCallback<FieldValue?> FieldChanged { get; set; }

    private bool _editingWriteOnlyField = false;

    private void EditField()
    {
        if(Field is not null)
        {
            Field.DoubleValue = null;
            Field.StringValuesList = [];
            Field.StringValue = null;
            Field.BooleanValue = null;
            Field.LongValue = null;
        }
        _editingWriteOnlyField = true;
    }

    private async Task OnWriteOnlyFieldChangedAsync(FieldValue field)
    {
        _editingWriteOnlyField = false;
        await FieldChanged.InvokeAsync(field);
    }

    protected override void OnParametersSet()
    {
        if (Field?.FieldDefinition is not null)
        {
            Field.StringValuesList ??= [];
        }
    }
}
