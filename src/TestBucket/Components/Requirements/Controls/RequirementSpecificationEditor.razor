@using MudBlazor.Utilities
@inject RequirementEditorController editor
@inject IStringLocalizer<SharedStrings> loc

@if(Specification is not null)
{
    <div class="container-fill-2-rows">
        <MudToolBar Class="tb-toolbar">

            @if(_editor is not null)
            {
                <MudButton Class="@EditButtonClassname" OnClick="async () => await _editor.SetPreviewAsync(false)">@loc["edit"]</MudButton>
                <MudButton Class="@(PreviewButtonClassname)" OnClick="async () => await SaveChangesAsync()">@loc["preview"]</MudButton>
            }

            @if (!_preview && _editor is not null)
            {
                <MudTextField Variant="Variant.Outlined" Label="Name" AdornmentColor="Color.Tertiary" Value="@Specification.Name" ValueChanged="OnNameChanged" T="string" AutoFocus="true" />

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
            }
            else
            {
                <MudText Typo="Typo.h3"  Class="mr-3">@Specification.Name</MudText>
            }
        </MudToolBar>

        <MarkdownEditor 
            @ref="_editor"
            @bind-Preview="_preview"
            ShowToolbar="false"
            MaxHeight="100%"
            Color="Color.Primary"
            AllowResize="true"
            Value="@Specification.Description"
            ValueChanged="OnDescriptionChanged"
            SpellChecker="false">
            </MarkdownEditor>
    </div>
}

@code {
    [Parameter] public RequirementSpecification? Specification { get;set; }
    private MarkdownEditor? _editor;
    private bool _preview = true;

    [Parameter] public Color Color { get; set; } = Color.Surface;
    [Parameter] public Color ColorAlt { get; set; } = Color.Tertiary;

    protected string EditButtonClassname =>
    new CssBuilder("mud-markdown-toolbar-toggle-button")
    .AddClass($"mud-{ColorAlt.ToDescriptionString()}-selected", Color != Color.Default && Color != Color.Inherit)
    .AddClass($"mud-markdown-toolbar-toggle-button-selected", _preview != true)
    .Build();

    protected string PreviewButtonClassname =>
        new CssBuilder("mud-markdown-toolbar-toggle-button")
            .AddClass($"mud-{ColorAlt.ToDescriptionString()}-selected", Color != Color.Default && Color != Color.Inherit)
            .AddClass($"mud-markdown-toolbar-toggle-button-selected", _preview == true)
            .AddClass(" mr-5", true)
            .Build();
    private void BeginEdit()
    {
        _preview = false;
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        if (Specification is not null)
        {
            await editor.SaveRequirementSpecificationAsync(Specification);
        }
    }


    private void OnNameChanged(string name)
    {
        if(Specification is null)
        {
            return;
        }
        Specification.Name = name;
    }

    private void OnDescriptionChanged(string description)
    {
        if (Specification is null)
        {
            return;
        }
        Specification.Description = description;
    }
}
