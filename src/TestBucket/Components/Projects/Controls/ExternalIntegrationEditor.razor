@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Components.Uploads.Controls
@using TestBucket.Contracts.Integrations
@using TestBucket.Contracts.Projects
@using TestBucket.Domain.Files.Models
@using TestBucket.Domain.Teams.Models
@inject ProjectController projectService
@inject IStringLocalizer<IntegrationStrings> loc

@if (Name is not null)
{
    <MudPaper Class="mb-3 pa-3">
        <MudStack>
            <MudStack Row AlignItems="AlignItems.Center" Class="tb-integration-title mb-5">
                @if (Icon is not null)
                {
                    <MudIcon Size="Size.Large" Icon="@Icon" />
                }
                <MudText Typo="Typo.h1">@(Extension?.FriendlyName ?? Name)</MudText>
            </MudStack>

            @if(Extension is not null)
            {
                <MudText Class="mb-3">@Extension?.Description</MudText>
            }

            @if(Integration is null)
            {
                <MudText Style="font-weight: bold">@loc["no-integration"]</MudText>

                <MudStack Row Class="mt-5">
                    <MudButton Variant="Variant.Outlined" OnClick="AddAsync">@loc["add-integration"]</MudButton>
                </MudStack>
            }
            else
            {
                <Field Row>
                    <FieldHeader>@loc["name"]</FieldHeader>
                    <MudSpacer/>
                    <MudTextField Value="Integration.Name" T="string" ValueChanged="NameChanged" />
                </Field>

                @if(Extension is not null && (Extension.RequiredFields&ExtensionFields.BaseUrl) == ExtensionFields.BaseUrl)
                {
                    <Field Row>
                        <FieldHeader>@loc["integration-base-url"]</FieldHeader>
                        <MudSpacer/>
                        <MudTextField Value="Integration.BaseUrl" T="string" ValueChanged="BaseUrlChanged" />
                    </Field>
                }
                <Field Row>
                    <FieldHeader>@loc["project-id"]</FieldHeader>
                    <MudSpacer />
                    <MudTextField 
                    Value="Integration.ExternalProjectId" 
                    T="string" 
                    ValueChanged="ExternalProjectIdChanged" 
                    HelperText="@Extension?.ProjectIdHelperText" />
                </Field>

                @if(Extension is not null && (Extension.RequiredFields&ExtensionFields.AccessToken) == ExtensionFields.AccessToken)
                {
                    <Field Row>
                        <FieldHeader>@loc["access-token"]</FieldHeader>
                        <MudSpacer />
                        @* InputType="InputType.Password"  *@
                        <MudTextField 
                        Value="Integration.AccessToken" 
                        T="string" 
                        ValueChanged="AccessTokenChanged"
                        HelperText="@Extension?.AccessTokenHelperText" />
                    </Field>
                }

                @if (Extension is not null && (Extension.RequiredFields & ExtensionFields.ApiKey) == ExtensionFields.ApiKey)
                {
                    <Field Row>
                        <FieldHeader>@loc["api-key"]</FieldHeader>
                        <MudSpacer />
                        @* InputType="InputType.Password"  *@
                        <MudTextField 
                        Value="Integration.ApiKey" 
                        T="string" 
                        ValueChanged="ApiKeyChanged"/>
                    </Field>
                }

                <Field Row>
                    <FieldHeader>@loc["enabled"]</FieldHeader>
                    <MudSpacer />
                    <MudSwitchM3 Color="Color.Primary" T="bool" Value="Integration.Enabled" ValueChanged="EnabledChanged" />
                </Field>

                @if(Extension is not null)
                {
                    if((Extension.SupportedCapabilities&ExternalSystemCapability.ReadPipelineArtifacts) == ExternalSystemCapability.ReadPipelineArtifacts)
                    {

                        <Field Row>
                            <FieldHeader>@loc["test-result-artifact-pattern"]</FieldHeader>
                            <MudSpacer />
                            <MudTextField InputType="InputType.Text"
                            Value="Integration.TestResultsArtifactsPattern"
                            T="string"
                            ValueChanged="TestResultsArtifactsPatternChanged"
                            HelperText="@loc["test-result-artifact-pattern-helper-text"]" />
                        </Field>
                    }

                    ExternalSystemCapability[] capabilities = [ExternalSystemCapability.CreatePipeline, ExternalSystemCapability.CreateIssues, ExternalSystemCapability.GetIssues, ExternalSystemCapability.GetMilestones, ExternalSystemCapability.GetReleases, ExternalSystemCapability.GetRequirements, ExternalSystemCapability.ReadCodeRepository];
                    string[] labels = ["create-pipeline", "create-issues", "get-issues", "get-milestones", "get-releases", "get-requirements", "read-repository"];

                    @for(int i=0; i<Math.Min(capabilities.Length, labels.Length); i++)
                    {
                        <ExternalSystemCapabilityField SupportedCapabilities="@Extension.SupportedCapabilities"
                        EnabledCapabilities="@Integration.EnabledCapabilities"
                        Title="@loc[labels[i]]"
                        OnEnabled="OnEnabledAsync"
                        OnDisabled="OnDisabledAsync"
                        Capability="@capabilities[i]" />
                    }

                    <MudText Class="mt-3" Style="opacity: 0.4">@Extension.FriendlyName @Extension.Version</MudText>
                }
            }
        </MudStack>
    </MudPaper>
}

@code {
    [Parameter] public EventCallback<ExternalSystem> IntegrationChanged { get; set; }
    [Parameter] public ExternalSystem? Integration { get; set; }
    [Parameter] public IExtension? Extension { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Name { get; set; }

    protected override void OnInitialized()
    {
        if (Extension is not null && Integration is not null)
        {
            Integration.SupportedCapabilities = Extension.SupportedCapabilities;
        }
    }

    private async Task ExternalProjectIdChanged(string externalProjectId)
    {
        if (Integration is not null)
        {
            Integration.ExternalProjectId = externalProjectId;
            if (Extension is not null)
            {
                Integration.SupportedCapabilities = Extension.SupportedCapabilities;
            }
            await OnChangedAsync();
        }
    }
        private async Task NameChanged(string name)
    {
        if (Integration is not null)
        {
            Integration.Name = name;
            await OnChangedAsync();
        }
    }
    private async Task BaseUrlChanged(string baseUrl)
    {
        if (Integration is not null)
        {
            Integration.BaseUrl = baseUrl;
            await OnChangedAsync();
        }
    }
    private async Task ApiKeyChanged(string apiKey)
    {
        if (Integration is not null)
        {
            Integration.ApiKey = apiKey;
            await OnChangedAsync();
        }
    }
    private async Task AccessTokenChanged(string accessToken)
    {
        if (Integration is not null)
        {
            Integration.AccessToken = accessToken;
            await OnChangedAsync();
        }
    }
    private async Task TestResultsArtifactsPatternChanged(string pattern)
    {
        if (Integration is not null)
        {
            Integration.TestResultsArtifactsPattern = pattern;
            await OnChangedAsync();
        }
    }
    private async Task EnabledChanged(bool value)
    {
        if (Integration is not null)
        {
            Integration.Enabled = value;
            await OnChangedAsync();
        }
    }
    private async Task OnDisabledAsync(ExternalSystemCapability capability)
    {
        if (Integration is not null)
        {
            Integration.EnabledCapabilities &= ~capability;
            await OnChangedAsync();
        }
    }

    private async Task OnEnabledAsync(ExternalSystemCapability capability)
    {
        if (Integration is not null)
        {
            Integration.EnabledCapabilities |= capability;
            await OnChangedAsync();
        }
    }

    private async Task OnChangedAsync()
    {
        await IntegrationChanged.InvokeAsync(Integration);
    }
    private async Task AddAsync()
    {
        if(this.Name is null) 
        {
            return;
        }

        await IntegrationChanged.InvokeAsync(new ExternalSystem
            {
                Name = this.Name,
                BaseUrl = Extension?.DefaultBaseUrl,
                Enabled = false,
                TestResultsArtifactsPattern = "**/*.xml;**/*.trx;**/*.ctrf",
                SupportedCapabilities = Extension?.SupportedCapabilities ?? ExternalSystemCapability.None
            });
    }
}
