@attribute [Authorize()]
@page "/{TenantId}/Code/Layers"
@using TestBucket.Components.Code.Controls
@using TestBucket.Domain
@using TestBucket.Domain.Code.Models
@layout RequirementsLayout
@inject ArchitectureController architectureController
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<CodeStrings> codeLoc
@inject AuthenticationStateProvider authenticationStateProvider 

@if (_project is not null)
{
    <MudDataGrid 
        @ref="_grid"
        ServerData="LoadGridData"
        Dense Hover RowClass="tb-datarow cursor-pointer"
        RowClick="async (row) => await OnRowClicked(row.Item)"
        T="ArchitecturalLayer" SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudIcon Icon="@TbIcons.BoldDuoTone.Layers" Size="Size.Large" />
                <MudText Typo="Typo.h2">@codeLoc["layers"]</MudText>
                <MudSpacer />
                <PermissionView Entity="PermissionEntityType.Architecture" Level="PermissionLevel.Write">
                    <Authorized>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddAsync"></MudIconButton>
                    </Authorized>
                </PermissionView>
            </MudStack>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 30%" />
            <col style="width: 30%;" />
            <col style="width: 30%;" />
            <col style="width: 10%;" />
        </ColGroup>

        <Columns>
            <TemplateColumn Title="@loc["name"]">
                <CellTemplate>
                    @context.Item.Name
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="@codeLoc["dev-lead"]">
                <CellTemplate>
                    @context.Item.DevLead
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="@codeLoc["test-lead"]">
                <CellTemplate>
                    @context.Item.TestLead
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn>
                <CellTemplate>
                    <PermissionView Entity="PermissionEntityType.Architecture" Level="PermissionLevel.Delete">
                        <Authorized>
                            <MudIconButton OnClick="async() => await DeleteAsync(context.Item)" Color="Color.Error" Icon="@Icons.Material.Filled.Clear" />
                        </Authorized>
                    </PermissionView>

                </CellTemplate>
            </TemplateColumn>
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Component" />
        </PagerContent>
    </MudDataGrid>
}
   

@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    private TestProject? _project;
    private IReadOnlyList<ArchitecturalLayer> _components = [];
    private MudDataGrid<ArchitecturalLayer>? _grid;

    private async Task AddAsync()
    {
        await architectureController.AddLayerAsync();
        await LoadAsync();
    }

    private async Task OnRowClicked(ArchitecturalLayer component)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.HasPermission(PermissionEntityType.Architecture, PermissionLevel.Write))
        {
            await architectureController.EditLayerAsync(component);
            await LoadAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if(_project?.Id != Project?.Id && Project is not null)
        {
            _project = Project;
            _components = await architectureController.GetLayersAsync(Project.Id);
            _grid?.ReloadServerData();
        }
    }

    protected async Task DeleteAsync(ArchitecturalLayer item)
    {
        await architectureController.DeleteLayerAsync(item);
    }

    /// <summary>
    /// Loads commit data
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    private Task<GridData<ArchitecturalLayer>> LoadGridData(GridState<ArchitecturalLayer> state)
    {
        if (Project is null)
        {
            return Task.FromResult(new GridData<ArchitecturalLayer> { TotalItems = 0 });
        }

        var page = _components.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        GridData<ArchitecturalLayer> data = new()
        {
            Items = page,
            TotalItems = (int) _components.Count
        };

        return Task.FromResult(data);
    }
}