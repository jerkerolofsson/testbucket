@page "/{TenantId}/Account/Login"
@using TestBucket.Components.Account.Shared
@layout EmptyLayout
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject TenantController tenantController

<PageTitle>Log in</PageTitle>

@{
    string resendEmailUrl = $"/{TenantId}/Account/ResendEmailConfirmation";
    string forgotPasswordUrl = $"/{TenantId}/Account/ForgotPassword";

}

<MudPaper Class="tb-login-container account-page" Style="min-width: 400px">
    <section>
        <MudText Typo="Typo.h1" Color="Color.Tertiary">Login to TestBucket</MudText>
        <MudText>Enter your email and password to login.</MudText>

        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <MudStack Spacing="0" Class="mt-5">
                <InputText data-testid="email" @bind-Value="Input.Email" id="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </MudStack>
            <MudStack Spacing="0" Class="mt-3">
                <InputText data-testid="password" type="password" @bind-Value="Input.Password" id="Input.Password" autocomplete="current-password" aria-required="true" placeholder="Password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </MudStack>

            <MudStack Spacing="1" Row Class="mt-3">
                <InputCheckbox @bind-Value="Input.RememberMe"></InputCheckbox>
                Remember Me
            </MudStack>

            <MudStack Row Class="mt-3">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Log in</MudButton>
            </MudStack>
                    
            <div>
                <p>
                    <a href="@forgotPasswordUrl">Forgot your password?</a>
                </p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters($"/{TenantId}/Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </p>
                <p>
                    <a href="@resendEmailUrl">Resend email confirmation</a>
                </p>
            </div>
        </EditForm>
    </section>
</MudPaper>

@code {
    private string? errorMessage;

    [Parameter] public string TenantId { get; set; } = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery(Name = "u")]
    private string? UserName { get; set; }

    [SupplyParameterFromQuery(Name = "p")]
    private string? Password { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        var tenantExists = await tenantController.ExistsAsync(TenantId);
        if(!tenantExists)
        {
            var defaultTenant = await tenantController.GetDefaultTenantAsync();
            NavigationManager.NavigateTo($"/{defaultTenant}/Account/Login", true);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo($"/{TenantId}");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                $"/{TenantId}/Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo($"/{TenantId}/Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
