@using TestBucket.Components.Account.Shared
@using TestBucket.Components.Users
@using TestBucket.Data.Identity
@attribute [Authorize(Roles = "SUPERADMIN")]
@inject TenantService tenantService
@inject ISuperAdminUserService userService

<EditForm Model="@_model" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <TitleContent>Add new administrator account</TitleContent>
        <DialogContent>
            <MudStack>
                <MudStack Spacing="0">

                    <MudText Typo="Typo.h1">Add Administrator</MudText>

                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <Field>
                        <FieldHeader>Email</FieldHeader>
                        <MudTextField AutoFocus="true" Variant="Variant.Outlined" T="string" @bind-Value="@_model.Email"></MudTextField>
                        <ValidationMessage For="() => _model.Email" class="text-danger" />
                    </Field>

                    <Field>
                        <FieldHeader>Password</FieldHeader>
                        <MudTextField AutoFocus="true" Variant="Variant.Outlined" T="string" InputType="InputType.Password" @bind-Value="@_model.Password"></MudTextField>
                        <ValidationMessage For="() => _model.Password" class="text-danger" />
                    </Field>

                    <Field>
                        <FieldHeader>Confirm Password</FieldHeader>
                        <MudTextField AutoFocus="true" Variant="Variant.Outlined" T="string" InputType="InputType.Password" @bind-Value="@_model.ConfirmPassword"></MudTextField>
                        <ValidationMessage For="() => _model.ConfirmPassword" class="text-danger" />
                    </Field>


                    @_errorMessage

                </MudStack>
            </MudStack>
        </DialogContent>

        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">OK</MudButton>
            <MudButton OnClick="Close">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {

    [Parameter] public string? TenantId { get; set; }

    private sealed class InputModel
    {

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    private InputModel _model = new();
    private IEnumerable<IdentityError> _identityErrors = [];
    private string? _errorMessage => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private async Task<IdentityResult> RegisterUserAsync(string tenantId)
    {
        try
        {
            var result = await userService.RegisterAndConfirmUserAsync(tenantId, _model.Email, _model.Password);
            if(!result.Succeeded)
            {
                return result;
            }
            await userService.AssignRoleAsync(tenantId, _model.Email, Roles.ADMIN);
        }
        catch(Exception ex)
        {
            return IdentityResult.Failed(new IdentityError() { Description = ex.Message });
        }
        return IdentityResult.Success;
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private async Task OnValidSubmitAsync()
    {
        await tenantService.GuardAsync();

        var result = await RegisterUserAsync(TenantId ?? throw new Exception("TenantId is null"));
        if(result.Succeeded)
        {
            MudDialog.Close();
        }
        else
        {
            _identityErrors = result.Errors;
        }
    }
}
