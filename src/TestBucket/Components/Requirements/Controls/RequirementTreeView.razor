@using TestBucket.Components.Shared.Tree
@using TestBucket.Domain.AI.Agent.Models
@using TestBucket.Domain.Requirements

@implements IRequirementObserver
@implements IDisposable
@inject RequirementBrowser browser
@inject RequirementEditorController editor
@inject IRequirementManager manager
@inject AppNavigationManager appNav
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<RequirementStrings> reqLoc
@inject UserPreferencesService userPreferencesService

<MudStack Spacing="0" Style="width: 100%;">
    <MudStack Row="true" class="tb-treeview-toolbar" Spacing="0">

        <MudStack Row="true" Class="pr-2 pl-2" Style="width: 100%" Spacing="0" AlignItems="AlignItems.Center">
            <MudTextField 
            Placeholder="@reqLoc["search"]"
            Class="default-search"
            Clearable
            Variant="Variant.Outlined"
            Adornment="Adornment.Start" T="string" AdornmentIcon="@Icons.Material.Filled.Search" Value="_searchText" ValueChanged="OnSearchTextChangedAsync" />

            <MudSpacer />

            @if (appNav.State.SelectedRequirement is not null)
            {
                <MudIconButton Size="Size.Small" Class="rounded-0" OnClick="SyncWithActiveDocumentAsync" Icon="@Icons.Material.Rounded.CompareArrows" />
            }

            <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert">
                <CommandMenuItems TypeNames="menu-requirements Requirement RequirementFolder RequirementSpecification" />
            </MudMenu>
        </MudStack>
    </MudStack>

    @if (_isSearching)
    {
        <MudProgressLinear Indeterminate Color="Color.Secondary"/>
    }
    else
    {
        <TreeView 
        Class="pa-2"
        ItemEdited="OnRenamed"
        ItemEditCanceled="OnItemEditCanceled"
        EditItem="@_editItem"
        T="BrowserItem"
        SelectedValue="@_selectedTreeItem"
        SelectedValueChanged="OnSelectedValueChangedAsync"
        Color="Color.Tertiary"
        ServerData="@LoadServerData"
        Items="@_rootItems">

            <ItemTemplate>

                @{
                    string style = "";
                    if (context.Value?.Color is not null)
                    {
                        style += $"color: {context.Value.Color}";
                    }
                }

                <DropZone T="RequirementEntity" OnDrop="(test) => OnDrop(test, context)">
                    <MudMenu ActivationEvent="@MouseEvent.RightClick" Dense="true" OpenChanged="() => OnMenuOpened(context)">
                        <ActivatorContent>
                            @if (context.Value?.Requirement is not null)
                            {
                                <Draggable T="RequirementEntity" Data="@context.Value.Requirement">

                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Style="width: 100%">
                                        <span><MudHighlighter Text="@context.Text" HighlightedText="@_searchText" /></span>
                                        <MudSpacer/>

                                        @if(_prefTextToIcons)
                                        {
                                            <MudText Typo="Typo.subtitle2">@context.Value.Requirement.State</MudText>
                                        }
                                        else
                                        {
                                            <RequirementStateDot Style="padding-right: 4px" State="context.Value.Requirement.MappedState"/>
                                        }
                                    </MudStack>
                                </Draggable>
                            }
                            else if (context.Value?.RequirementFolder is not null)
                            {
                                <Draggable T="RequirementEntity" Data="@context.Value.RequirementFolder">
                                    @context.Text
                                </Draggable>
                            }
                            else
                            {
                                @context.Text
                            }
                        </ActivatorContent>
                        <ChildContent>
                            @if (context.Value?.Requirement is not null)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                            }
                            else if (context.Value?.RequirementFolder is not null)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                            }
                            else if (context.Value?.RequirementSpecification is not null)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">@loc["rename"]</MudMenuItem>
                            }

                            <CommandMenuItems TypeNames="menu-requirements Requirement RequirementFolder RequirementSpecification" />
                        </ChildContent>
                    </MudMenu>
                </DropZone>
            </ItemTemplate>
        </TreeView>
    }
</MudStack>


@code {
    /// <summary>
    /// Instance of the tree view UI
    /// </summary>
    //private MudTreeView<BrowserItem> _treeView = default!;

    /// <summary>
    /// Root items in the tree view
    /// </summary>
    private List<TreeNode<BrowserItem>> _rootItems = [];

    /// <summary>
    /// currently selected item
    /// </summary>
    private BrowserItem? _selectedTreeItem;

    /// <summary>
    /// Invoked when a specification is clicked
    /// </summary>
    [Parameter] public EventCallback<RequirementSpecification> OnSpecificationClicked { get; set; }

    /// <summary>
    /// Invoked when a specification is clicked
    /// </summary>
    [Parameter] public EventCallback<Requirement> OnRequirementClicked { get; set; }

    /// <summary>
    /// Invoked when a folder is clicked
    /// </summary>
    [Parameter] public EventCallback<RequirementSpecificationFolder> OnFolderClicked { get; set; }

    [Parameter] public TestProject? Project { get; set; }

    [Parameter] public Team? Team { get; set; }

    private bool _isSearching = false;

    private TreeNode<BrowserItem>? _editItem;

    private bool _prefTextToIcons = false;

    protected override async Task OnInitializedAsync()
    {
        appNav.State.ActiveDocumentChanged += OnActiveDocumentChanged;

        var userPreferences = await userPreferencesService.GetUserPreferencesAsync();
        _prefTextToIcons = userPreferences?.PreferTextToIcons ?? false;
    }

    private void OnActiveDocumentChanged(object? sender, ChatReference? doc)
    {
        // Trigger update as the sync-active-document state may have changed
        InvokeAsync(this.StateHasChanged);
    }

    private void BeginRename(TreeNode<BrowserItem> item)
    {
        _editItem = item;
    }

    private void OnItemEditCanceled()
    {
        _editItem = null;
    }

    private async Task OnRenamed(string text)
    {
        if(_editItem is not null)
        {
            if(_editItem.Value?.Requirement is not null)
            {
                _editItem.Text = text;
                _editItem.Value.Requirement.Name = text;
                await editor.SaveRequirementAsync(_editItem.Value.Requirement);
            }
            if (_editItem.Value?.RequirementFolder is not null)
            {
                _editItem.Text = text;
                _editItem.Value.RequirementFolder.Name = text;
                await editor.SaveRequirementSpecificationFolderAsync(_editItem.Value.RequirementFolder);
            }
            if (_editItem.Value?.RequirementSpecification is not null)
            {
                _editItem.Text = text;
                _editItem.Value.RequirementSpecification.Name = text;
                await editor.SaveRequirementSpecificationAsync(_editItem.Value.RequirementSpecification);
            }
        }
        _editItem = null;
    }

    private async Task OnSelectedValueChangedAsync(BrowserItem? item)
    {
        _selectedTreeItem = item;
        if (item is not null)
        {

            if (item.Href is not null)
            {
                appNav.NavigateTo(item.Href);
                return;
            }
            else if (item.Requirement is not null)
            {
                appNav.State.SetSelectedRequirement(item.Requirement);
                await OnRequirementClicked.InvokeAsync(item.Requirement);
            }
            else if (item.RequirementSpecification is not null)
            {
                appNav.State.SetSelectedRequirementSpecification(item.RequirementSpecification);
                await OnSpecificationClicked.InvokeAsync(item.RequirementSpecification);
            }
            else if (item.RequirementFolder is not null)
            {
                appNav.State.SetSelectedRequirementSpecificationFolder(item.RequirementFolder);

                if(item.RequirementFolder.RequirementSpecificationId != appNav.State.SelectedRequirementSpecification?.Id)
                {
                    var spec = await browser.GetRequirementSpecificationByIdAsync(item.RequirementFolder.RequirementSpecificationId);
                    appNav.State.SetSelectedRequirementSpecificationFolder(item.RequirementFolder, spec);

                }
                await OnFolderClicked.InvokeAsync(item.RequirementFolder);
            }
        }
    }

    #region Lifecycle

    protected override void OnInitialized()
    {
        manager.AddObserver(this);
    }

    public void Dispose()
    {
        manager.RemoveObserver(this);
        appNav.State.ActiveDocumentChanged -= OnActiveDocumentChanged;
    }

    #endregion Lifecycle

    private void SetRootItems(List<TreeNode<BrowserItem>> rootItems)
    {
        // Copy state and children from existing nodes
        foreach (var item in rootItems)
        {
            var existing = _rootItems.FirstOrDefault(x => x.Text == item.Text);
            if (existing is not null)
            {
                item.Expanded = existing.Expanded;
                item.Expandable = existing.Expandable;

                if (existing.Children is not null && item.Children is not null)
                {
                    foreach(var existingChild in existing.Children)
                    {
                        var itemChild = item.Children.Where(x=>x.Value?.RequirementSpecification == existingChild.Value?.RequirementSpecification).FirstOrDefault();
                        if(itemChild is not null)
                        {
                            itemChild.Children = existingChild.Children;
                            itemChild.Expanded = existingChild.Expanded;
                        }
                    }
                }
            }
        }

        _rootItems = rootItems;
        this.StateHasChanged();
    }

    public async Task OnFolderCreatedAsync(RequirementSpecificationFolder folder)
    {
        if (folder.ParentId is null)
        {
            // The test case is in the root of a test suite
            var node = FindTreeNode(x => x.RequirementSpecification?.Id == folder.RequirementSpecificationId);
            if (node?.Children is not null)
            {
                var childNode = browser.CreateTreeNodeFromFolder(folder);
                if (node.Children is null)
                {
                    node.Children = [childNode];
                }
                else
                {
                    node.Children = [.. node.Children, childNode];
                }
                await InvokeAsync(StateHasChanged);
            }
        }
        else if (folder.ParentId is not null)
        {
            // Added within a folder
            var parentFolder = FindTreeNode(x => x.RequirementFolder?.Id == folder.ParentId);
            if (parentFolder?.Children is not null)
            {
                var childNode = browser.CreateTreeNodeFromFolder(folder);
                if (parentFolder.Children is null)
                {
                    parentFolder.Children = [childNode];
                }
                else
                {
                    parentFolder.Children = [.. parentFolder.Children, childNode];
                }
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public async Task OnRequirementCreatedAsync(Requirement requirement)
    {
        if (requirement.RequirementSpecificationFolderId is null)
        {
            // The test case is in the root of a test suite
            var node = FindTreeNode(x => x.RequirementSpecification?.Id == requirement.RequirementSpecificationId);
            if (node?.Children is not null)
            {
                var childNode = browser.CreateRequirementNode(requirement);
                if (node.Children is null)
                {
                    node.Children = [childNode];
                }
                else
                {
                    node.Children = [.. node.Children, childNode];
                }
                await InvokeAsync(StateHasChanged);
            }
        }
        else if (requirement.RequirementSpecificationFolderId is not null)
        {
            // Added within a folder
            var folder = FindTreeNode(x => x.RequirementFolder?.Id == requirement.RequirementSpecificationFolderId);
            if (folder?.Children is not null)
            {
                var childNode = browser.CreateRequirementNode(requirement);
                if (folder.Children is null)
                {
                    folder.Children = [childNode];
                }
                else
                {
                    folder.Children = [.. folder.Children, childNode];
                }
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    public async Task OnRequirementFieldChangedAsync(Requirement requirement)
    {
        await InvokeAsync(() =>
        {
            var node = FindTreeNode(x => x.Requirement?.Id == requirement?.Id);
            if (node?.Value is not null)
            {
                node.Text = requirement.Name;
                node.Value.Requirement = requirement;
                this.StateHasChanged();
            }
        });
    }
    public async Task OnRequirementSavedAsync(Requirement requirement)
    {
        await InvokeAsync(() =>
        {
            var node = FindTreeNode(x => x.Requirement?.Id == requirement?.Id);
            if (node?.Value is not null)
            {
                node.Text = requirement.Name;
                node.Value.Requirement = requirement;
                this.StateHasChanged();
            }
        });
    }
    public async Task OnFolderSavedAsync(RequirementSpecificationFolder folder)
    {
        await InvokeAsync(() =>
        {
            var node = FindTreeNode(x => x.RequirementFolder?.Id == folder?.Id);
            if (node?.Value is not null)
            {
                node.Text = folder.Name;
                node.Value.RequirementFolder = folder;
                this.StateHasChanged();
            }
        });
    }
    /// <summary>
    /// Invoked when a folder has been deleted
    /// </summary>
    /// <param name="folder"></param>
    /// <returns></returns>
    public async Task OnFolderDeletedAsync(RequirementSpecificationFolder folder)
    {
        await InvokeAsync(() =>
        {
            RemoveTreeNode(x => x.RequirementFolder == folder);
            this.StateHasChanged();
        });
    }
    /// <summary>
    /// Invoked when a requirement has been deleted
    /// </summary>
    /// <param name="requirement"></param>
    /// <returns></returns>
    public async Task OnRequirementDeletedAsync(Requirement requirement)
    {
        await InvokeAsync(() =>
        {
            RemoveTreeNode(x => x.Requirement == requirement);
            this.StateHasChanged();
        });
    }
    private TreeNode<BrowserItem>? RemoveTreeNode(Predicate<BrowserItem> predicate)
    {
        return TreeView<BrowserItem>.RemoveTreeNode(null, _rootItems, predicate);
    }

    private TreeNode<BrowserItem>? FindTreeNode(Predicate<BrowserItem> predicate)
    {
        return TreeView<BrowserItem>.FindTreeNode(_rootItems, predicate);
    }


    public async Task OnSpecificationCreatedAsync(RequirementSpecification spec)
    {
        var node = FindTreeNode(x => x.VirtualFolderName == RequirementBrowser.FOLDER_SPECIFICATIONS);
        if (node?.Children is not null)
        {
            var childNode = browser.CreateSpecificationNode(spec);
            if (node.Children is null)
            {
                node.Children = [childNode];
            }
            else
            {
                node.Children = [.. node.Children, childNode];
            }
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task OnSpecificationDeletedAsync(RequirementSpecification spec)
    {
        RemoveTreeNode(x => x.RequirementSpecification?.Id == spec.Id);
        await InvokeAsync(StateHasChanged);
    }
    public async Task OnSpecificationSavedAsync(RequirementSpecification spec)
    {
        var node = FindTreeNode(x => x.RequirementSpecification?.Id == spec.Id);
        if(node?.Value is not null)
        {
            node.Value.RequirementSpecification = spec;
            node.Text = spec.Name;
            node.Icon = RequirementIcons.GetIcon(spec);
            node.IconColor = spec.Color;
            await InvokeAsync(StateHasChanged);
        }
    }


    public async Task<IReadOnlyCollection<TreeNode<BrowserItem>>> LoadServerData(BrowserItem? browserItem)
    {
        if (Project is null)
        {
            return [];
        }
        if(browserItem?.Href is not null)
        {
            return [];
        }

        return await browser.BrowseAsync(Team?.Id, Project?.Id, browserItem);
    }

    private async Task AddRequirementSpecificationAsync()
    {
        var spec = new RequirementSpecification()
        {
            Name = "New Specification",
            TenantId = Project?.TenantId ?? "",
            TestProjectId = Project?.Id,
            TeamId = Team?.Id,
        };

        await editor.AddRequirementSpecificationAsync(spec);
        appNav.NavigateTo(spec);
    }

    private async Task OnDrop(RequirementEntity? requirementEntity, TreeNode<BrowserItem>? targetNode)
    {
        if (requirementEntity is null || targetNode is null)
        {
            return;
        }
        var target = targetNode.Value;
        if (target is null)
        {
            return;
        }

        if (requirementEntity is Requirement requirement)
        {
            if (targetNode.Value?.RequirementSpecification is not null)
            {
                await editor.MoveRequirementToSpecificationAsync(requirement, targetNode.Value.RequirementSpecification);
            }
            else if (targetNode.Value?.RequirementFolder is not null)
            {
                await editor.MoveRequirementToFolderAsync(requirement, targetNode.Value.RequirementFolder);
            }

            // Remove the tree-node from the tree and add it to the new location
            RemoveTreeNode(x => x.Requirement?.Id == requirement.Id);
            if (targetNode.Children is not null)
            {
                targetNode.Children = [.. targetNode.Children, browser.CreateRequirementNode(requirement)];
            }
        }

        if (requirementEntity is RequirementSpecificationFolder folder)
        {
            if (targetNode.Value?.RequirementSpecification is not null)
            {
                await editor.MoveFolderToSpecificationAsync(folder, targetNode.Value.RequirementSpecification);
            }
            else if (targetNode.Value?.RequirementFolder is not null)
            {
                await editor.MoveFolderToFolderAsync(folder, targetNode.Value.RequirementFolder);
            }

            // Remove the tree-node from the tree and add it to the new location
            RemoveTreeNode(x => x.RequirementFolder?.Id == folder.Id);
            if (targetNode.Children is not null)
            {
                targetNode.Children = [.. targetNode.Children, browser.CreateTreeNodeFromFolder(folder)];
            }
        }
    }

    private TestProject? _project;
    private Team? _team;
    private string _searchText = "";

    private async Task OnSearchTextChangedAsync(string text)
    {
        _isSearching = true;
        this.StateHasChanged();

        _searchText = text;
        if(string.IsNullOrWhiteSpace(_searchText))
        {
            _rootItems = await browser.BrowseAsync(_team?.Id, _project?.Id, null);
        }
        else
        {
            _rootItems = await browser.SearchAsync(_team?.Id, _project?.Id, _searchText);
        }

        _isSearching = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_rootItems.Count == 0 || _project != Project || _team != Team)
        {
            _team = Team;
            _project = Project;
            _selectedTreeItem = null;
            if (Project is not null)
            {
                _rootItems = await browser.BrowseAsync(_team?.Id, _project?.Id, null);
            }
        }
    }

    /// <summary>
    /// If the user is right-clicking to open the menu we need to make sure we update the state so 
    /// the correct items can be shown
    /// </summary>
    /// <param name="treeNode"></param>
    /// <returns></returns>
    private async Task OnMenuOpened(TreeNode<BrowserItem> treeNode)
    {
        if(treeNode.Value?.Requirement is not null)
        {

            var requirement = treeNode.Value.Requirement;
            RequirementSpecificationFolder? folder = null;
            if (treeNode.Value.Requirement.ParentRequirementId is not null)
            {
                folder = await browser.GetRequirementFolderByIdAsync(treeNode.Value.Requirement.ParentRequirementId.Value);
            }
            var spec = await browser.GetRequirementSpecificationByIdAsync(treeNode.Value.Requirement.RequirementSpecificationId);

            appNav.State.SetSelectedRequirement(requirement, folder, spec);

        }
        if (treeNode.Value?.RequirementFolder is not null)
        {
            var folder = treeNode.Value.RequirementFolder;
            var spec = await browser.GetRequirementSpecificationByIdAsync(treeNode.Value.RequirementFolder.RequirementSpecificationId);
            appNav.State.SetSelectedRequirementSpecificationFolder(folder, spec);
        }
        if (treeNode.Value?.RequirementSpecification is not null)
        {
            appNav.State.SetSelectedRequirementSpecification(treeNode.Value.RequirementSpecification);
        }
    }

    internal async Task SyncWithActiveDocumentAsync()
    {
        if (appNav.State.SelectedRequirement is not null)
        {
            await GoToRequirementAsync(appNav.State.SelectedRequirement);
        }
    }

    internal async Task GoToRequirementAsync(Requirement requirement, bool invokeStateHasChanged = true)
    {
        // Find the test suite node
        var specificationNode = FindTreeNode(x => x.RequirementSpecification?.Id == requirement.RequirementSpecificationId);
        if (specificationNode is null)
        {
            return;
        }
        specificationNode.Expanded = true;
        if(specificationNode.Children is null)
        {
            var items = await browser.BrowseAsync(Team?.Id, Project?.Id, specificationNode.Value);
            specificationNode.Children = items;
            specificationNode.Expanded = true;
        }

        // Next traverse all folders
        if (requirement.PathIds is not null)
        {
            TreeNode<BrowserItem> parent = specificationNode;

            foreach (var folderId in requirement.PathIds)
            {
                var folderNode = FindTreeNode(x => x.RequirementFolder?.Id == folderId);
                if (folderNode is null)
                {
                    var items = await browser.BrowseAsync(Team?.Id, Project?.Id, parent.Value);
                    parent.Children = items;
                    parent.Expanded = true;
                    folderNode = FindTreeNode(x => x.RequirementFolder?.Id == folderId);
                }
                if (folderNode is null)
                {
                    return;
                }
                folderNode.Expanded = true;
                parent = folderNode;

                // Browse items in the folder, this will include tests, if any..
                if (folderNode.Children is null)
                {
                    var items = await browser.BrowseAsync(Team?.Id, Project?.Id, parent.Value);
                    folderNode.Children = items;
                }
            }
        }

        var requirementTreeNode = FindTreeNode(x => x.Requirement?.Id == requirement.Id);
        if (requirementTreeNode is not null)
        {
            _selectedTreeItem = requirementTreeNode?.Value;
        }
        if (invokeStateHasChanged)
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
