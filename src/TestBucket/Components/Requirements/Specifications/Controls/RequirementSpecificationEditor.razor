@using MudBlazor.Utilities
@using TestBucket.Components.Shared.Kanban
@using TestBucket.Contracts.Localization
@inject RequirementEditorController editor
@inject RequirementBrowser browser
@inject IAppLocalization loc

@if(Specification is not null)
{
        <Splitter Class="container-fill" Bordered="false" Dimension="80" EnableMargin="false" Color="Color.Surface">
            <StartContent>
                <div class="pa-2 container-fill-2-rows">

                    <MudTextField Variant="Variant.Outlined"
                              Label="@loc.Shared["title"]"
                              AdornmentColor="Color.Tertiary"
                              Value="@Specification.Name"
                              ValueChanged="OnNameChanged"
                              T="string"
                              AutoFocus="true" />

                        <MarkdownEditor Preview="false"
										CanToggleEdit="false"
                                        ValueUpdateMode="ValueUpdateMode.OnBlur"
                                        ShowToolbar="true"
                                        MaxHeight="100%"
										ToolbarButtonClass="tb-markdown-toolbar-button"
                                        Color="Color.Surface"
                                        AllowResize="true"
                                        Value="@Specification.Description"
                                        ValueChanged="OnDescriptionChanged"
                                        SpellChecker="false">
                        </MarkdownEditor>
                </div>
            </StartContent>
            <EndContent>
                <MudStack Class="pa-2" Style="width: 100%">
                    <Field>
                        <FieldHeader>@loc.Shared["type"]</FieldHeader>
                        <RequirementSpecificationTypeSelect Type="@Specification.SpecificationType" TypeChanged="OnTypeChanged"/>
                    </Field>

                    <Field Row>
                        <FieldHeader>@loc.Settings["color"]</FieldHeader>
                        <MudSpacer/>
                        <ColorCellPicker Color="@Specification.Color" ColorChanged="OnColorChanged"/>
                    </Field>

                    <Field Row>
                        <FieldHeader>@loc.Shared["icon"]</FieldHeader>
                        <MudSpacer />
                        <IconPicker Icon="@Specification.Icon" IconChanged="OnIconChanged"/>
                    </Field>
                </MudStack>
            </EndContent>
        </Splitter>
}

@code {
    [Parameter] public RequirementSpecification? Specification { get;set; }

    private async Task SaveChangesAsync()
    {
        if (Specification is not null)
        {
            await editor.SaveRequirementSpecificationAsync(Specification);
        }
    }

    private async Task OnNameChanged(string name)
    {
        if(Specification is null)
        {
            return;
        }
        Specification.Name = name;
        await SaveChangesAsync();
    }

    private async Task OnIconChanged(string svgIcon)
    {
        if (Specification is null)
        {
            return;
        }
        Specification.Icon = svgIcon;
        await SaveChangesAsync();
    }
    private async Task OnColorChanged(string color)
    {
        if (Specification is null)
        {
            return;
        }
        Specification.Color = color;
        await SaveChangesAsync();
    }

    private async Task OnTypeChanged(string type)
    {
        if(Specification is null)
        {
            return;
        }
        Specification.SpecificationType = type;
        await SaveChangesAsync();
    }

    private async Task OnDescriptionChanged(string description)
    {
        if (Specification is null)
        {
            return;
        }
        Specification.Description = description;
        await SaveChangesAsync();
    }
}
