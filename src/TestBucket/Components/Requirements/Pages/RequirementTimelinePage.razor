@attribute [Authorize()]
@page "/{TenantId}/Requirements/Requirements/{RequirementId:long}/Timeline"
@using MudGantt
@using TestBucket.Components.Milestones.Controllers
@using TestBucket.Components.Requirements.Layouts
@using TestBucket.Components.Requirements.Utilities
@using TestBucket.Domain.Features.Traceability.Models
@using TestBucket.Domain.Issues.Models
@using TestBucket.Domain.Requirements
@layout RequirementLayout
@implements IDisposable
@implements IRequirementObserver
@inject AppNavigationManager appNavigationManager
@inject RequirementEditorController controller
@inject IRequirementManager requirementManager
@inject MilestonesController milestonesController

<MudStack Class="pa-2" Style="height: 100%">
    @if(Project is not null && _requirement is not null)
    {
        <MudGanttChart  Tasks="@_tasks" 
                        Dense
                        Size="Size.Small"
                        Events="@_events" 
                        TaskDatesChanged="OnDatesChanged"
                        TaskClicked="OnTaskClicked"
                       ContextMenuOpening="OnTaskContextMenuOpening"
                        TaskProgressChanged="OnProgressChanged">
                        <TaskContextMenu>
                            <CommandMenuItems Flatten TypeNames="Requirement"/>
                        </TaskContextMenu>
        </MudGanttChart>
    }
</MudStack>
@code {
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Requirement? Requirement { get; set; }
    [Parameter] public long RequirementId { get; set; }
    [Parameter] public string? TenantId { get; set; }

    private Requirement? _requirement = null;
    private List<Requirement> _requirements = [];
    private List<MudGanttTask> _tasks = [];
    private List<MudGanttEvent> _events = [];

    private void OnTaskContextMenuOpening(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                appNavigationManager.State.SetSelectedRequirement(requirement);
            }
        }
    }

    private void OnTaskClicked(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                appNavigationManager.NavigateTo(requirement);
            }
        }
    }
    private async Task OnProgressChanged(MudGanttTask task)
    {
        if(long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if(requirement is not null)
            {
                requirement.Progress = task.Progress;
                await controller.SaveRequirementAsync(requirement);
            }
        }
    }
    private async Task OnDatesChanged(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                requirement.StartDate = task.StartDate?.ToUniversalTime();
                requirement.DueDate = task.EndDate?.ToUniversalTime();
                await controller.SaveRequirementAsync(requirement);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Check if the bound requirement has changed
        if(Requirement is not null && _requirement?.Id != Requirement.Id)
        {
            _requirement = Requirement;

            var milestones = await milestonesController.GetMilestonesAsync(Project);
            _events = milestones.Where(x=>x.EndDate != null && !string.IsNullOrWhiteSpace(x.Title)).Select(x => new MudGanttEvent
                {
                    Name = x.Title??"",
                    Date = x.EndDate!.Value,
                    Id = x.Id.ToString(),
                }).ToList();

            await RefreshTasksAsync();
        }
    }

    private async Task RefreshTasksAsync()
    {
        if (_requirement is null)
        {
            return;
        }

        var node = await controller.DiscoverTraceabilityAsync(_requirement, 5);
        List<Requirement> downstreamRequirements = [];
        AddDownstreamRequirements(node, downstreamRequirements);

        _tasks.Clear();

        _requirements = [_requirement, .. downstreamRequirements];
        _tasks.AddRange(_requirements.Select(x =>
            new MudGanttTask
            {
                Id = x.Id.ToString(),
                Name = x.Name,
                StartDate = x.StartDate ?? DateTime.UtcNow,
                EndDate = x.DueDate ?? DateTimeOffset.UtcNow.AddDays(1),
                Progress = x.Progress ?? 0,
                Links = RequirementGanntHelper.GetDependencies(x),
                Color = RequirementColors.GetColor(x)
            }
        ));
    }


    private void AddDownstreamRequirements(TraceabilityNode node, List<Requirement> requirements)
    {
        foreach(var child in node.Downstream)
        {
            if(child.Requirement is not null)
            {
                requirements.Add(child.Requirement);
                AddDownstreamRequirements(child, requirements);
            }
        }
    }

    protected override void OnInitialized()
    {
        requirementManager.AddObserver(this);
    }

    public Task OnSpecificationCreatedAsync(RequirementSpecification spec) => Task.CompletedTask;

    public Task OnSpecificationDeletedAsync(RequirementSpecification spec) => Task.CompletedTask;

    public Task OnSpecificationSavedAsync(RequirementSpecification spec) => Task.CompletedTask;

    public Task OnFolderCreatedAsync(RequirementSpecificationFolder folder) => Task.CompletedTask;

    public Task OnFolderDeletedAsync(RequirementSpecificationFolder folder) => Task.CompletedTask;

    public Task OnFolderSavedAsync(RequirementSpecificationFolder folder) => Task.CompletedTask;

    public async Task OnRequirementCreatedAsync(Requirement requirement)
    {
        await RefreshTasksAsync();
        this.StateHasChanged();

    }

    public async Task OnRequirementDeletedAsync(Requirement requirement)
    {
        await RefreshTasksAsync();
        this.StateHasChanged();
    }

    public Task OnRequirementSavedAsync(Requirement requirement) => Task.CompletedTask;


    public Task OnRequirementFieldChangedAsync(Requirement requirement) => Task.CompletedTask;

    public void Dispose()
    {
        requirementManager.RemoveObserver(this);
    }
}
