@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject ITestCaseManager testCaseManager
@inject ITestRunManager testRunManager
@inject TestSuiteService testSuiteService
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreation
@inject AppNavigationManager appNavigationManager
@inject ITestSuiteManager testSuiteManager
@inject IStringLocalizer<SharedStrings> loc
@implements ITestCaseObserver
@implements ITestSuiteObserver
@implements ITestSuiteFolderObserver
@implements ITestRunObserver
@implements IDisposable

<MudStack Spacing="0" Class="pa-2" Style="width: 100%;">
    <MudStack Row="true" Style="border-bottom: solid 1px var(--mud-palette-darken)" Spacing="0">

        <MudTextField Placeholder="Search Tests"
        Clearable
        Variant="Variant.Outlined"
        Adornment="Adornment.Start" T="string" AdornmentIcon="@Icons.Material.Filled.Search" Value="_searchText" ValueChanged="OnSearchTextChangedAsync" />

        <MudSpacer />

        @if (appNavigationManager.State.SelectedTestCase is not null)
        {
            <MudIconButton OnClick="SyncWithActiveDocumentAsync" Icon="@Icons.Material.Filled.CompareArrows"/>
        }

        <MudMenu Icon="@Icons.Material.Filled.MoreHoriz">

            @if (_selectedTreeItem?.Folder is not null)
            {
                <FolderMenuItems Folder="@_selectedTreeItem.Folder" Project="@Project" Team="@Team"/>
                <MudDivider />
            }
            else if (_selectedTreeItem?.TestCase is not null)
            {
                <TestCaseMenuItems TestCase="@_selectedTreeItem.TestCase" Project="@Project" Team="@Team" />
                <MudDivider />
            }
            else if (_selectedTreeItem?.TestSuite is not null)
            {
                <TestSuiteMenuItems Suite="_selectedTreeItem.TestSuite" Project="@Project" Team="@Team" />
                <MudDivider />
            }
            else if (_selectedTreeItem?.TestRun is not null)
            {
                <TestRunMenuItems Run="_selectedTreeItem.TestRun" Project="@Project" Team="@Team" />
                <MudDivider />
            }
            <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="AddTestSuiteAsync" Label="Add test suite" />
            <MudDivider />
            <MudMenuItem Icon="@Icons.Material.Filled.ImportExport" OnClick="ImportAsync" Label="Import results" />
        </MudMenu>

    </MudStack>

    <TreeView 
    Class="pa-2"
    @ref="_treeView"
    ItemEdited="OnRenamed"
    ItemEditCanceled="OnItemEditCanceled"
    EditItem="@_editItem"
    T="BrowserItem"
    SelectedValue="@_selectedTreeItem"
    SelectedValueChanged="OnSelectedValueChangedAsync"
    Color="Color.Tertiary" 
    ServerData="@LoadServerData" 
    Items="@_rootItems">
        <ItemTemplate>

            @{
                string style = "";
                if (context.Value?.Color is not null)
                {
                    style += $"color: {context.Value.Color}";
                }
            }

            <DropZone T="TestEntity" OnDrop="(test) => OnDrop(test, context)">

                <MudMenu ActivationEvent="@MouseEvent.RightClick" Dense="true">
                    <ActivatorContent>
                        @if (context.Value?.TestCase is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestCase">

                                @{
                                    string cssClass = "";
                                    string name = context.Text ?? "";
                                    if (context.Value.TestCase.IsTemplate)
                                    {
                                        cssClass += " template";
                                    }
                                    switch(context.Value.TestCase.ExecutionType)
                                    {
                                        case Contracts.Testing.Models.TestExecutionType.Automated:
                                            cssClass += " automated";
                                            break;
                                        case Contracts.Testing.Models.TestExecutionType.Hybrid:
                                            cssClass += " hybrid";
                                            break;
                                        case Contracts.Testing.Models.TestExecutionType.Manual:
                                            cssClass += " manual";
                                            break;
                                    }
                                }

                                <div style="@style" class="@cssClass">@context.Text</div>
                            </Draggable>
                        }
                        else if (context.Value?.Folder is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.Folder">
                                <div style="@style">@context.Text</div>
                            </Draggable>
                        }
                        else if (context.Value?.TestSuite is not null)
                        {
                            <Draggable T="TestEntity" Data="@context.Value.TestSuite">
                                <div style="@style">@context.Text</div>
                            </Draggable>
                        }
                        else
                        {
                            <div style="@style">@context.Text</div>
                        }
                    </ActivatorContent>
                    <ChildContent>

                        @if (context.Value?.TestCase is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">Rename</MudMenuItem>
                            <TestCaseMenuItems TestCase="@context.Value.TestCase" Project="@Project" Team="@Team" />
                            <MudDivider />
                        }
                        else if (context.Value?.TestRun is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">Rename</MudMenuItem>
                            <TestRunMenuItems Run="@context.Value.TestRun" Project="@Project" Team="@Team" />
                            <MudDivider />
                        }
                        else if (context.Value?.Folder is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">Rename</MudMenuItem>
                            <FolderMenuItems Folder="@context.Value.Folder" Project="@Project" Team="@Team" />
                        <MudDivider />
                        }
                        else if (context.Value?.TestSuite is not null)
                        {
                            <MudMenuItem Icon="@Icons.Material.Filled.Abc" OnClick="() => BeginRename(context)">Rename</MudMenuItem>
                            <TestSuiteMenuItems Suite="@context.Value.TestSuite" Project="@Project" Team="@Team" />
                            <MudDivider />
                        }

                        <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="AddTestSuiteAsync" Label="Add test suite" />
                        <MudDivider />
                        <MudMenuItem Icon="@Icons.Material.Filled.ImportExport" OnClick="ImportAsync" Label="Import results" />

                    </ChildContent>
                </MudMenu>
            </DropZone>
        </ItemTemplate>
    </TreeView>
</MudStack>
