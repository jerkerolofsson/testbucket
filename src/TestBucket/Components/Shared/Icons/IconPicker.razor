@using TestBucket.Components.Dialogs
@using TestBucket.Contracts.Localization
@inject IDialogService dialogService
@inject IAppLocalization loc

<div class="tb-icon-picker">
    @if(!string.IsNullOrEmpty(Icon))
    {
        <MudStack Row="true" AlignItems="AlignItems.Center" Style="margin-right: 8px">
            <MudTooltip Text="@loc.Shared["browse"]">
                <MudIconButton data-testid="browse" aria-label="@loc.Shared["browse"]" Size="Size.Large" Icon="@Icon" OnClick="PickAsync"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="@loc.Settings["remove-icon"]">
                <MudIconButton aria-label="@loc.Settings["remove-icon"]" Size=Size.Small Color="Color.Error" Icon="@Icons.Material.Filled.Clear" OnClick="ClearAsync"></MudIconButton>
            </MudTooltip>
        </MudStack>
    }
    else
    {
        <MudLink data-testid="browse" OnClick="PickAsync">@loc.Shared["browse"]</MudLink>
    }

</div>


@code {
    [Parameter] public string? Icon { get; set; }
    [Parameter] public EventCallback<string?> IconChanged { get; set; }

    private async Task ClearAsync()
    {
        await IconChanged.InvokeAsync(null);
    }

    public async Task PickAsync()
    {
        var dialog = await dialogService.ShowAsync<IconPickerDialog>(null, DefaultBehaviors.DialogOptions);
        var result = await dialog.Result;
        if(result?.Data is string icon)
        {
            await IconChanged.InvokeAsync(icon);
        }
    }
}
