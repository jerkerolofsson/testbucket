@inherits LayoutComponentBase
@layout AppLayout
@using Humanizer
@using TestBucket.Components.Layout
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Domain
@using TestBucket.Domain.Settings
@using TestBucket.Domain.Settings.Models
@using TestBucket.Domain.Shared
@inject NavigationManager navigationManager
@inject ISettingsManager settingsManager
@inject UserPreferencesService preferencesController
@inject AuthenticationStateProvider authenticationStateProvider
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<SettingStrings> settingsLoc
@inject IStringLocalizer<ProjectStrings> projectLoc

<TenantRedirect />

<Splitter Dock="_dock" Style="height: 100%" Bordered="false" Dimension="20" EnableMargin="false" Color="Color.Default">
    <StartContent>

        <div class="pa-2 tb-navmenu side">

            <MudText Typo="Typo.h1">@loc["settings"]</MudText>

            <MudTextField Placeholder="@settingsLoc["search-settings"]"
                Class="default-search mt-3 mb-3"
                Clearable
                Variant="Variant.Outlined"
                Adornment="Adornment.Start" 
                T="string" AdornmentIcon="@Icons.Material.Filled.Search" Value="_searchText" ValueChanged="OnSearchTextChangedAsync" />

            <MudNavMenu>

                @foreach(var category in _categories)
                {
                    string url = $"/{TenantId}/Settings/Categories/{category.Name}";
                    <MudNavLink Icon="@category.Icon" Href="@url">@category.Name</MudNavLink>
                }

                <MudNavLink Icon="@TbIcons.BoldDuoTone.Keyboard" Href="@KeyboardUrl">@settingsLoc["keyboard"]</MudNavLink>


                <MudNavLink Icon="@Icons.Material.Filled.Security" Href="@ApiKeysUrl">@loc["api-keys"]</MudNavLink>
                <MudNavLink Icon="@TbIcons.Filled.ModelContextProtocol" Href="@McpUrl">MCP</MudNavLink>

                @if(Project is not null)
                {
                    <MudItem Class="mt-5"/>

                    string projectUrl = $"/{TenantId}/Settings/Projects/{Project.Slug}";
                    string projectIntegrationsUrl = $"/{TenantId}/Settings/Projects/{Project.Slug}/Integrations";
                    string projectFieldsUrl = $"/{TenantId}/Settings/Projects/{Project.Slug}/Fields";
                    string milestonesUrl = $"/{TenantId}/Milestones";
                    string labelsUrl = $"/{TenantId}/Labels";
                    string heuristicsUrl = $"/{TenantId}/Settings/Heuristics";

                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Article" IconColor="Color.Tertiary" Href="@projectUrl">@Project.Name</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@TbIcons.Filled.Extensions" IconColor="Color.Tertiary" Href="@projectIntegrationsUrl">@projectLoc["integrations"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@TbIcons.BoldDuoTone.Field" IconColor="Color.Tertiary" Href="@projectFieldsUrl">@loc["fields"]</MudNavLink>
                    
                    <MudNavLink Match="NavLinkMatch.All" Icon="@TbIcons.BoldDuoTone.Flag" IconColor="Color.Tertiary" Href="@milestonesUrl">@settingsLoc["manage-milestones"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@TbIcons.IconSaxDuoTone.Label" IconColor="Color.Tertiary" Href="@labelsUrl">@settingsLoc["manage-labels"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@TbIcons.BoldDuoTone.Heuristic" IconColor="Color.Tertiary" Href="@heuristicsUrl">@settingsLoc["manage-heuristics"]</MudNavLink>
                }

                <MudNavLink Match="NavLinkMatch.All" Icon="@TbIcons.Filled.ProcessDiagram" IconColor="Color.Tertiary" Href="@StatesUrl">@loc["states"]</MudNavLink>

                <MudItem Class="mt-5"/>

                <MudNavLink Icon="@TbIcons.BoldDuoTone.Leaf" IconColor="Color.Info" Href="@EnvironmentsUrl">@settingsLoc["manage-environments"]</MudNavLink>
                <MudNavLink Icon="@TbIcons.BoldDuoTone.UserCircle" IconColor="Color.Info" Href="@AccountsUrl">@settingsLoc["manage-accounts"]</MudNavLink>
                <MudNavLink Icon="@TbIcons.BoldDuoTone.Laptop" IconColor="Color.Info" Href="@ResourcesUrl">@settingsLoc["manage-resources"]</MudNavLink>
                <MudNavLink Icon="@TbIcons.BoldDuoTone.Running" IconColor="Color.Info" Href="@RunnersUrl">@settingsLoc["manage-runners"]</MudNavLink>

                <MudItem Class="mt-5"/>

                <MudNavLink Icon="@Icons.Material.Outlined.Groups" IconColor="Color.Secondary" Href="@TeamsUrl">@settingsLoc["manage-teams"]</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Filled.ViewTimeline" IconColor="Color.Secondary" Href="@ProjectsUrl">@settingsLoc["manage-projects"]</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Outlined.PeopleAlt" IconColor="Color.Secondary" Href="@UsersUrl">@settingsLoc["manage-users"]</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Outlined.SecurityUpdate" IconColor="Color.Secondary" Href="@RolesUrl">@settingsLoc["manage-roles"]</MudNavLink>

                <MudNavLink Icon="@TbIcons.BoldDuoTone.CloudDownload" IconColor="Color.Secondary" Href="@BackupUrl">@settingsLoc["backup"]</MudNavLink>
                
                <AuthorizeView Roles="SUPERADMIN">
                    <Authorized>
                        <MudNavLink Icon="@Icons.Material.Outlined.AdminPanelSettings" IconColor="Color.Secondary" Href="@TenantsUrl">@settingsLoc["manage-tenants"]</MudNavLink>
                    </Authorized>
                </AuthorizeView>

                <div class="pa-5">
                    <LanguagePicker />
                </div>
            </MudNavMenu>
        </div>

    </StartContent>

    <EndContent>
        <MudStack Style="width: 100%; overflow: auto; ">
            @Body
        </MudStack>
    </EndContent>
</Splitter>

@code {
    private string _searchText = "";
    private Dock _dock = Dock.Left;

    private SettingsCategory[] _categories = [];

    [CascadingParameter] public TestProject? Project { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await preferencesController.GetUserPreferencesAsync();
        _dock = userPreferences?.ExplorerDock ?? Dock.Left;
    }

    private async Task<SettingContext> CreateSettingContextAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;

        return new SettingContext { Principal = principal, ProjectId = Project?.Id, TenantId = principal.GetTenantIdOrThrow() };
    }

    private async Task OnSearchTextChangedAsync(string text)
    {
        _searchText = text;
        if(!string.IsNullOrEmpty(text))
        {
            var context = await CreateSettingContextAsync();

            var settings = settingsManager.Search(context, _searchText);
            _categories = settings.Select(x => x.Metadata.Category).Distinct().OrderBy(x => x.Name).ToArray();
            navigationManager.NavigateTo($"/{TenantId}/Settings/Search?q={_searchText}");
        }
        else
        {
            _categories = settingsManager.Categories.OrderBy(x => x.Name).ToArray();
        }
    }

    protected override void OnInitialized()
    {
        _categories = settingsManager.Categories.OrderBy(x=>x.Name).ToArray();
        
    }

    private string TenantId => TenantResolver.ResolveTenantIdFromUrl(navigationManager.Uri) ?? "default";

    //private string AppearanceUrl => $"{TenantId}/Settings/Appearance";
    private string TenantsUrl => $"{TenantId}/Settings/Tenants";
    private string ProjectsUrl => $"{TenantId}/Settings/ManageProjects";
    private string StatesUrl => $"{TenantId}/Settings/ManageStates";

    private string EnvironmentsUrl => $"{TenantId}/Settings/ManageEnvironments";
    private string AccountsUrl => $"{TenantId}/Settings/Accounts";
    private string ResourcesUrl => $"{TenantId}/Settings/Resources";
    private string ApiKeysUrl => $"{TenantId}/Settings/ManageApiKeys";
    private string McpUrl => $"{TenantId}/Settings/Categories/MCP";
    private string TeamsUrl => $"{TenantId}/Settings/Teams";
    private string UsersUrl => $"{TenantId}/Settings/Users";
    private string RolesUrl => $"{TenantId}/Settings/Roles";
    private string BackupUrl => $"{TenantId}/Settings/Backup";
    private string RunnersUrl => $"{TenantId}/Settings/ManageRunners";
    private string KeyboardUrl => $"{TenantId}/Settings/Keyboard";
    
}
