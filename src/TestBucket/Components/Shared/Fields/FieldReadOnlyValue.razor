@using TestBucket.Contracts.Integrations
@inject FieldController fieldController

@if(Field?.FieldDefinition is not null) 
{
    <MudText Class="tb-read-only-field">
        @if (Field.FieldDefinition.Type is (FieldType.String or FieldType.SingleSelection) )
        {
            var visualEntity = _options.FirstOrDefault(x => x.Title == Field.StringValue);
            if (visualEntity is not null)
            {
                <Chip Color="@visualEntity.Color" Text="@Field.StringValue" />
            }
            else
            {
                <div>@Field.StringValue</div>
            }
        }
        else if (Field.FieldDefinition.Type == FieldType.Boolean)
        {
            <MudSwitchM3 Color="Color.Primary" ReadOnly Value="@Field.BooleanValue" />
        }
        else if (Field.FieldDefinition.Type == FieldType.Double)
        {
            @Field.DoubleValue
        }
        else if (Field.FieldDefinition.Type == FieldType.DateOnly)
        {
            @Field.DateValue?.Humanize()
        }
        else if (Field.FieldDefinition.Type == FieldType.TimeSpan)
        {
            @Field.TimeSpanValue?.Humanize()
        }
        else if (Field.FieldDefinition.Type == FieldType.DateTimeOffset)
        {
            @Field.DateTimeOffsetValue?.ToLocalTime().Humanize()
        }
        else if ((Field.FieldDefinition.Type is FieldType.StringArray or FieldType.MultiSelection) && Field.StringValuesList is not null)
        {
            <MudStack Row Spacing="1">
                @foreach (var value in Field.StringValuesList)
                {
                    var visualEntity = _options.FirstOrDefault(x => x.Title == value);
                    string color = visualEntity?.Color ?? "#CCC";
                    <Chip Color="@color" Text="@value"/>
                }
            </MudStack>
        }
    </MudText>
}
@code {
    [Parameter] public FieldValue? Field { get; set; }

    private IReadOnlyList<GenericVisualEntity> _options = [];
    private FieldValue? _field;


    protected override async Task OnParametersSetAsync()
    {
        if (Field is null)
        {
            return;
        }

        if (Field.Id != _field?.Id)
        {
            _field = Field;
            _options = [];
            if (Field?.FieldDefinition is null)
            {
                return;
            }


            if (Field.FieldDefinition.Type is FieldType.StringArray or FieldType.MultiSelection)
            {
                Field.StringValuesList ??= [];
            }
            if ((Field.FieldDefinition.Type is FieldType.SingleSelection or FieldType.MultiSelection or FieldType.StringArray))
            {
                if (Field.FieldDefinition.DataSourceType != Contracts.Fields.FieldDataSourceType.Dock)
                {
                    _options = await fieldController.GetOptionsAsync(Field.FieldDefinition);
                }
            }
        }
    }

}
