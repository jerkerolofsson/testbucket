@using TestBucket.Components.Uploads.Services
@using TestBucket.Contracts.Localization
@using TestBucket.Domain.Files.Models
@inject UploadService uploadService
@inject IAppLocalization loc

<MudStack Style="@Style" Class="@Class">
    <MudFileUpload T="IBrowserFile"
    @ref="@_fileUpload"
    Accept="@Accept"
    FilesChanged="UploadFilesAsync"
    Hidden="@false"
    InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
    InputStyle="opacity:0"
    tabindex="-1"
    @ondrop="@ClearDragClass"
    @ondragenter="@SetDragClass"
    @ondragleave="@ClearDragClass"
    @ondragend="@ClearDragClass">
        <ActivatorContent>

            <MudPaper Outlined="true" Class="@_dragClass">
                @if(ChildContent is null)
                {
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mud-width-full mud-height-full" Row>
                    @if(!_loading)
                    {
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.CloudUpload"/>
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h6">@loc.Shared["upload-file-hint"]</MudText>
                            <MudText Typo="Typo.subtitle2">@string.Format(loc.Shared["upload-max-filesize-fmt"], MaxFileSize.Bytes())</MudText>
                        </MudStack>
                    }
                    </MudStack>
                }
                else
                {
                    @ChildContent;
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
</MudStack>


@code {
    [Parameter] public EventCallback FileUploadStarted { get; set; }
    [Parameter] public EventCallback<FileResource> FileUploaded { get; set; }

    /// <summary>
    /// Maximum file size
    /// </summary>
    [Parameter] public long MaxFileSize { get; set; } = 512000;

    /// <summary>
    /// File types to accept
    /// </summary>
    [Parameter] public string? Accept { get; set; }
    [Parameter] public string? Label { get; set; }

    [Parameter] public string? Class { get; set; }
    [Parameter] public string Style { get; set; } = "width: 100%";

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public long? TestCaseId { get; set; }
    [Parameter] public long? TestRunId { get; set; }
    [Parameter] public long? RequirementId { get; set; }
    [Parameter] public long? RequirementSpecificationId { get; set; }
    [Parameter] public long? TestCaseRunId { get; set; }
    [Parameter] public long? TestProjectId { get; set; }
    [Parameter] public long? TestSuiteId { get; set; }
    [Parameter] public long? TestSuiteFolderId { get; set; }
    [Parameter] public ResourceCategory UploadCategory { get; set; } = ResourceCategory.Attachment;

    private MudFileUpload<IBrowserFile>? _fileUpload;

    private bool _loading = false;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
       => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;


    private async Task UploadFilesAsync(IBrowserFile file)
    {
        ClearDragClass();
        _loading = true;
        await FileUploadStarted.InvokeAsync();

        this.StateHasChanged();

        var relatedEntity = new FileResourceRelatedEntity
            {
                TestCaseId = TestCaseId,
                TestRunId = TestRunId,
                TestCaseRunId = TestCaseRunId,

                TestSuiteId = TestSuiteId,
                TestSuiteFolderId = TestSuiteFolderId,
                TestProjectId = TestProjectId,

                RequirementId = RequirementId,
                RequirementSpecificationId = RequirementSpecificationId,
            };

        var fileResource = await uploadService.UploadAsync(UploadCategory, file, relatedEntity, MaxFileSize);
        await FileUploaded.InvokeAsync(fileResource);

        _loading = false;
    }
}
