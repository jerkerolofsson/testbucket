@using TestBucket.Contracts.Fields
@using TestBucket.Contracts.Requirements.States
@using TestBucket.Contracts.Requirements.Types
@attribute [Authorize]
@inject RequirementEditorController editor
@inject FieldController fieldController
@inject IStringLocalizer<SharedStrings> loc

@if (Query is not null)
{
    <EditForm Model="@Query" OnValidSubmit="OnValidSubmit">
        <MudDialog DefaultFocus="DefaultFocus.FirstChild">
            <DialogContent>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px">
                    <Field>
                        <FieldHeader>@loc["created"]</FieldHeader>
                        <MudDateRangePicker 
                        DateRange="@_dateRange" Margin="Margin.Dense" DateRangeChanged="OnDateRangeChanged" Clearable
                        PlaceholderStart="@loc["start-date"]" PlaceholderEnd="@loc["end-date"]" />
                    </Field>

                    <Field>
                        <FieldHeader>@loc["type"]</FieldHeader>
                        <RequirementTypeSelect @bind-Type="_requirementType"/>
                    </Field>


                    <Field>
                        <FieldHeader>@loc["state"]</FieldHeader>
                        <RequirementStateSelect @bind-State="_requirementState" />
                    </Field>

                    <FieldsEditor Fields="@_fields" AllowMultiSelection="false" AutoSaveChanges="false" FieldChanged="OnFieldChanged"/>
                </div>

            </DialogContent>

            <DialogActions>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
                <MudButton OnClick="Close">@loc["cancel"]</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public TestProject? Project{ get; set; }
    [Parameter] public SearchRequirementQuery? Query { get; set; }

    private RequirementType? _requirementType;
    private RequirementState? _requirementState;

    private IReadOnlyList<FieldDefinition> _fieldDefinitions = [];
    private List<FieldValue> _fields = [];
    private DateRange _dateRange { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if(Project is not null)
        {
            _fieldDefinitions = await fieldController.GetDefinitionsAsync(Project.Id, FieldTarget.Requirement);

            // We filter some fields here, not all types of fields are suitable for the filter, 
            // such as ReadOnly or WriteOnly
            foreach(var fieldDefinition in _fieldDefinitions.Where(x=>!x.ReadOnly && !x.WriteOnly))
            {
                var fieldValue = new FieldValue
                {
                    FieldDefinitionId = fieldDefinition.Id,
                    FieldDefinition = fieldDefinition
                };

                if(Query is not null)
                {
                    var currentField = Query.Fields.Where(x=>x.FilterDefinitionId == fieldDefinition.Id).FirstOrDefault();
                    if(currentField is not null)
                    {
                        fieldValue.StringValue = currentField.StringValue;
                        fieldValue.BooleanValue = currentField.BooleanValue;
                        fieldValue.LongValue = currentField.LongValue;
                        fieldValue.DoubleValue = currentField.DoubleValue;
                        fieldValue.DateTimeOffsetValue = currentField.DateTimeOffsetValue;
                        fieldValue.TimeSpanValue = currentField.TimeSpanValue;
                        fieldValue.DateValue = currentField.DateValue;
                    }
                }

                _fields.Add(fieldValue);
            }
        }
    }

    private void OnFieldChanged(FieldValue field)
    {
        if(Query is not null)
        {
            if(field.HasValue())
            {
                var filter = field.ToFieldFilter();
                Query.AddFieldFilter(filter);
            }
            else
            {
                Query.RemoveFieldFilter(x => x.FilterDefinitionId == field.FieldDefinitionId);
            }
        }
    }

    private void OnDateRangeChanged(DateRange? range)
    {
        if(Query is not null)
        {
            Query.CreatedFrom = null;
            Query.CreatedUntil = null;

            if (range is not null)
            {
                _dateRange = range;

                if(range.Start is not null)
                {
                    Query.CreatedFrom = range.Start.Value.ToUniversalTime();
                }
                if (range.End is not null)
                {
                    Query.CreatedUntil = range.End.Value.ToUniversalTime();
                }
            }
        }
    }

    protected override void OnParametersSet()
    {
        if(Query is not null)
        {
            _requirementType = null;
            if(Query.RequirementType is not null)
            {
                _requirementType = new RequirementType { Name = Query.RequirementType };
                _requirementType.MappedType = RequirementTypeConverter.GetMappedRequirementTypeFromString(_requirementType.Name);
            }

            _requirementState = null;
            if (Query.RequirementState is not null)
            {
                _requirementState = new RequirementState { Name = Query.RequirementState, MappedState = MappedRequirementState.Other };
            }

            if(Query.CreatedFrom is not null)
            {
                _dateRange.Start = Query.CreatedFrom.Value.LocalDateTime;
            }
            if (Query.CreatedUntil is not null)
            {
                _dateRange.End = Query.CreatedUntil.Value.LocalDateTime;
            }
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private void  OnValidSubmit()
    {
        if(Query is not null)
        {
            Query.RequirementType = _requirementType?.Name;
            Query.RequirementState = _requirementState?.Name;
        }

        MudDialog.Close(Query);
    }
}

