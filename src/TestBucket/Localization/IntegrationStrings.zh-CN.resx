<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="access-token" xml:space="preserve">
    <value>访问令牌</value>
  </data>
  <data name="add-integration" xml:space="preserve">
    <value>添加集成</value>
  </data>
  <data name="artifacts" xml:space="preserve">
    <value>文物</value>
  </data>
  <data name="artifacts-pattern" xml:space="preserve">
    <value>伪影模式</value>
  </data>
  <data name="artifacts-pattern-description" xml:space="preserve">
    <value>定义一个全球模式来定义管道创建的伪像，该管道将在管道完成后下载以测试存储桶。</value>
  </data>
  <data name="authentication" xml:space="preserve">
    <value>验证</value>
  </data>
  <data name="client-id" xml:space="preserve">
    <value>客户ID</value>
  </data>
  <data name="client-secret" xml:space="preserve">
    <value>客户秘密</value>
  </data>
  <data name="coverage-report-artifact-pattern" xml:space="preserve">
    <value>覆盖报告的全球模式</value>
  </data>
  <data name="coverage-report-artifact-pattern-helper-text" xml:space="preserve">
    <value>可以分开多个条目；</value>
  </data>
  <data name="create-issues" xml:space="preserve">
    <value>创建问题</value>
  </data>
  <data name="create-pipeline" xml:space="preserve">
    <value>创建管道</value>
  </data>
  <data name="features" xml:space="preserve">
    <value>特征</value>
  </data>
  <data name="get-issues" xml:space="preserve">
    <value>阅读问题</value>
  </data>
  <data name="get-labels" xml:space="preserve">
    <value>阅读标签</value>
  </data>
  <data name="get-milestones" xml:space="preserve">
    <value>阅读里程碑</value>
  </data>
  <data name="get-releases" xml:space="preserve">
    <value>阅读版本</value>
  </data>
  <data name="integration" xml:space="preserve">
    <value>一体化</value>
  </data>
  <data name="integration-base-url" xml:space="preserve">
    <value>基础网址</value>
  </data>
  <data name="no-integration" xml:space="preserve">
    <value>找不到现有的集成。 现在创建一个？</value>
  </data>
  <data name="project-id" xml:space="preserve">
    <value>项目ID</value>
  </data>
  <data name="read-artifacts" xml:space="preserve">
    <value>阅读文物</value>
  </data>
  <data name="read-pipeline-artifacts-is-not-enabled" xml:space="preserve">
    <value>读取管道工件未启用。 从集成中访问工件，首先可以实现这一目标。</value>
  </data>
  <data name="read-repository" xml:space="preserve">
    <value>阅读存储库和提交</value>
  </data>
  <data name="scope" xml:space="preserve">
    <value>范围</value>
    <comment>OAuth2 scopes</comment>
  </data>
  <data name="system" xml:space="preserve">
    <value>系统</value>
  </data>
  <data name="test-result-artifact-pattern" xml:space="preserve">
    <value>测试结果的全球模式</value>
  </data>
  <data name="test-result-artifact-pattern-helper-text" xml:space="preserve">
    <value>可以分开多个条目；</value>
  </data>
</root>