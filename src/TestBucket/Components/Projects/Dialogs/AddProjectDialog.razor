@using TestBucket.Components.Teams.Controls
@attribute [Authorize]
@inject ProjectController controller
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<ErrorStrings> errorLoc

<EditForm Model="@_name" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild" data-testid="add-project-dialog">
        <TitleContent>@loc["add-new-project"]</TitleContent>
        <DialogContent>
            <MudStack>
                <MudStack Spacing="0">
                    @if (_name is not null)
                    {
                        <MudTextField data-testid="name" Variant="Variant.Outlined" T="string" @bind-Value="@_name"></MudTextField>

                    }
                    @if(_errorMessage is not null)
                    {
                        <MudAlert data-testid="error-message" Severity="Severity.Error">@_errorMessage</MudAlert>
                    }
                </MudStack>

                <TeamDropDown @bind-SelectedTeam="@_team" />
            </MudStack>
        </DialogContent>

        <DialogActions>
            <MudButton data-testid="ok" ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            <MudButton data-testid="cancel" OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private string _name = "";
    private string _slug = "";
    private string _shortName = "";

    private string? _errorMessage;

    [Parameter]
    public Team? Team { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;
    private Team? _team;

    protected override void OnParametersSet()
    {
        _team = Team;
        base.OnParametersSet();
    }


    private void Close()
    {
        MudDialog.Close();
    }

    private async Task OnValidSubmitAsync()
    {
        if(_team is null)
        {
            _errorMessage = "Select team";
            return;
        }
        if (string.IsNullOrWhiteSpace(_name))
        {
            _errorMessage = errorLoc["invalid-name"];
            return;
        }
        _slug = controller.GenerateSlug(_name);
        _shortName = await controller.GenerateShortNameAsync(_slug);

        var result = await controller.CreateAsync(_team.Id, _name);
        if(result.IsT0)
        {
            MudDialog.Close(result.AsT0);
        }
        else
        {
            _errorMessage = result.Match(
                (success) => "",
                (alreadyExists) => errorLoc["already-exists"]
            );
        }
    }
}
