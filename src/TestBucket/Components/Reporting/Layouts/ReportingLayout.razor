@inherits LayoutComponentBase
@layout AppLayout
@using Humanizer
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Domain.Testing.TestRuns.Search
@inject TestCaseEditorController testCaseEditor
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject UserPreferencesService preferencesController
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<InsightStrings> insightLoc


<TenantRedirect />

<Splitter Style="height: 100%" Bordered="false" Dock="_dock" Dimension="20" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>

        <MudStack Class="pa-2 tb-navmenu side" Style="width: 100%;">
            <MudText Typo="Typo.h1">@loc["reporting"]</MudText>

            <MudRadioGroup Value="_timeFilter" ValueChanged="OnTimerFilterChanged" T="string">
                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("all")">@insightLoc["time-alltime"]</MudRadio>
                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("1d")">@insightLoc["time-today"]</MudRadio>
                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("1w")">@insightLoc["time-one-week"]</MudRadio>
                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@("1y")">@insightLoc["time-one-year"]</MudRadio>
            </MudRadioGroup>

            <MudNavMenu>
                <MudNavLink Href="@DashboardUrl">
					<MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
						@loc["manage-dashboards"]
						<MudSpacer />
						<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ChevronRight" />
					</MudStack>
				</MudNavLink>
            </MudNavMenu>
        </MudStack>

    </StartContent>

    <EndContent>
        <CascadingValue Value="@_query">
            @Body
        </CascadingValue>
    </EndContent>
</Splitter>

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private SearchTestCaseRunQuery _query = new();

    private Team? _team;
    private TestProject? _project;
    private Dock _dock = Dock.Left;
    private string _timeFilter = "all";

    private string DashboardUrl => appNavigationManager.GetReportingDashboardsUrl();

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await preferencesController.GetUserPreferencesAsync();
        _dock = userPreferences?.ExplorerDock ?? Dock.Left;
    }

    private void OnTimerFilterChanged(string timeFilter)
    {
        _timeFilter = timeFilter;
        _query.CreatedFrom = null;
        _query.CreatedUntil = null;
        _query.Since = null;

        switch(timeFilter)
        {
            case "1w":
                _query.CreatedFrom = DateTimeOffset.UtcNow.AddDays(-7);
                _query.Since = "1w";
                break;
            case "1d":
                _query.CreatedFrom = DateTimeOffset.UtcNow.AddDays(-1);
                _query.Since = "1d";
                break;
            case "30d":
                _query.CreatedFrom = DateTimeOffset.UtcNow.AddDays(-30);
                _query.Since = "30d";
                break;
            case "1y":
                _query.CreatedFrom = DateTimeOffset.UtcNow.AddDays(-365);
                _query.Since = "1y";
                break;
        }
    }

    protected override void OnParametersSet()
    {
        if (_project != Project || _team != Team)
        {
            _project = Project;
            _team = Team;
        }
        _query.ProjectId = _project?.Id;
        _query.TeamId = _team?.Id;
    }
}
