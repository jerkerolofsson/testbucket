@using TestBucket.Components.Requirements.Controls
@using TestBucket.Contracts.Requirements.States
@using TestBucket.Contracts.Requirements.Types
@inject RequirementEditorController editor
@inject RequirementBrowser browser
@inject ProjectController controller
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<RequirementStrings> reqLoc
@inject IStringLocalizer<StateStrings> stateLoc

<EditForm Model="@Requirement" OnValidSubmit="SaveChangesAsync">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild" Style="min-width: 70vw">
        <DialogContent>

            @if (Requirement is not null)
            {
                <div class="container-fill-2-rows">
                    <MudToolBar Class="tb-toolbar">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor!.ToggleBoldAsync()" Class="rounded-0" />
                        <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor!.ToggleItalicAsync()" Class="rounded-0" />

                        <MudDivider DividerType="DividerType.Middle" Vertical />

                        <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor!.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor!.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor!.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                        <MudDivider DividerType="DividerType.Middle" Vertical />

                        <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor!.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor!.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor!.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                        <MudDivider DividerType="DividerType.Middle" Vertical />

                        <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" Class="rounded-0" OnClick="async () => await _editor!.ToggleFullScreenAsync()" />

                        <MudDivider DividerType="DividerType.Middle" Vertical />
                        <MudSpacer/>
                        <MudIconButton Icon="@Icons.Material.Filled.CompareArrows" Href="@appNavigationManager.GetUrl(Requirement)" />
                    </MudToolBar>

                    <Splitter Class="container-fill" Bordered="false" Dimension="70" EnableMargin="false" Color="Color.Tertiary">
                        <StartContent>
                            <MudStack Class="pa-2 tb-edit-requirement-dialog" Style="width: 100%; height: 100%">

                                <MudTextField Variant="Variant.Outlined"
                                    Label="@loc["title"]"
                                    AdornmentColor="Color.Tertiary"
                                    Value="@Requirement.Name"
                                    ValueChanged="OnNameChanged"
                                    T="string"
                                    AutoFocus="true" />


                                <MarkdownEditor @ref="_editor"
                                Style="flex: 1"
                                Preview="false"
                                ShowToolbar="false"
                                MaxHeight="100%"
                                MinHeight="100%"
                                Color="Color.Primary"
                                AllowResize="true"
                                Value="@Requirement.Description"
                                ValueChanged="OnDescriptionChanged"
                                SpellChecker="false">
                                </MarkdownEditor>

                                <Field Style="display: grid !important; grid-template-columns: repeat(3, 1fr); gap: 4px">

                                    <div>@reqLoc["type"]</div>
                                    <div>@stateLoc["state"]</div>
                                    <div>@reqLoc["assigned-to"]</div>

                                    <MudSelect T="string" Value="@Requirement.RequirementType" ValueChanged="OnTypeChanged" Variant="Variant.Outlined">
                                        @foreach (var type in RequirementTypes.AllTypes)
                                        {
                                            var label = "type-" + type.ToLower();
                                            <MudSelectItem Value="@type">
                                                @reqLoc[label]
                                            </MudSelectItem>
                                        }
                                    </MudSelect>

                                    <RequirementStateSelect State="@State" StateChanged="OnStateChanged" />

                                    <UserPicker Variant=Variant.Outlined SelectedUserName="@Requirement.AssignedTo" SelectedUserNameChanged="OnAssignedToChanged" />
                                </Field>

                            </MudStack>
                        </StartContent>
                        <EndContent>
                            <MudStack Class="pa-2" Style="width: 100%">

                                <FieldsEditor Requirement="@Requirement" />

                                <Field>
                                    <FieldHeader>@loc["attachments"]</FieldHeader>
                                    <AttachmentGrid RequirementId="@Requirement.Id" Style="width: 100%" AllowUpload />
                                </Field>

                                <Field Row>
                                    <FieldHeader>@reqLoc["parent"]</FieldHeader>
                                    <MudSpacer />
                                    <MudStack Row AlignItems="AlignItems.Center">
                                        @if (_parent is not null)
                                        {
                                            <div>
                                                <MudLink Href="@appNavigationManager.GetUrl(_parent)">@_parent.Name</MudLink>
                                            </div>
                                            <MudIconButton OnClick="RemoveParentLink" Icon="@Icons.Material.Filled.Clear" />
                                        }
                                        else
                                        {
                                            <MudIconButton OnClick="SelectParentLinkAsync" Icon="@Icons.Material.Filled.FolderOpen" />
                                        }
                                    </MudStack>
                                </Field>

                            </MudStack>

                        </EndContent>
                    </Splitter>

                </div>
            }
        </DialogContent>

        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            <MudButton OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [Parameter] public Requirement? Requirement { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    private TestProject? _project;
    private Team? _team;

    private Requirement? _parent;
    private MarkdownEditor? _editor;

    private RequirementState? State
    {
        get
        {
            if (Requirement?.State is not null)
            {
                return new RequirementState() { MappedState = Requirement.MappedState ?? MappedRequirementState.Draft, Name = RequirementStates.Draft };
            }
            return null;
        }
    }

    protected override void OnInitialized()
    {
        _parent = null;
        base.OnInitialized();
    }

    private Requirement? _requirement;

    protected override async Task OnParametersSetAsync()
    {
        if (Requirement is not null && _requirement?.Id != Requirement.Id)
        {
            _parent = null;
            _requirement = Requirement;
            if (Requirement.ParentRequirementId is not null)
            {
                _parent = await browser.GetRequirementByIdAsync(Requirement.ParentRequirementId.Value);
            }

            _team = appNavigationManager.State.SelectedTeam;
            _project = appNavigationManager.State.SelectedProject;
        }
    }

    private void OnAssignedToChanged(string? user)
    {
        if (Requirement is not null)
        {
            Requirement.AssignedTo = user;
        }
    }

    private void OnStateChanged(RequirementState? state)
    {
        if (Requirement is not null)
        {
            Requirement.State = state?.Name;
            Requirement.MappedState = state?.MappedState;
        }
    }
    private void OnTypeChanged(string type)
    {
        if (Requirement?.TestProjectId is not null)
        {
            Requirement.RequirementType = type;
            //var types = await controller.GetRequirementTypesAsync(Requirement.TestProjectId.Value);
            //Requirement.MappedType = types.Where(x => x.Name == type).Select(x => x.MappedState).FirstOrDefault();
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }


    private async Task SaveChangesAsync()
    {
        if (Requirement is not null)
        {
            // Fields are already saved, don't overwrite the values
            Requirement.RequirementFields = null;

            await editor.SaveRequirementAsync(Requirement);
        }
        MudDialog.Close();
    }

    private async Task SelectParentLinkAsync()
    {
        if (Requirement is not null)
        {
            await editor.SelectParentRequirementAsync(Requirement, _project, _team);
            if (Requirement.ParentRequirementId is not null)
            {
                _parent = await browser.GetRequirementByIdAsync(Requirement.ParentRequirementId.Value);
            }
        }
    }
    private void RemoveParentLink()
    {
        if (Requirement is not null)
        {
            _parent = null;
            Requirement.ParentRequirementId = null;
        }
    }

    private void OnNameChanged(string name)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Name = name;
    }

    private void OnDescriptionChanged(string description)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Description = description;
    }
}
