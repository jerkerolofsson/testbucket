@page "/{tenantId}/Settings/Projects/{projectSlug}/Integrations"
@layout SettingsLayout
@attribute [Authorize(Roles = "ADMIN")]
@inject ProjectController projectController
@inject IDialogService dialogService

<TenantRedirect/>

<MudStack Class="container-settings-page">

    <ExternalIntegrationEditor Name="GitLab" Integration="@_gitlab" IntegrationChanged="OnGitlabChanged" Icon="@TbIcons.Brands.Gitlab"/>
    <ExternalIntegrationEditor Name="GitHub" Integration="@_github" IntegrationChanged="OnGithubChanged" Icon="@Icons.Custom.Brands.GitHub" />
    <ExternalIntegrationEditor Name="Azure DevOps" Integration="@_azure" IntegrationChanged="OnAzureChanged" Icon="@Icons.Custom.Brands.MicrosoftAzure" />
</MudStack>


@code {
    [Parameter] public string? TenantId { get; set; }
    [Parameter] public string? ProjectSlug { get; set; }

    private ExternalSystem? _github = null;
    private ExternalSystem? _gitlab = null;
    private ExternalSystem? _azure = null;

    private async Task OnAzureChanged(ExternalSystem integration)
    {
        if (ProjectSlug is not null)
        {
            _azure = integration;
            await projectController.SaveProjectIntegrationsAsync(ProjectSlug, integration);
        }
    }
    private async Task OnGithubChanged(ExternalSystem integration)
    {
        if (ProjectSlug is not null)
        {
            _github = integration;
            await projectController.SaveProjectIntegrationsAsync(ProjectSlug, integration);
        }
    }

    private async Task OnGitlabChanged(ExternalSystem integration)
    {
        if (ProjectSlug is not null)
        {
            _gitlab = integration;
            await projectController.SaveProjectIntegrationsAsync(ProjectSlug, integration);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectSlug is not null)
        {
            IReadOnlyList<ExternalSystem> integrations = await projectController.GetProjectIntegrationsAsync(ProjectSlug);
            _gitlab = integrations.Where(x => x.Name.Equals("GitLab", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
            _github = integrations.Where(x => x.Name.Equals("GitHub", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
            _azure = integrations.Where(x => x.Name.Equals("Azure DevOp", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
        }
    }
}
