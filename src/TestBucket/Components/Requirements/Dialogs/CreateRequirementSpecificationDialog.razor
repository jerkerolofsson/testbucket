@using FluentValidation
@using TestBucket.Components.Tests.Services
@using TestBucket.Contracts.Requirements.Types
@inject RequirementEditorController controller
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<RequirementStrings> reqLoc
@inject IStringLocalizer<ValidationStrings> validationLoc
@inject IValidator<RequirementSpecification> validator

<EditForm Model="@_name" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">

        <TitleContent>@reqLoc["create-collection"]</TitleContent>

        <DialogContent>
            <MudStack Spacing="5">
                <label>@loc["name"]
                    <MudTextField 
                        data-testid="name"
                        AutoFocus="true"
                        Variant="Variant.Outlined"
                        T="string" ValueChanged="OnValueChanged" Value="@_name"></MudTextField>
                </label>

                <label>@reqLoc["collection-type"]
                    <MudStack Row Wrap="Wrap.Wrap" Style="max-width: 50vw">
                        <MudRadioGroup Value="_type" ValueChanged="OnTypeChanged" T="string" data-testid="collection-type">
                            @foreach (var type in RequirementSpecificationTypes.AllTypes)
                            {
                                <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@type">@reqLoc[type]</MudRadio>
                            }
                        </MudRadioGroup>
                    </MudStack>
                </label>

                @if (_validationResult is not null)
                {
                    <FluentValidationResultSummary Result="@_validationResult" StringLocalizer="@validationLoc" />
                }
            </MudStack>
        </DialogContent>

        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            <MudButton OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private string _name = "";
    private string _type = RequirementSpecificationTypes.AllTypes.FirstOrDefault() ?? "Work Items";

    private FluentValidation.Results.ValidationResult? _validationResult;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public long ProjectId { get; set; }
    
    private void OnTypeChanged(string type)
    {
        _type = type;
        Validate();
    }
    private void OnValueChanged(string name)
    {
        _name = name;
        Validate();
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private RequirementSpecification? Validate()
    {
        var specification = new RequirementSpecification() { Name = _name, TestProjectId = ProjectId, SpecificationType = _type };
        _validationResult = validator.Validate(specification);

        if(_validationResult.IsValid)
        {
            return specification;
        }
        return null;
    }

    private async Task OnValidSubmitAsync()
    {
        var specification = Validate();
        if(specification is null)
        {
            return;
        }

        await controller.AddRequirementSpecificationAsync(specification);
        MudDialog.Close(specification);
    }
}
