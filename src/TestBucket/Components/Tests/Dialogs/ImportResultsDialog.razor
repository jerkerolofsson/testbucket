@using TestBucket.Components.Uploads.Services
@using TestBucket.Formats

@inject TestCaseEditorController testCaseEditorService
@inject AttachmentsService attachmentsService
@inject IStringLocalizer<SharedStrings> loc

<EditForm Model="@_options" OnValidSubmit="Submit">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild" Style="min-width: 30vw">
        <DialogContent>

            <Field Row>
                <FieldHeader>Format</FieldHeader>
                <MudSpacer/>
                <MudSelect T="TestResultFormat" @bind-Value="_options.Format">
                    <MudSelectItem Value="@TestResultFormat.JUnitXml">JUnit XML</MudSelectItem>
                    <MudSelectItem Value="@TestResultFormat.xUnitXml">xUnit XML</MudSelectItem>
                    <MudSelectItem Value="@TestResultFormat.MicrosoftTrx">Microsoft TRX</MudSelectItem>
                    <MudSelectItem Value="@TestResultFormat.CommonTestReportFormat">CTRF</MudSelectItem>
                </MudSelect>
            </Field>

            <Field Row>
                <FieldHeader>Remove Class Name From Test Name</FieldHeader>
                <MudSpacer/>
                <MudSwitchM3 @bind-Value="@_options.HandlingOptions.RemoveClassNameFromTestName" Color="Color.Tertiary"/>
            </Field>
                <FieldDescription>If the test name starts with the class name, it is removed from the name</FieldDescription>

            <Field Row>
                <FieldHeader>Create Folders From Package/Namespace</FieldHeader>
                <MudSpacer />
                <MudSwitchM3 @bind-Value="@_options.HandlingOptions.CreateFoldersFromClassNamespace" Color="Color.Tertiary" />
            </Field>
            <FieldDescription>Creates test suite folders from the package/namespace if present instead of using test hierarchy defined in the source file</FieldDescription>

            <Field Row>
                <FieldHeader>Create Test Suite From Assembly Name</FieldHeader>
                <MudSpacer />
                <MudSwitchM3 @bind-Value="@_options.HandlingOptions.CreateTestSuiteFromAssemblyName" Color="Color.Tertiary" />
            </Field>
            <FieldDescription>If an assembly name is present, use this to as the name for the test suite even if test suite names are defined in the source file</FieldDescription>

            @if (_options.File is null)
            {
                <Field>
                    <UploadResults FileUploaded="OnFileUploaded"/>
                </Field>
            }

        </DialogContent>

        <DialogActions>
            @if (_options.File is not null)
            {
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            }
            <MudButton OnClick="Close">@loc["cancek"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private ImportOptions _options = new();

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private Task OnFileUploaded(FileResource file)
    {
        _options.File = file;

        DetectFormat(file);
        return Task.CompletedTask;
    }

    private void DetectFormat(FileResource file)
    {
        var format = TestResultDetector.Detect(file.Data);
        if(format != TestResultFormat.UnknownFormat)
        {
            _options.Format = format;
        }
    }

    private void Submit()
    {
        if (_options.File is not null)
        {
            MudDialog.Close(_options);
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }
}

