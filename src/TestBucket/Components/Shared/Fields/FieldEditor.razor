@if (Field?.FieldDefinition is not null)
{
    <Field>
        <MudStack Spacing="0" Row="@Row">
            <MudTooltip Text="@Field.FieldDefinition.Description">
                <FieldHeader Icon="@Field.FieldDefinition.Icon">@Field.FieldDefinition.Name</FieldHeader>
            </MudTooltip>

            @if (Row && !Field.FieldDefinition.WriteOnly)
            {
                <MudSpacer/>
            }

            @if (Field.FieldDefinition.WriteOnly)
            {
                @if(_editingWriteOnlyField)
                {
                    <FieldValueEditor Field="@Field" FieldChanged="async (f) => await OnWriteOnlyFieldChangedAsync(f)" />
                }
                else
                {
                    <MudStack Row Style="width: 100%">
                        <MudSpacer />

                        <MudText>••••</MudText>
                        <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="EditField">Change</MudButton>
                    </MudStack>
                }
            }
            else if (Field.FieldDefinition.ReadOnly)
            {
                <FieldReadOnlyValue Field="@Field" />
            }
            else
            {
                <FieldValueEditor 
                    AllowMultiSelection="@AllowMultiSelection" 
                    Field="@Field" 
                    FieldChanged="async (f) => await FieldChanged.InvokeAsync(f)" />
            }
        </MudStack>

        @if (Field.FieldDefinition.ShowDescription)
        {
            <FieldDescription>@Field.FieldDefinition.Description</FieldDescription>
        }

    </Field>
}

@code {
    [Parameter] public FieldValue? Field { get; set; }
    [Parameter] public EventCallback<FieldValue?> FieldChanged { get; set; }
    [Parameter] public bool AllowMultiSelection { get; set; } = true;

    private bool Row => Field?.FieldDefinition?.Type == FieldType.Boolean ||
                Field?.FieldDefinition?.Type == FieldType.String || 
                Field?.FieldDefinition?.Type == FieldType.SingleSelection || 
                Field?.FieldDefinition?.Type == FieldType.Integer ||
                Field?.FieldDefinition?.Type == FieldType.ImageUri ||
                Field?.FieldDefinition?.Type == FieldType.Double ||
                Field?.FieldDefinition?.WriteOnly == true;

    private bool _editingWriteOnlyField = false;

    private void EditField()
    {
        if(Field is not null)
        {
            Field.DoubleValue = null;
            Field.StringValuesList = [];
            Field.StringValue = null;
            Field.BooleanValue = null;
            Field.LongValue = null;
        }
        _editingWriteOnlyField = true;
    }

    private async Task OnWriteOnlyFieldChangedAsync(FieldValue field)
    {
        _editingWriteOnlyField = false;
        await FieldChanged.InvokeAsync(field);
    }

    protected override void OnParametersSet()
    {
        if (Field?.FieldDefinition is not null)
        {
            Field.StringValuesList ??= [];
        }
    }
}
