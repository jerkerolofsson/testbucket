@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@using Microsoft.JSInterop
@using MudBlazor
@using Microsoft.Extensions.Options;
@using System.Globalization
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@inject IOptions<RequestLocalizationOptions> requestLocalizationOptions

@if (RendererInfo.IsInteractive)
{
    <MudTooltip Text="@Tooltip">
        <MudMenu StartIcon="@GetIcon()" AriaLabel="@Tooltip" Label="@CultureInfo.CurrentUICulture.NativeName" @attributes="@Attributes">
            @foreach (var locale in _locales)
            {
                <MudMenuItem OnClick="() => SetLocaleAsync(locale.Name)">@locale.NativeName</MudMenuItem>
            }
        </MudMenu>
    </MudTooltip>
}

@code {
    private IReadOnlyList<CultureInfo> _locales = [];

    private const string _defaultIcon = "<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<line  x1=\"48\" y1=\"112\" x2=\"336\" y2=\"112\" style=\"fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px\"/>\r\n<line x1=\"192\" y1=\"64\" x2=\"192\" y2=\"112\" style=\"fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px\"/>\r\n<path d=\"M281.3,112S257,206,199,277,80,384,80,384\" style=\"fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px\"/>\r\n<path d=\"M256,336s-35-27-72-75-56-85-56-85\" style=\"fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px\"/>\r\n<polyline opacity=\"0.5\" points=\"272 448 368 224 464 448 437 384 301 384\" style=\"fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px\"/>\r\n</svg>";

    [Parameter] public string? Icon { get; set; } = _defaultIcon;
    [Parameter] public bool ShowIcon { get; set; } = true;

    private string? GetIcon() => ShowIcon ? Icon : null;

    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? Attributes { get; set; }

    private string Tooltip => "Language / Idioma / Langue / 语言 / 言語 / لغة / 언어";

    protected override void OnInitialized()
    {
        _locales = requestLocalizationOptions.Value?.SupportedUICultures?.ToList() ?? [];
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    // private void SetLanguage()
    // {
    //     if(HttpContext is not null && Model?.Locale is not null)
    //     {
    //         DateTimeOffset expiration = DateTimeOffset.UtcNow.AddDays(365);
    //         HttpContext.Response.Cookies.Append("locale", Model.Locale, new CookieOptions { Expires = expiration, Path = "/" });
    //     }
    // }

    private async Task SetLocaleAsync(string locale)
    {
        DateTimeOffset expiration = DateTimeOffset.UtcNow.AddDays(365);
        await JS.InvokeVoidAsync("eval", $"document.cookie = \"Locale={locale}; expires={expiration:R}; path=/\"");

        // Reload page to use the cookie set
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }
}
