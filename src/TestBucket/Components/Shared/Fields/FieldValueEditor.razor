@if(Field?.FieldDefinition is not null) 
{
    var type = Field.FieldDefinition.Type;
    if (!AllowMultiSelection)
    {
        if(type == FieldType.MultiSelection)
        {
            type = FieldType.SingleSelection;
        }
        if (type == FieldType.StringArray)
        {
            type = FieldType.String;
        }
    }

    @if (type == FieldType.String)
    {
        <MudTextField Value="@Field.StringValue" T="string" ValueChanged="OnStringValueChanged" Variant="Variant.Outlined" />
    }
    else if (type == FieldType.SingleSelection)
    {
        <MudSelect Value="@Field.StringValue" T="string" ValueChanged="OnStringValueChanged" Variant="Variant.Outlined" Clearable="true">
            @if (Field.FieldDefinition.Options is not null)
            {
                @foreach (var item in Field.FieldDefinition.Options)
                {
                    <MudSelectItem Value="@item">
                        <MudStack Row AlignItems="AlignItems.Center">
                        @if (Field.FieldDefinition.OptionIcons is not null && Field.FieldDefinition.OptionIcons.TryGetValue(item, out var optionIcon) && !string.IsNullOrEmpty(optionIcon))
                        {
                                <MudIcon Size="Size.Small" Icon="@optionIcon" />
                        }
                        <MudText>@item</MudText>
                        </MudStack>
                    </MudSelectItem>
                }
            }
        </MudSelect>
    }
    else if (type == FieldType.Boolean)
    {
        <MudSwitchM3 Value="@Field.BooleanValue" T="bool?" ValueChanged="OnBooleanValueChanged" Color="Color.Tertiary" />
    }
    else if (type == FieldType.StringArray && Field.StringValuesList is not null)
    {
        <MudChipSet T="string" AllClosable="true">
            @foreach (var value in Field.StringValuesList)
            {
                <MudChip T="string" Value="@value" Color="Color.Tertiary" OnClose="async x => await RemoveStringArrayValueAsync(x.Value)">@value</MudChip>
            }
        </MudChipSet>

        @* Add value to array *@
        <EditForm Model="_addStringArrayValue" OnValidSubmit="async x => await AddStringArrayValueAsync(_addStringArrayValue)">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value="_addStringArrayValue" />
                <MudButton ButtonType="ButtonType.Submit">Add</MudButton>
            </MudStack>
        </EditForm>
    }
    else if (type == FieldType.MultiSelection && Field.StringValuesList is not null)
    {
        @if (Field.FieldDefinition.Options is not null)
        {
            <MudStack Row Wrap="Wrap.Wrap">
                @foreach (var item in Field.FieldDefinition.Options)
                {
                    var isChecked = Field.StringValuesList.Contains(item);

                    <MudCheckBox Value="@isChecked" T="bool" ValueChanged="async () => await ToggleStringArrayValueAsync(item)">@item</MudCheckBox>
                }
            </MudStack>
        }
    }
}

@code {
    [Parameter] public FieldValue? Field { get; set; }
    [Parameter] public EventCallback<FieldValue?> FieldChanged { get; set; }
    [Parameter] public bool AllowMultiSelection { get; set; } = true;

    private string _addStringArrayValue = "";

    private async Task RemoveStringArrayValueAsync(string? value)
    {
        if (Field is null || value is null)
        {
            return;
        }
        Field.StringValue = null;
        Field.StringValuesList ??= [];
        Field.StringValuesList = Field.StringValuesList.Where(x => x != value).ToList();
        this.StateHasChanged();

        await FieldChanged.InvokeAsync(Field);
    }

    private async Task ToggleStringArrayValueAsync(string value)
    {
        if (Field is null || string.IsNullOrEmpty(value))
        {
            return;
        }
        Field.StringValue = null;
        Field.StringValuesList ??= [];
        if (!Field.StringValuesList.Contains(value))
        {
            Field.StringValuesList.Add(value);
        }
        else
        {
            Field.StringValuesList.Remove(value);
        }

        this.StateHasChanged();

        await FieldChanged.InvokeAsync(Field);
    }

    private async Task AddStringArrayValueAsync(string value)
    {
        if (Field is null || string.IsNullOrEmpty(value))
        {
            return;
        }
        Field.StringValue = null;
        Field.StringValuesList ??= [];
        Field.StringValuesList.Add(value);
        //Field.StringValues = [.. Field.StringValues, value];

        _addStringArrayValue = "";
        this.StateHasChanged();

        await FieldChanged.InvokeAsync(Field);
    }

    protected override void OnParametersSet()
    {
        if (Field?.FieldDefinition?.Type is FieldType.StringArray or FieldType.MultiSelection)
        {
            Field.StringValuesList ??= [];
        }
        base.OnParametersSet();
    }

    private async Task OnStringValueChanged(string value)
    {
        if (Field is not null)
        {
            Field.StringValuesList = null;
            Field.StringValue = value;
            await FieldChanged.InvokeAsync(Field);
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnBooleanValueChanged(bool? value)
    {
        if (Field is not null)
        {
            Field.StringValue = null;
            Field.StringValuesList = null;
            Field.BooleanValue = value;
            await FieldChanged.InvokeAsync(Field);
        }
    }
}
