@using TestBucket.Components.Uploads.Services
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Contracts.Integrations
@inject AttachmentsService attachmentController
@inject FieldController fieldController
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<FieldStrings> fieldLoc

@if(Field?.FieldDefinition is not null) 
{
    var type = Field.FieldDefinition.Type;
    if (!AllowMultiSelection)
    {
        if(type == FieldType.MultiSelection)
        {
            type = FieldType.SingleSelection;
        }
        if (type == FieldType.StringArray)
        {
            type = FieldType.String;
        }
    }

    @if(Field.FieldDefinition.DataSourceType == Contracts.Fields.FieldDataSourceType.Dock)
    {
        <DockToggle Dock="_dock" DockChanged="OnDockChanged"/>
    }
    else if (type == FieldType.String)
    {
        @if(AutoCompleteEnabled)
        {
            <MudAutocomplete Clearable
                T="string"
                Value="@Field.StringValue"
                ValueChanged="OnStringValueChanged"
                SearchFunc="@Search"
                Context="userName"
                Variant="Variant.Outlined"/>
        }
        else
        {
            <MudTextField Value="@Field.StringValue" T="string" ValueChanged="OnStringValueChanged" Variant="Variant.Outlined" Clearable/>
        }
        
    }
    else if (type == FieldType.DateOnly || type == FieldType.DateTimeOffset)
    {
        <div>
            <MudDatePicker
            ShowWeekNumbers
            Color="Color.Primary"
            Variant="Variant.Outlined"
            Clearable
            DateChanged="OnDateChanged"
            Date="_date" />
        </div>
    }
    else if(type == FieldType.ImageUri)
    {
        @if(Field.StringValue is null)
        {
            <UploadFile Accept="*.jpg;*.png" MaxFileSize="100000" FileUploaded="OnImageUploaded"/>
        }
        else
        {
            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                <MudImage Src="@Field.StringValue" Width="48" Height="48"/>
                <MudIconButton Size="Size.Small" OnClick="ClearAsync" Icon="@Icons.Material.Filled.Clear"/>
            </MudStack>
        }
    }
    else if (type == FieldType.SingleSelection)
    {
        <MudSelect Value="@Field.StringValue" T="string" ValueChanged="OnStringValueChanged" Variant="Variant.Outlined" Clearable>
            @foreach (var item in _options.Where(x=>x.Title != null))
            {
                <MudSelectItem Value="@item.Title">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        @fieldLoc[item.Title!]
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
    }
    else if (type == FieldType.Boolean)
    {
        <MudSwitchM3 Value="@Field.BooleanValue" T="bool?" ValueChanged="OnBooleanValueChanged" Color="Color.Tertiary" />
    }
    else if (type == FieldType.StringArray && Field.StringValuesList is not null)
    {
        <MudChipSet T="string" AllClosable="true">
            @foreach (var value in Field.StringValuesList)
            {
                <Chip Text="@value" CanClose OnClose="async x => await RemoveStringArrayValueAsync(x.Text)" />
            }
        </MudChipSet>

        @* Add value to array *@
        <EditForm Model="_addStringArrayValue" OnValidSubmit="async x => await AddStringArrayValueAsync()">
            <MudStack Row="true" AlignItems="AlignItems.Center">
                
                <MudTextField @bind-Value="_addStringArrayValue" Variant="Variant.Outlined"/>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled">@loc["add"]</MudButton>
            </MudStack>
        </EditForm>
    }
    else if (type == FieldType.MultiSelection && Field.StringValuesList is not null)
    {
        <MudSelect SelectedValues="@Field.StringValuesList" T="string" MultiSelection SelectedValuesChanged="OnMultiSelectionChanged" Variant="Variant.Outlined" Clearable>
            @foreach (var item in _options)
            {
                string? color = item.Color;
                string iconStyle = "width:12px; height: 12px";

                <MudSelectItem Value="@item.Title">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        @if (!string.IsNullOrEmpty(item.Icon))
                        {
                            <MudIcon Style="@iconStyle" Icon="@item.Icon" Title="@item.Title" />
                        }
                        @if(item.Title is not null)
                        {
                            <Chip Text="@fieldLoc[item.Title]" Color="@color" />
                        }
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
    }
}

@code {
    [Parameter] public FieldValue? Field { get; set; }
    [Parameter] public EventCallback<FieldValue?> FieldChanged { get; set; }
    [Parameter] public bool AllowMultiSelection { get; set; } = true;

    private string _addStringArrayValue = "";
    private IReadOnlyList<GenericVisualEntity> _options = [];
    private FieldValue? _field;

    private DateTime? _date;

    private async Task OnDateChanged(DateTime? date)
    {
        _date = date;

        if (Field?.FieldDefinition is null)
        {
            return;
        }

        if(date is null)
        {
            Field.DateValue = null;
            Field.DateTimeOffsetValue = null;
        }
        else if(Field.FieldDefinition.Type == FieldType.DateTimeOffset)
        {
            Field.DateTimeOffsetValue = new DateTimeOffset(date.Value.Year, date.Value.Month, date.Value.Day, 0, 0, 0, TimeSpan.Zero);
        }
        else if (Field.FieldDefinition.Type == FieldType.DateOnly)
        {
            Field.DateValue = DateOnly.FromDateTime(date.Value);
        }
        await FieldChanged.InvokeAsync(Field);
    }

    private async Task RemoveStringArrayValueAsync(string? value)
    {
        if (Field is null || value is null)
        {
            return;
        }
        Field.StringValue = null;
        Field.StringValuesList ??= [];
        Field.StringValuesList = Field.StringValuesList.Where(x => x != value).ToList();
        this.StateHasChanged();

        await FieldChanged.InvokeAsync(Field);
    }

    private async Task ToggleStringArrayValueAsync(string value)
    {
        if (Field is null || string.IsNullOrEmpty(value))
        {
            return;
        }
        Field.StringValue = null;
        Field.StringValuesList ??= [];
        if (!Field.StringValuesList.Contains(value))
        {
            Field.StringValuesList.Add(value);
        }
        else
        {
            Field.StringValuesList.Remove(value);
        }

        this.StateHasChanged();

        await FieldChanged.InvokeAsync(Field);
    }

    private async Task AddStringArrayValueAsync()
    {
        var value = _addStringArrayValue;
        if (Field is null || string.IsNullOrEmpty(value))
        {
            return;
        }
        Field.StringValue = null;
        Field.StringValuesList ??= [];
        if(!Field.StringValuesList.Contains(value))
        {
            Field.StringValuesList.Add(value);
        }

        _addStringArrayValue = "";
        this.StateHasChanged();

        await FieldChanged.InvokeAsync(Field);
    }

    private Dock _dock = Dock.Left;

    protected override async Task OnParametersSetAsync()
    {
        if(Field is null)
        {
            return;
        }

        if (Field.Id != _field?.Id)
        {
            _field = Field;
            _options = [];
            _date = null;
            if (Field?.FieldDefinition is null)
            {
                return;
            }

            if (Field.DateTimeOffsetValue is not null)
            {
                _date = Field.DateTimeOffsetValue.Value.Date.ToLocalTime();
            }
            if (Field.DateValue is not null)
            {
                _date = Field.DateValue.Value.ToDateTime(TimeOnly.MinValue);
            }

            if(Field.LongValue is not null)
            {
                _dock = (Dock)Field.LongValue.Value;
            }

            if (Field.FieldDefinition.Type is FieldType.StringArray or FieldType.MultiSelection)
            {
                Field.StringValuesList ??= [];
            }
            if ((Field.FieldDefinition.Type is FieldType.SingleSelection or FieldType.MultiSelection or FieldType.StringArray))
            {
                if(Field.FieldDefinition.DataSourceType != Contracts.Fields.FieldDataSourceType.Dock)
                {
                    _options = await fieldController.GetOptionsAsync(Field.FieldDefinition);
                }
            }
        }
    }

    private async Task OnMultiSelectionChanged(IEnumerable<string> values)
    {
        if (Field is not null)
        {
            Field.StringValuesList = values.ToList();
            await FieldChanged.InvokeAsync(Field);
        }
    }

    private async Task OnStringValueChanged(string value)
    {
        if (Field is not null)
        {
            Field.StringValuesList = null;
            Field.StringValue = value;
            await FieldChanged.InvokeAsync(Field);
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
    private async Task OnDockChanged(Dock value)
    {
        if (Field is not null)
        {
            _dock = value;
            Field.LongValue = (long)value;
            await FieldChanged.InvokeAsync(Field);
        }
    }
    private async Task OnBooleanValueChanged(bool? value)
    {
        if (Field is not null)
        {
            Field.StringValue = null;
            Field.StringValuesList = null;
            Field.BooleanValue = value;
            await FieldChanged.InvokeAsync(Field);
        }
    }
    private async Task ClearAsync()
    {
        if (Field is not null)
        {
            Field.StringValue = null;
            Field.StringValuesList = null;
            Field.BooleanValue = null;
            Field.LongValue = null;

            await FieldChanged.InvokeAsync(Field);
        }
    }

    private async Task<IEnumerable<string>> Search(string text, CancellationToken token)
    {
        if (Field?.FieldDefinition is null)
        {
            return [];
        }
        var result = await fieldController.SearchOptionsAsync(Field.FieldDefinition, text??"", 10, token);
        return result.Where(x=>x.Title != null).Select(x=>x.Title!);
    }

    public bool AutoCompleteEnabled
    {
        get
        {
            if(Field?.FieldDefinition is not null)
            {
                if(Field.FieldDefinition.DataSourceType != Contracts.Fields.FieldDataSourceType.List)
                {
                    return true;
                }
                if(Field.FieldDefinition.Options is null || Field.FieldDefinition.Options.Count == 0)
                {
                    return false;
                }
            }
            return false;
        }
    }

    private async Task OnImageUploaded(FileResource file)
    {
        if (Field is not null)
        {
            //Field.StringValue = $"/api/resources/{file.Id}";

            // Generate a data uri
            string uri = $"data:{file.ContentType};base64,{Convert.ToBase64String(file.Data)}";
            Field.StringValue = uri;

            await FieldChanged.InvokeAsync(Field);

            // Delete it, we no longer need it
            await attachmentController.DeleteResourceByIdAsync(file.Id);

        }
    }
}
