@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Components.Uploads.Controls
@using TestBucket.Domain.Files.Models
@using TestBucket.Domain.Teams.Models
@inject ProjectController projectService

@if (Name is not null)
{
    <MudPaper Class="mb-3 pa-3">
        @if(Icon is not null)
        {
            <MudIcon Size="Size.Large" Icon="@Icon"/>
        }
        <MudText Typo="Typo.h1">@Name</MudText>

        @if(Integration is null)
        {
            <MudText>No existing integration found. Create one now?</MudText>

            <MudStack Row>
                <MudButton Variant="Variant.Outlined" OnClick="AddAsync">Add Integration</MudButton>
            </MudStack>
        }
        else
        {
            <Field Row>
                <FieldHeader>GitLab address</FieldHeader>
                <MudSpacer/>
                <MudTextField Value="Integration.BaseUrl" T="string" ValueChanged="BaseUrlChanged" />
            </Field>
            <Field Row>
                <FieldHeader>GitLab project ID</FieldHeader>
                <MudSpacer />
                <MudTextField Value="Integration.ExternalProjectId" T="string" ValueChanged="ExternalProjectIdChanged" />
            </Field>
            <Field Row>
                <FieldHeader>GitLab project access token</FieldHeader>
                <MudSpacer />
                <MudTextField InputType="InputType.Password" Value="Integration.AccessToken" T="string" ValueChanged="AccessTokenChanged" />
            </Field>
        }
    </MudPaper>
}

@code {
    [Parameter] public EventCallback<ExternalSystem> IntegrationChanged { get; set; }
    [Parameter] public ExternalSystem? Integration { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? Name { get; set; }
    
    private async Task ExternalProjectIdChanged(string externalProjectId)
    {
        if (Integration is not null)
        {
            Integration.ExternalProjectId = externalProjectId;
            await OnChangedAsync();
        }
    }
    private async Task BaseUrlChanged(string baseUrl)
    {
        if (Integration is not null)
        {
            Integration.BaseUrl = baseUrl;
            await OnChangedAsync();
        }
    }
    private async Task AccessTokenChanged(string accessToken)
    {
        if (Integration is not null)
        {
            Integration.AccessToken = accessToken;
            await OnChangedAsync();
        }
    }

    private async Task OnChangedAsync()
    {
        await IntegrationChanged.InvokeAsync(Integration);
    }
    private async Task AddAsync()
    {
        if(this.Name is null) 
        {
            return;
        }

        await IntegrationChanged.InvokeAsync(new ExternalSystem
            {
                Name = this.Name
            });
    }
}
