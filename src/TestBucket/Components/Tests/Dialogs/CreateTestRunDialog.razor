@using TestBucket.Components.Environments.Controls
@attribute [Authorize(Roles = "ADMIN")]
@inject TestCaseEditorController testCaseEditorService
@inject ProjectController projectController
@inject TestEnvironmentController testEnvironmentController
@inject FieldController fieldController
@inject IStringLocalizer<SharedStrings> loc

<EditForm Model="@_run" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <TitleContent>Create new test run</TitleContent>
        <DialogContent>
            <MudStack Spacing="1">
                @if (_loading)
                {
                    <MudProgressLinear Indeterminate Color="Color.Secondary"/>
                }
                @if (_run is not null)
                {
                    <Field Row>
                        <FieldHeader>Name</FieldHeader>
                        <MudSpacer/>
                        <MudTextField AutoFocus="true" Variant="Variant.Outlined" T="string" @bind-Value="@_run.Name"></MudTextField>
                    </Field>

                    <Field Row>
                        <FieldHeader>@loc["test-environment"]</FieldHeader>
                        <MudSpacer />
                        <EnvironmentDropDown Project="@_project" SelectedEnvironment="@_testEnvironment" SelectedEnvironmentChanged="OnTestEnvironmentChanged" />
                    </Field>
                }

                @if (_errorMessage is not null)
                {
                    <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
                }

                <FieldsEditor AutoSaveChanges="false" @ref="_fieldsEditor" TestRun="@_run" />

            </MudStack>
        </DialogContent>

        <DialogActions>
            @if (!_loading)
            {
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">OK</MudButton>
            }
            <MudButton OnClick="Close">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private string? _errorMessage;
    private FieldsEditor? _fieldsEditor;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private TestProject? _project;
    private TestEnvironment? _testEnvironment;

    [Parameter] public long? TestProjectId { get; set; }
    [Parameter] public string? Name { get; set; }

    private TestRun _run = new() { Name = "", TenantId = "", Created = DateTimeOffset.UtcNow };

    private long? _teamId;
    private bool _loading = true;

    private void OnTestEnvironmentChanged(TestEnvironment testEnvironment)
    {
        _testEnvironment = testEnvironment;
        _run.TestEnvironmentId = testEnvironment?.Id;
    }

    protected override async Task OnParametersSetAsync()
    {
        _run.Name = Name ?? "New Run";
        if(TestProjectId is not null)
        {
            _project = await projectController.GetProjectByIdAsync(TestProjectId.Value);
            _testEnvironment = await testEnvironmentController.GetDefaultEnvironmentAsync(TestProjectId.Value);
            _run.TestProjectId = _project?.Id;
            _teamId = _project?.TeamId;
        }
        _loading = false;
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(_run.Name))
        {
            _errorMessage = "Invalid name";
            return;
        }
        if (TestProjectId is null)
        {
            _errorMessage = "project not found";
            return;
        }
        if (_teamId is null)
        {
            _errorMessage = "project/team not found";
            return;
        }
        _run.TestProjectId = TestProjectId;
        _run.TeamId = _teamId;
        _run.TestEnvironmentId = _testEnvironment?.Id;
        await testCaseEditorService.AddTestRunAsync(_run);

        // Save fields for the run
        if(_fieldsEditor is not null)
        {
            if(_fieldsEditor.TestRunFields.Count > 0)
            {
                var fields = _fieldsEditor.TestRunFields;
                foreach(var field in fields)
                {
                    field.TestRunId = _run.Id;
                }

                await fieldController.SaveTestRunFieldsAsync(fields);
            }
        }

        MudDialog.Close(_run);
    }
}

