@using TestBucket.Domain.Automation.Pipelines.Models
@using TestBucket.Domain.Testing.TestRuns.Search
@inherits LayoutComponentBase
@layout AppLayout
@inject TestBrowser browser
@inject TestCaseEditorController testCaseEditor
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc

<TenantRedirect />

<Splitter Style="height: 100%" Bordered="false" Dimension="15" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>
        <div class="tb-navmenu side">
            <TestTreeView @ref="_testTreeView"
                          Project="@_project" 
                          Team="@_team"
                          OnPipelineClicked="OnPipelineClicked"
                          OnTestRunTestsFolderClicked="OnTestRunTestsFolderClicked"
                          OnTestCaseRunQueryClicked="OnTestCaseRunQueryClicked"
                          OnFolderClicked="OnFolderClicked" 
                          OnTestSuiteClicked="OnTestSuiteClicked" 
                          OnTestCaseClicked="OnTestCaseClicked" 
                          OnTestRunClicked="OnTestRunClicked" />
        </div>
    </StartContent>

    <EndContent>
        <CascadingValue Value="@_testCase">
            @Body
        </CascadingValue>
    </EndContent>
</Splitter>

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private TestCase? _testCase;

    private Team? _team;
    private TestProject? _project;
    private TestTreeView? _testTreeView;

    protected override async Task OnParametersSetAsync()
    {
        if (_project != Project || _team != Team)
        {
            _project = Project;
            _team = Team;
        }
        _testCase = appNavigationManager.State.SelectedTestCase;
        var testCaseId = appNavigationManager.GetEntityIdFromCurrentUri();
        if (testCaseId != _testCase?.Id && testCaseId is not null)
        {
            _testCase = await browser.GetTestCaseByIdAsync(testCaseId.Value);
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        appNavigationManager.State.TestTreeView = _testTreeView;
        return base.OnAfterRenderAsync(firstRender);
    }

    private void OnTestCaseClicked(TestCase test)
    {
        appNavigationManager.NavigateTo(test);
    }
    private void OnTestSuiteClicked(TestSuite suite)
    {
        appNavigationManager.NavigateTo(suite);
    }

    private void OnPipelineClicked(Pipeline pipeline)
    {
        appNavigationManager.NavigateTo(pipeline);
    }
    
    private void OnTestCaseRunQueryClicked(SearchTestCaseRunQuery query)
    {
        var url = appNavigationManager.GetUrl(query);
        navigationManager.NavigateTo(url);
    }
    
    private void OnTestRunTestsFolderClicked(TestRun run)
    {
        var url = appNavigationManager.GetUrl(run) + "/Tests";
        navigationManager.NavigateTo(url);
    }

    private void OnFolderClicked(TestSuiteFolder folder)
    {   
        appNavigationManager.NavigateTo(folder);
    }
    private void OnTestRunClicked(TestRun run)
    {
        appNavigationManager.NavigateTo(run);
    }
}
