@using Plotly.Blazor.LayoutLib
@using TestBucket.Contracts.Fields
@using TestBucket.Domain.Testing.Aggregates
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject IStringLocalizer<SharedStrings> loc
@inject ThemingService themingService
@inject FieldController fieldController

<MudStack Spacing="0" Style="width: 100%" Class="pa-2">

    @if (TestRun is not null)
    {
        <MudText Typo="Typo.h1">@TestRun.Name</MudText>


        @if (_results is not null)
        {
            @* <TestResultSummaryBar Summary="@_results"/> *@

            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 8px;">
                <ResultChart Results="@_results" Title="@loc["test-results"]" />

                @foreach(var kvp in _groupedByField)
                {
                    string title = kvp.Key.Name;
                    <StackedResultChart Results="@kvp.Value" Title="@title" />
                }
            </div>
        }
        else
        {
            
        }

        <AttachmentGrid AllowUpload TestRunId="@TestRun.Id" Style="width: 100%" />

        @if (TestRun.SystemOut is not null)
        {
            <pre>
                <code>@TestRun.SystemOut</code>
            </pre>
        }
    }
</MudStack>
@code {

    [Parameter] public TestRun? TestRun { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }

    private Dictionary<FieldDefinition, Dictionary<string, TestExecutionResultSummary>> _groupedByField = [];
    private TestExecutionResultSummary? _results;
    private string? _queryKey;

    protected override async Task OnParametersSetAsync()
    {
        if (TestRun is not null)
        {
            var query = new SearchTestCaseRunQuery()
            {
                TestRunId = TestRun.Id
            };

            var queryKey = query.AsCacheKey();
            if (queryKey != _queryKey)
            {
                _queryKey = queryKey;
                _results = await testBrowser.GetTestExecutionResultSummaryAsync(query);

                if (Project is not null)
                {
                    var fields = await fieldController.GetDefinitionsAsync(Project.Id, FieldTarget.TestCaseRun);
                    _groupedByField.Clear();
                    foreach (var field in fields.Where(x => x.Type == FieldType.SingleSelection))
                    {
                        var results = await testBrowser.GetTestExecutionResultSummaryByFieldAsync(query, field);
                        _groupedByField[field] = results;
                    }
                }
            }
        }
    }
}
