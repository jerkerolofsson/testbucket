@attribute [Authorize()]
@page "/{TenantId}/Requirements/Specifications/{Id:long}/Timeline"
@using MudGantt
@using TestBucket.Components.Milestones.Controllers
@using TestBucket.Components.Requirements.Utilities
@layout RequirementSpecificationLayout
@inject RequirementBrowser browser
@inject MilestonesController milestonesController
@inject AppNavigationManager appNavigationManager
@inject RequirementEditorController controller

<MudStack Class="container-fill scroll">
    @if (_specification is not null && Project is not null)
    {
          <MudGanttChart  Tasks="@_tasks" 
                        Dense
                        Size="Size.Small"
                        Events="@_events" 
                        TaskDatesChanged="OnDatesChanged"
                        TaskClicked="OnTaskClicked"
                        ContextMenuOpening="OnTaskContextMenuOpening"
                        TaskProgressChanged="OnProgressChanged">
                        <TaskContextMenu>
                            <CommandMenuItems Flatten TypeNames="Requirement"/>
                        </TaskContextMenu>
        </MudGanttChart>        
    }
</MudStack>

@code {
    [Parameter] public long Id { get; set; }
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public RequirementSpecification? RequirementSpecification { get; set; }

    private RequirementSpecification? _specification;
    private Requirement[] _requirements = [];

    private List<MudGanttTask> _tasks = [];
    private List<MudGanttEvent> _events = [];


    private void OnTaskContextMenuOpening(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                appNavigationManager.State.SetSelectedRequirement(requirement);
            }
        }
    }

    private void OnTaskClicked(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                appNavigationManager.NavigateTo(requirement);
            }
        }
    }
    private async Task OnProgressChanged(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                requirement.Progress = task.Progress;
                await controller.SaveRequirementAsync(requirement);
            }
        }
    }
    private async Task OnDatesChanged(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _requirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                requirement.StartDate = task.StartDate?.ToUniversalTime();
                requirement.DueDate = task.EndDate?.ToUniversalTime();
                await controller.SaveRequirementAsync(requirement);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(RequirementSpecification is not null && RequirementSpecification.Id != _specification?.Id)
        {
            _specification = RequirementSpecification;

            var result = await browser.SearchRequirementsInSpecificationAsync(_specification.Id, 0, 100);
            _requirements = result.Items;

            var milestones = await milestonesController.GetMilestonesAsync(Project);
            _events = milestones.Where(x => x.EndDate != null && !string.IsNullOrWhiteSpace(x.Title)).Select(x => new MudGanttEvent
            {
                Name = x.Title ?? "",
                Date = x.EndDate!.Value,
                Id = x.Id.ToString(),
            }).ToList();

            _tasks.AddRange(_requirements.Select(x =>
                new MudGanttTask
                {
                    Id = x.Id.ToString(),
                    Name = x.Name,
                    StartDate = x.StartDate ?? DateTime.UtcNow,
                    EndDate = x.DueDate ?? DateTimeOffset.UtcNow.AddDays(1),
                    Progress = x.Progress ?? 0,
                    Links = RequirementGanntHelper.GetDependencies(x),
                    Color = RequirementColors.GetColor(x)
                }
            ));
            this.StateHasChanged();
        }
    }

}
