@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Components.Uploads.Controls
@using TestBucket.Domain.Files.Models
@using TestBucket.Domain.Teams.Models
@inject ProjectService projectService
@inject TeamService teamService

@if (Project is not null)
{
    <EditForm Model="@Project" OnValidSubmit="async () => await OnValidSubmitAsync()">

        <MudTabs>
            <MudTabPanel Text="General">
                <MudStack>

                    <Field>
                        <FieldHeader>Image</FieldHeader>
                        <UploadFile Accept=".png" FileUploaded="OnImageUploaded" />
                    </Field>

                    <Field>
                        <FieldHeader>Name</FieldHeader>
                        <MudTextField Variant="Variant.Outlined" T="string" @bind-Value="@Project.Name"></MudTextField>
                    </Field>

                    <Field>
                        <FieldHeader>Slug</FieldHeader>
                        <MudText>@Project?.Slug</MudText>
                    </Field>

                    <Field>
                        <FieldHeader>ID</FieldHeader>
                        <MudText>@Project?.Id</MudText>
                    </Field>

                    <Field>
                        <FieldHeader>Team</FieldHeader>
                        <TeamDropDown SelectedTeam="_team" SelectedTeamChanged="OnTeamChanged" />
                    </Field>

                    <FieldHeader>Grant access to all users</FieldHeader>
                    <MudText>@Project?.GrantAccessToAllTenantUsers</MudText>
                </MudStack>
            </MudTabPanel>

            <MudTabPanel Text="Fields">
                <FieldDefinitionTable ProjectId="@Project.Id"/>
            </MudTabPanel>

        </MudTabs>


        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>
    </EditForm>
}

@code {
    [Parameter] public TestProject? Project { get; set; }

    private Team? _team;

    private async Task OnValidSubmitAsync()
    {
        if (Project is not null)
        {
            await projectService.SaveProjectAsync(Project);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Project?.TeamId is not null)
        {
            _team = await teamService.GetTeamByIdAsync(Project.TeamId.Value);
        }
    }

    private void OnTeamChanged(Team? team)
    {
        _team = team;
        if(Project is not null)
        {
            Project.TeamId = team?.Id;
        }
    }

    private void OnImageUploaded(FileResource file)
    {
        if(Project is not null)
        {
            Project.IconUrl = $"/api/resources/{file.Id}";
        }
    }
}
