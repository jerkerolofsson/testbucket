@using MudBlazor.Utilities
@using TestBucket.Components.Shared.Splitter
@using TestBucket.Domain.Requirements
@inject RequirementEditorController editor
@inject RequirementBrowser browser
@inject IStringLocalizer<SharedStrings> loc

@if(Requirement is not null)
{
    <div class="container-fill-2-rows">
        <MudToolBar Class="tb-toolbar">
            @if (_editor is not null)
            {
                <MudButton Class="@EditButtonClassname" OnClick="async () => await _editor.SetPreviewAsync(false)">@loc["edit"]</MudButton>
                <MudButton Class="@(PreviewButtonClassname)" OnClick="async () => await SaveChangesAsync()">@loc["preview"]</MudButton>
            }
            @if (!_preview && _editor is not null)
            {
                <MudTextField Variant="Variant.Outlined" Label="Name" AdornmentColor="Color.Tertiary" Value="@Requirement.Name" ValueChanged="OnNameChanged" T="string" AutoFocus="true" />

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
            }
            else
            {
                <MudText Typo="Typo.h3" Class="mr-3">@Requirement.Name</MudText>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudSpacer/>

                <MudTooltip Text="Linked test cases">
                    @(_links.Length) tests
                </MudTooltip>
            }
        </MudToolBar>

        <Splitter Class="container-fill" Bordered="false" Dimension="80" EnableMargin="false" Color="Color.Tertiary">
            <StartContent>
                <MudStack Class="pa-2" Style="width: 100%; height: 100%">
                    <MarkdownEditor 
                    @ref="_editor"
                    @bind-Preview="_preview"
                    ShowToolbar="false"
                    MaxHeight="100%"
                    MinHeight="100%"
                    Color="Color.Primary"
                    AllowResize="true"
                    Value="@Requirement.Description"
                    ValueChanged="OnDescriptionChanged"
                    SpellChecker="false">
                    </MarkdownEditor>
                </MudStack>
            </StartContent>
            <EndContent>

                <MudStack>

                    <FieldsEditor Requirement="@Requirement" />

                    <Field>
                        <FieldHeader>@loc["attachments"]</FieldHeader>
                        <AttachmentGrid RequirementId="@Requirement.Id" Style="width: 100%" />
                    </Field>


                    <Field>
                        <FieldHeader>@loc["requirement-coverage"]</FieldHeader>
                        <RequirementTestLinksTable Team="@Team" Project="@Project" Requirement="@Requirement" />
                    </Field>

                </MudStack>

            </EndContent>
        </Splitter>

    </div>
}

@code {
    [Parameter] public Requirement? Requirement { get; set; }
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestProject? Project {get;set;}

    [Parameter] public Color Color { get; set; } = Color.Surface;
    [Parameter] public Color ColorAlt { get; set; } = Color.Tertiary;

    protected string EditButtonClassname =>
    new CssBuilder("mud-markdown-toolbar-toggle-button")
    .AddClass($"mud-{ColorAlt.ToDescriptionString()}-selected", Color != Color.Default && Color != Color.Inherit)
    .AddClass($"mud-markdown-toolbar-toggle-button-selected", _preview != true)
    .Build();

    protected string PreviewButtonClassname =>
        new CssBuilder("mud-markdown-toolbar-toggle-button")
            .AddClass($"mud-{ColorAlt.ToDescriptionString()}-selected", Color != Color.Default && Color != Color.Inherit)
            .AddClass($"mud-markdown-toolbar-toggle-button-selected", _preview == true)
            .AddClass(" mr-5", true)
            .Build();

    private MarkdownEditor? _editor;
    private bool _preview = true;

    private RequirementTestLink[] _links = [];

    private void BeginEdit()
    {
        _preview = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Requirement is not null)
        {
            _links = await browser.GetLinksForRequirementAsync(Requirement);
        }
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        if (Requirement is not null)
        {
            await editor.SaveRequirementAsync(Requirement);
        }
    }


    private void OnNameChanged(string name)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Name = name;
    }

    private void OnDescriptionChanged(string description)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Description = description;
    }
}
