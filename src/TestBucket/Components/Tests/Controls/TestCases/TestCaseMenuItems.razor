@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject ITestCaseManager testCaseManager
@inject ITestRunManager testRunManager
@inject TestSuiteService testSuiteService
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreation
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc

@if (TestCase is not null)
{
    <MudMenuItem Icon="@Icons.Material.Filled.PlayArrow" OnClick="RunAsync">Run</MudMenuItem>
    <MudDivider />
    <MudMenuItem Icon="@Icons.Material.Filled.ContentCopy" OnClick="DuplicateTestAsync">@loc["duplicate"]</MudMenuItem>
    <MudMenuItem Icon="@Icons.Material.Filled.Code" OnClick="EditTestCaseAutomationLinkAsync">Link to automated test</MudMenuItem>
    <MudDivider />
    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="DeleteTestCaseAsync" Label="@loc["delete"]" />
}
@code {
    [Parameter] public TestCase? TestCase { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }

    private async Task RunAsync()
    {
        if (TestCase?.TestProjectId is null)
        {
            return;
        }
        long[] testCaseIds = [TestCase.Id];
        var run = await testRunCreation.CreateTestRunAsync(TestCase.Name, TestCase.TestProjectId.Value, testCaseIds);
        if (run is not null)
        {
            appNavigationManager.NavigateTo(run);
        }
    }

    private async Task DuplicateTestAsync()
    {
        if (TestCase is null)
        {
            return;
        }
        await testCaseEditor.DuplicateTestAsync(TestCase);
    }

    private async Task EditTestCaseAutomationLinkAsync()
    {
        if (TestCase is null)
        {
            return;
        }
        await testCaseEditor.EditTestCaseAutomationLinkAsync(TestCase);
    }
    private async Task DeleteTestCaseAsync()
    {
        if (TestCase is null)
        {
            return;
        }
        await testCaseEditor.DeleteTestCaseAsync(TestCase);
    }
}
