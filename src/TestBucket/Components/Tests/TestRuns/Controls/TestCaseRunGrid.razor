@using TestBucket.Components.Metrics.Controls.Controls
@using TestBucket.Components.Shared.Profile
@using TestBucket.Components.Metrics.Controls
@using TestBucket.Components.Tests.TestRuns.Controllers
@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject ITestCaseManager testCaseManager
@inject ITestRunManager testRunManager
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreationService
@inject TestExecutionController testExecutionController
@inject FieldController fieldController
@implements IDisposable
@implements ITestRunObserver
@inject IStringLocalizer<SharedStrings> loc
@inject AuthenticationStateProvider authStateProvider
<div class="tb-test-case-run-grid">
    <MudStack>
        <MudStack Spacing="3" Row AlignItems="AlignItems.Center" Class="pa-2">
            @if (_run is not null)
            {
                <MudText Typo="Typo.h1" Color="Color.Primary">@_totalCount</MudText>
                <MudText Typo="Typo.h1">@_run.Name</MudText>
            }
        </MudStack>

        <DropZone T="TestEntity" OnDrop="OnDrop">
            <MudDataGrid ServerData="LoadGridData"
                         Class="tb-test-case-run-grid tb-data-grid-verydense"
                         RowClassFunc="RowClassFunc"
                         Dense
                         Bordered
                         CurrentPage="@_currentPage"
                         CurrentPageChanged="OnCurrentPageChanged"
                         RowsPerPage="@_rowsPerPage"
                         RowsPerPageChanged="OnRowsPerPageChanged"
                         SelectOnRowClick="true"
                         MultiSelection="false"
                         T="TestCaseRun"
                         RowClick="(e) => OnClicked(e.Item)"
                         @ref="_dataGrid"
                         SortMode="SortMode.None">

                <ToolBarContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">

                        <MudTextField Value="_searchText" T="string" ValueChanged="OnSearch"
                            Class="default-search"
                            Clearable="true"
                            Placeholder="@loc["search-tests"]"
                            Variant="Variant.Outlined"
                            IconSize="Size.Small"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" />

                        <MudSpacer />

                        <TestCaseRunFilterEditor Query="Query" QueryChanged="OnQueryChanged" />

                        <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert">
                            <CommandMenuItems TypeNames="TestRun" />
                        </MudMenu>
                    </MudStack>
                </ToolBarContent>

                <ColGroup>
                    <col style="width: 50px"/>
                    <col style="width: 100px;" />
                    <col style="width: 100%;" />
                    <col style="width: 120px;" />
                    <col style="width: 65px;" />
                </ColGroup>

                <Columns>

                    <TemplateColumn>
                        <CellTemplate>
                            <div class="checkbox">
                                <MudCheckBox T="bool" Size="Size.Small" Value="@IsSelected(context.Item)" ValueChanged="(isChecked) => SetSelected(context.Item, isChecked)"/>
                            </div>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="@loc["test-result"]">
                        <CellTemplate>
                            @if(context.Item.MappedState == Contracts.Testing.States.MappedTestState.Ongoing)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate/>
                            }
                            else 
                            {
                                <ResultPill Result="@context.Item.Result" ReadOnly="@(!CanChangeResult)" ResultChanged="async (result) => await SetTestCaseRunResultAsync(context.Item, result)" />
                            }
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="@loc["name"]" CellStyle="max-width: 100%; overflow: hidden">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.Name">
                                <div class="name">@context.Item.Name</div>
                            </MudTooltip>
                            <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">

                                @if(context.Item.Metrics is not null && context.Item.Metrics.Count > 0)
                                {
                                    <MetricChip Metric="@context.Item.Metrics[0]"/>
                                }

                                @if (CanAssign)
                                {
                                    <UserPicker Clearable 
                                                SelectedUserName="@context.Item.AssignedToUserName" SelectedUserNameChanged="async (user) => await AssignRunToUserAsync(context.Item, user)" />
                                }
                                else if (!string.IsNullOrEmpty(context.Item.AssignedToUserName))
                                {
                                    <UserPicker ReadOnly
                                                SelectedUserName="@context.Item.AssignedToUserName" />
                                }

                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>


                    <TemplateColumn Title="">
                        <CellTemplate>
                            @if(CanRun)
                            {
                                @if(context.Item.Result != Contracts.Testing.Models.TestResult.NoRun)
                                {
                                    <MudLink OnClick="async () => await RunTestAgain(context.Item)" Style="font-size: 8pt">@loc["run-test-again"]</MudLink>
                                }
                                else
                                {
                                    <MudLink OnClick="async () => await RunTest(context.Item)" Style="font-size: 8pt">@loc["run"]</MudLink>
                                }
                            }
                            else
                            {
                                @context.Item.Modified.Humanize()
                            }

                        </CellTemplate>
                    </TemplateColumn>


                    <TemplateColumn StickyRight>
                        <CellTemplate>
                            <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert" OpenChanged="() => SetSelectedTestCaseRun(context.Item)">
                                <CommandMenuItems TypeNames="TestCaseRun" />
                            </MudMenu>
                        </CellTemplate>
                    </TemplateColumn>

                </Columns>

                <PagerContent>
                    <MudDataGridPager T="TestCaseRun" PageSizeOptions="@([10,15,20,25,50,100,200])"/>
                </PagerContent>
            </MudDataGrid>
        </DropZone>
    </MudStack>
</div>