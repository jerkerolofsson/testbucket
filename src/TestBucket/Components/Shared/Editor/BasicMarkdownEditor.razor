@inject IStringLocalizer<SharedStrings> loc

<MudToolBar Class="tb-toolbar">

    @if (!_preview && _editor is not null)
    {
        @if(CanSave)
        {
            <MudTooltip Text="@loc["save"]">
                <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveChangesAsync" Class="rounded-0" />
            </MudTooltip>
            <MudDivider DividerType="DividerType.Middle" Vertical />
        }

        <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
        <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()" Class="rounded-0" />

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
        @* <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton> *@

        @if (UploadHandler is not null)
        {
            <MudFileUpload T="IBrowserFile"
            Accept="@ImageAccept"
            FilesChanged="async(file) => await _editor.UploadImageAsync(file)"
            Hidden="@false"
            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
            InputStyle="opacity:0"
            tabindex="-1">
                <ActivatorContent>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudIconButton Icon="@Icons.Material.Filled.Image" Class="rounded-0"></MudIconButton>
                    </MudStack>
                </ActivatorContent>
            </MudFileUpload>
        }

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
    }
    else
    {
        @ToolbarTitle
        <MudSpacer/>
        <MudTooltip Text="@loc["edit"]">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => BeginEdit()" Class="rounded-0" />
        </MudTooltip>
    }

</MudToolBar>

<MarkdownEditor ShowToolbar="false"
    ImageAccept="@ImageAccept"
    UploadHandler="@UploadHandler"
    MaxHeight="100%"
    MinHeight="100%"
    EnableRunCode="false"
    EnableCopyCodeToClipboard="true"
    Color="Color.Primary"
    AllowResize="false"
    ValueUpdateMode="ValueUpdateMode.OnChange"
    @bind-Preview="_preview"
    Value="@_text"
    @ref=_editor
    ValueChanged="OnTextChanged"
    SpellChecker="false">
</MarkdownEditor>
@code {

    [Parameter] public string? ToolbarTitle { get; set; }
    [Parameter] public bool CanSave { get; set; }

    [Parameter] public bool? Preview { get; set; }

    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }

    
    /// <summary>
    /// A comma-separated list of mime-types used to check image type before upload (note: never trust client, always
    /// check file types at server-side). Defaults to image/png, image/jpeg.
    /// </summary>
    [Parameter]
    public string ImageAccept { get; set; } = "image/png, image/jpeg, image/jpg, image.gif";

    /// <summary>
    /// Handler that should save the image uploaded by the user and return an URL to the image
    /// </summary>
    [Parameter] public ImageUploadHandler? UploadHandler { get; set; }


    private bool _preview = true;
    private MarkdownEditor? _editor;
    private string? _text;
    private void BeginEdit()
    {
        _preview = false;
    }

    protected override void OnInitialized()
    {
        if(Preview is not null)
        {
            _preview = Preview.Value;
        }
    }

    private async Task OnTextChanged(string description)
    {
        if (_preview)
        {
            return;
        }
        _text = description;

        if(!CanSave)
        {
            await TextChanged.InvokeAsync(_text);
        }
    }

    protected override void OnParametersSet()
    {
        _text = Text ?? "";
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        await TextChanged.InvokeAsync(_text);
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (Text is not null)
    //     {
    //         if (_text != Text && _preview)
    //         {
    //             _text = Text;
    //             if (_editor is not null)
    //             {
    //                 await _editor.SetValueAsync(Text!);
    //                 this.StateHasChanged();
    //             }
    //         }
    //     }
    //     else
    //     {
    //          = null;
    //     }
    // }
}
