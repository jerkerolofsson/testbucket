@attribute [Authorize()]
@using FluentValidation
@using FluentValidation.Results
@using TestBucket.Domain.Testing.TestCases.Templates
@inject TestCaseEditorController testCaseEditorService
@inject TestSuiteController testSuiteController
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<ValidationStrings> validationLoc
@inject IValidator<TestCase> validator
@inject IEnumerable<ITestCaseTemplate> templates

<EditForm Model="@_testCase" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <DialogContent>

            @if(_loading)
            {
                <MudProgressLinear Indeterminate/>
            }
            else
            {
                <MudStack Spacing="5">

                    @* Folder and name *@
                    <label>@loc["name"]
                        <MudStack Spacing="1" Style="min-width: 30vw" Row AlignItems="AlignItems.Center">
                            <MudLink OnClick="ChangeFolderAsync">@(FolderPath)/</MudLink>
                            <MudTextField 
                                AutoFocus T="string" Value="@_testCase.Name" ValueChanged="OnNameChanged"></MudTextField>
                        </MudStack>
                    </label>
                    <label>@loc["template"]
                        @* Test case template *@
                        <MudStack Row Wrap="Wrap.Wrap" Style="max-width: 50vw">
                            <MudRadioGroup @bind-Value="_template">

                                @foreach(var template in templates)
                                {
                                    <MudRadio Class="settings-radio-lg" Color="Color.Tertiary" Value="@template.Name">
                                        @if(template.Icon is not null)
                                        {
                                            <MudIcon Icon="@template.Icon"/>
                                        }
                                        @loc[("template-" + template.Name.ToLower())]
                                    </MudRadio>    
                                }
                            </MudRadioGroup>
                        </MudStack>
                    </label>

                    @* If no test suite is selected, allow the user to pick one *@
                    @if(_testCase.TestSuiteId == 0)
                    {
                        <MudLink OnClick="ChangeTestSuiteAsync">@loc["select-test-suite"]</MudLink>
                    }
                    else
                    {
                        <MudLink OnClick="ChangeTestSuiteAsync">@_testSuite?.Name</MudLink>

                        @if (_validationResult is not null)
                        {
                            <FluentValidationResultSummary Result="@_validationResult" StringLocalizer="@validationLoc" />
                        }
                    }

                </MudStack>
          }
        </DialogContent>

        <DialogActions>
            @if (_validationResult is null)
            {
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            }
            <MudButton OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private bool _loading = false;

    [Parameter] public string? Name { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }
    [Parameter] public TestSuiteFolder? Folder { get; set; }
    [Parameter] public long? TestSuiteId { get; set; }
    [Parameter] public bool IsTemplate { get; set; } = false;
    [Parameter] public ScriptType ScriptType { get; set; } = ScriptType.ScriptedDefault;

    private TestCase _testCase = new() { Name = "", TenantId = "" };
    private TestSuite? _testSuite;
    private TestSuiteFolder? _folder;
    private string _name = "";
    private string _template = "blank";
    private FluentValidation.Results.ValidationResult? _validationResult = new FluentValidation.Results.ValidationResult();

    /// <summary>
    /// Returns the name shown in the UI
    /// </summary>
    private string FolderPath
    {
        get
        {
            var path = new StringBuilder();

            if(_testSuite is not null)
            {
                path.Append(_testSuite.Name);
                path.Append("/");
            }
            if (!string.IsNullOrEmpty(_folder?.Path))
            {
                path.Append(_folder.Path);
                path.Append("/");
            }
            if (!string.IsNullOrEmpty(_folder?.Name))
            {
                path.Append(_folder.Name);
                path.Append("/");
            }
            if (!string.IsNullOrEmpty(_testCase?.Path))
            {
                path.Append(_testCase?.Path);
            }
            return path.ToString().TrimEnd('/');
        }
    }

    private void OnNameChanged(string name)
    {
        _name = name;
        var components = name.Split('/');
        if(components.Length == 1)
        {
            _testCase.Name = name;
            _testCase.Path = "";
        }
        else
        {
            _testCase.Name = components.Last();
            _testCase.Path = string.Join('/', components.Take(components.Length-1));
        }
        Validate();
    }

    protected override async Task OnParametersSetAsync()
    {
        _testCase.TestProjectId ??= Project?.Id;

        this.OnNameChanged(Name ?? "New Test");

        if(TestSuiteId is not null)
        {
            var testSuite = await testSuiteController.GetTestSuiteByIdAsync(TestSuiteId.Value);
            ChangeTestSuite(testSuite);
        }

        await OnFolderChangedAsync(Folder);
        Validate();
    }

    private void ChangeTestSuite(TestSuite? suite)
    {
        _testSuite = suite;
        if(_testSuite is not null)
        {
            _testCase.TestSuiteId = _testSuite.Id;
            _testCase.TeamId = _testSuite.TeamId ?? Team?.Id;
            _testCase.TestProjectId = _testSuite.TestProjectId ?? Project?.Id;

            if (_folder?.TestSuiteId != _testSuite.Id)
            {
                _folder = null;
                _testCase.TestSuiteFolderId = null;
            }
        }
        else
        {
            _testCase.TestSuiteId = 0;
        }
        Validate();
    }
    private async Task OnFolderChangedAsync(TestSuiteFolder? folder)
    {
        _folder = folder;
        if (folder is not null)
        {
            _testCase.TestSuiteFolderId = folder.Id;
            _testCase.TeamId = folder.TeamId ?? Team?.Id;
            _testCase.TestProjectId = folder.TestProjectId ?? Project?.Id;

            if (folder.TestSuiteId != _testCase.TestSuiteId)
            {
                var testSuite = await testSuiteController.GetTestSuiteByIdAsync(folder.TestSuiteId);
                ChangeTestSuite(testSuite);
            }
        }
    }


    public async Task ChangeTestSuiteAsync()
    {
        if (Project is not null)
        {
            var testSuite = await testSuiteController.PickTestSuiteAsync(Project);
            if (testSuite is not null)
            {
                ChangeTestSuite(testSuite);
            }
        }
    }

    public async Task ChangeFolderAsync()
    {
        if (Project is not null)
        {
            var folder = await testSuiteController.PickFolderAsync(Project);
            if (folder is not null)
            {
                await OnFolderChangedAsync(folder);
            }
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }


    private bool Validate()
    {
        _validationResult = validator.Validate(_testCase);

        if(_validationResult.IsValid)
        {
            _validationResult = null;
            return true;
        }
        return false;
    }

    private async Task OnValidSubmitAsync()
    {
        Validate();
        if(_validationResult is not null)
        {
            return;
        }

        if(_loading)
        {
            return;
        }

        _loading = true;
        this.StateHasChanged();

        _testCase.ScriptType = ScriptType;
        _testCase.IsTemplate = IsTemplate;
        await testCaseEditorService.AddTestCaseAsync(_testCase, _template);
        MudDialog.Close(_testCase);
    }
}

