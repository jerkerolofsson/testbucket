@using TestBucket.Components.Comments
@using TestBucket.Components.Comments.Controls
@using TestBucket.Contracts.Issues.States
@using TestBucket.Contracts.Issues.Types
@using TestBucket.Domain.Comments.Models
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc
@inject IssueController controller
@inject IIssueManager manager
@inject CommentsController comments
@implements IDisposable
@implements ILocalIssueObserver
@using TestBucket.Components.Shared.Fields
@using TestBucket.Domain.Issues

@if (_issue is not null)
{
    <Splitter Class="container-fill" Bordered="false" Dimension="70" EnableMargin="false">
        <StartContent>
            <MudStack Style="width: 100%" Class="pa-2" Spacing="0">

                <MudStack Spacing="3" Row AlignItems="AlignItems.Center">
                    @if(_preview)
                    {
                        <MudText Typo="Typo.h1" Color="Color.Primary">@_issue.ExternalDisplayId</MudText>
                        <MudText Typo="Typo.h1">@_issue.Title</MudText>
                    }
                    else
                    {
                        <MudStack Spacing="0" Style="width: 100%">
                            <FieldHeader for="issue-title">@loc["title"]</FieldHeader>
                            <MudTextField id="issue-title" Style="width: 100%" Variant="Variant.Outlined" T="string" ValueChanged="OnTitleChanged" Value="@_issue.Title"></MudTextField>
                        </MudStack>
                    }
                </MudStack>

                <MudStack Spacing="0" Row AlignItems="AlignItems.Center">
                    <MudChip T="string" Style="@StateColorStyle">@_issue.State</MudChip>
                </MudStack>

                <MudStack Spacing="0" Class="mt-2 mb-2">
                    <FieldHeader for="issue-description">@loc["description"]</FieldHeader>
                    <MarkdownEditor id="issue-description" ValueChanged="OnDescriptionChanged" Value="@_issue.Description" @bind-Preview="@_preview" TextAreaClass="tb-issue-description"/>
                </MudStack>

                <CommentThread Comments="@_comments" CommentAdded="OnCommentAdded" CommentDeleted="OnCommentDeleted" />
            </MudStack>
        </StartContent>
        <EndContent>
            <MudStack Style="width: 100%" Class="pa-2">

                <Field>
                    <FieldHeader>@loc["created"]</FieldHeader>
                    <div>
                        <div>@_issue.Created</div>
                        <div>@_issue.Modified</div>
                        <div>@_issue.Closed</div>
                    </div>
                </Field>

                <Field>
                    <FieldHeader>@loc["assigned-to"]</FieldHeader>
                    <UserPicker SelectedUserName="@_issue.AssignedTo" SelectedUserNameChanged="OnAssignedToChanged"/>
                </Field>
                <Field>
                    <FieldHeader>@loc["state"]</FieldHeader>
                    <IssueStateSelect State="_state" StateChanged="OnStateChanged"/>
                </Field>
                <FieldsEditor Issue="@_issue" />

                <Field>
                    <FieldHeader>@loc["type"]</FieldHeader>
                    <IssueTypeSelect Type="_type" TypeChanged="OnTypeChanged" />
                </Field>

                <PermissionView Entity="PermissionEntityType.Issue" Level="PermissionLevel.Delete">
                    <Authorized>
                        <MudStack Row Justify="Justify.FlexEnd">
                            <MudButton 
                                data-testid="delete-issue"
                                Class="tb-button-delete"
                                Variant="Variant.Filled" OnClick="DeleteAsync">@loc["delete"]</MudButton>
                        </MudStack>
                    </Authorized>
                </PermissionView>
            </MudStack>
        </EndContent>
    </Splitter>
}

@code {
    [Parameter] public LocalIssue? Issue { get; set; }
    [Parameter] public EventCallback<LocalIssue> IssueChanged { get; set; }
    [Parameter] public EventCallback<LocalIssue> Delete { get; set; }
    [Parameter] public long? TestProjectId { get; set; }
    private List<Comment> _comments = [];
    private LocalIssue? _issue;

    private string StateColorStyle => $"color: {IssueStateColors.GetDefaultTextColor(Issue?.MappedState)}; background: {IssueStateColors.GetDefaultBackgroundColor(Issue?.MappedState)}";

    private bool _preview = true;

    private IssueState _state = new IssueState { MappedState = MappedIssueState.Open };
    private IssueType _type = new IssueType { MappedType = MappedIssueType.Issue };

    protected override void OnParametersSet()
    {
        _issue = Issue;
        _comments = _issue?.Comments ?? [];
        if(_issue is not null)
        {
            _state = new IssueState { MappedState = _issue.MappedState ?? MappedIssueState.Open, Name = _issue.State };
            _type = new IssueType { MappedType = _issue.MappedType ?? MappedIssueType.Issue, Name = _issue.IssueType };
        }
    }
    private async Task OnAssignedToChanged(string name)
    {
        if (Issue is not null && Issue.AssignedTo != name)
        {
            Issue.AssignedTo = name;
            await controller.UpdateIssueAsync(Issue);
        }
    }
    private async Task OnTypeChanged(IssueType type)
    {
        if (_type.Name != type.Name || _type.MappedType != _type.MappedType)
        {
            _type = type;
            if (Issue is not null)
            {
                Issue.MappedType = type.MappedType;
                Issue.IssueType = type.Name;
                await controller.UpdateIssueAsync(Issue);
            }
        }
    }
    private async Task OnStateChanged(IssueState state)
    {
        if (_state.Name != state.Name || _state.MappedState != state.MappedState)
        {
            _state = state;
            if (Issue is not null)
            {
                Issue.MappedState = state.MappedState;
                Issue.State = state.Name;
                await controller.UpdateIssueAsync(Issue);
            }
        }
    }

    private async Task OnCommentAdded(Comment comment)
    {
        if (Issue is not null)
        {
            comment.TeamId = Issue.TeamId;
            comment.TestProjectId = Issue.TestProjectId;
            comment.LocalIssueId = Issue.Id;
            _comments.Add(comment);
            await comments.AddCommentAsync(comment);
        }
    }
    private async Task OnCommentDeleted(Comment comment)
    {
        _comments.Remove(comment);
        await comments.DeleteCommentAsync(comment);
    }

    private async Task OnDescriptionChanged(string description)
    {
        if (Issue is null) return;

        Issue.Description = description;
        await IssueChanged.InvokeAsync(Issue);
    }
    private async Task OnTitleChanged(string title)
    {
        if (Issue is null) return;

        Issue.Title = title;
        await IssueChanged.InvokeAsync(Issue);
    }

    private async Task DeleteAsync()
    {
        if (Issue is null) return;
        await Delete.InvokeAsync(Issue);
    }

    protected override void OnInitialized()
    {
        manager.AddObserver(this);
    }

    public void Dispose()
    {
        manager.RemoveObserver(this);
    }

    public Task OnLocalIssueAddedAsync(LocalIssue issue)
    {
        return Task.CompletedTask;
    }
    public async Task OnLocalIssueUpdatedAsync(LocalIssue issue)
    {
        if (_issue?.Id == issue.Id)
        {
            _issue = Issue;
            _comments = _issue?.Comments ?? [];
            if (_issue is not null)
            {
                _state = new IssueState { MappedState = _issue.MappedState ?? MappedIssueState.Open, Name = _issue.State };
                _type = new IssueType { MappedType = _issue.MappedType ?? MappedIssueType.Issue, Name = _issue.IssueType };
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task OnLocalIssueFieldChangedAsync(LocalIssue issue)
    {
        if(_issue?.Id == issue.Id)
        {
            _issue = Issue;
            _comments = _issue?.Comments ?? [];

            if (_issue is not null)
            {
                _state = new IssueState { MappedState = _issue.MappedState ?? MappedIssueState.Open, Name = _issue.State };
                _type = new IssueType { MappedType = _issue.MappedType ?? MappedIssueType.Issue, Name = _issue.IssueType };
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    public Task OnLocalIssueDeletedAsync(LocalIssue issue)
    {

        return Task.CompletedTask;
    }

}
