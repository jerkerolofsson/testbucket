@using TestBucket.Contracts.Localization
@using TestBucket.Domain.AI.Agent
@using TestBucket.Domain.AI.Agent.Models
@using TestBucket.Domain.AI.Agent.Orchestration
@inject IChatClientFactory chatClientFactory
@inject IServiceProvider serviceProvider
@inject AuthenticationStateProvider authenticationStateProvider
@inject AppNavigationManager appNavigationManager
@inject AgentChatContext context
@inject IAppLocalization loc

<div class="tb-agent-chat">
    <MudStack Style="width: 100%" Spacing="1">
        <MudStack Row>
            <MudSpacer/>
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Clear" OnClick="Clear"/>
        </MudStack>

        @if (_isWorking)
        {
            <MudProgressLinear Indeterminate Size="Size.Small" Color="Color.Primary" />
        }
    </MudStack>

    @if (context.Messages.Count == 0 && !_isWorking)
    {
        <div class="tb-agent-chat-suggestions">
            @foreach (var suggestion in SuggestionProvider.GetSuggestions(context))
            {
                <SuggestionTile Suggestion="@suggestion" SuggestionClicked="OnSuggestionClicked" />
            }
        </div>
    }
    else
    {
        <div class="tb-agent-chat-conversation">
            @foreach(var message in context.Messages)
            {
                if(message is HiddenChatMessage hidden)// || message.Role == ChatRole.System)
                {
                    // No action
                }
                else if(message is SuggestionChatMessage suggestionChatMessage)
                {
                    <div class=" mud-elevation-1 chat suggestion @message.Role">
                        <MudStack>
                            @suggestionChatMessage.Suggestion.Title
                        </MudStack>
                    </div>
                }
                else
                {
                    foreach(var content in message.Contents)
                    {
                        if(content is FunctionCallContent functionCall)
                        {
                            <div class=" mud-elevation-1 chat function-call @message.Role">
                                <MudExpansionPanels>
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <MudStack Row AlignItems="AlignItems.Center">
                                                <MudIcon Size="Size.Small" Icon="@TbIcons.Filled.Tools" Color="Color.Tertiary"/>
                                                @functionCall.Name
                                            </MudStack>
                                        </TitleContent>
                                        <ChildContent>
                                            @if(functionCall.Arguments is not null)
                                            {
                                                <table>
                                                    @foreach(var pair in functionCall.Arguments)
                                                    {
                                                        <tr><td>@pair.Key</td><td>@pair.Value</td></tr>

                                                    }
                                                </table>
                                            }
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            </div>
                        }
                        if (content is FunctionResultContent functionResult && functionResult.RawRepresentation is not null)
                        {
                            <div class=" mud-elevation-1 chat function-call @message.Role">
                                <MudStack>
                                    <MudIcon Size="Size.Small" Icon="@TbIcons.Filled.Tools" />
                                    <CodeBlock Code="@functionResult.RawRepresentation.ToString()" Language="json"></CodeBlock>
                                </MudStack>
                            </div>
                        }
                    }

                    if (!string.IsNullOrEmpty(message.Text))
                    {
                        <div class="chat @message.Role">
                            <div class="author">@message.AuthorName</div>
                            <MarkdownEditor ShowToolbar="false" Preview Value="@message.Text" />
                        </div>
                    }
                }
            }

            @if (_isWorking && _activeResponse.Length > 0)
            {
                <div class="chat Assistant">
                    <MarkdownEditor ShowToolbar="false" Preview Value="@_activeResponse.ToString()" />
                </div>
            }
        </div>
    }

    <MudPaper Class="tb-agent-submit">
        <MudStack Row>
            <ChatReferences ChatContext="@context" ReferencesChanged="OnReferencesChanged"/>
            <MudSpacer/>
            <MudMenu Icon="@TbIcons.Filled.Tools" Size="Size.Small">
                <MudMenuItem Icon="@Icons.Material.Outlined.Refresh" OnClick="ReloadToolsAsync">@loc.Shared["reload"]</MudMenuItem>

                @if(context.Tools is not null)
                {
                    foreach(var toolName in context.Tools.ToolNames)
                    {
                        var toolEnabled = context.Tools.IsToolEnabled(toolName);
                        bool triState = toolEnabled is null;
                        int enabledCount = context.Tools.GetEnabledFunctionCount(toolName);
                        int totalCount = context.Tools.GetTotalFunctionCount(toolName);

                        <MudMenu>
                            <ActivatorContent>
                                <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Class="pa-2" Style="width: 100%">
                                    <MudCheckBox 
                                        IndeterminateIcon="@Icons.Material.Filled.Square"
                                        Color=Color.Tertiary 
                                        TriState="@triState" 
                                        UncheckedColor=Color.Error 
                                        Value="@toolEnabled" 
                                        ValueChanged="(bool? isChecked) => context.Tools.SetToolEnabled(toolName, isChecked)"></MudCheckBox>
                                    @loc.Shared[toolName]
                                    <MudSpacer/>
                                    <MudText Typo="Typo.subtitle2">
                                        @enabledCount/@totalCount
                                    </MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowRight" Size="Size.Small"/>
                                </MudStack>
                            </ActivatorContent>
                            <ChildContent>
                                @foreach (var function in context.Tools.GetFunctionsByToolName(toolName))
                                {
                                    bool enabled = context.Tools.IsEnabled(function);
                                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center" Class="pa-2" Style="width: 100%">
                                        <MudCheckBox Color=Color.Tertiary UncheckedColor=Color.Error T="bool" Value="@enabled" ValueChanged="(isChecked) => context.Tools.SetFunctionEnabled(function, isChecked)"></MudCheckBox>
                                        <div @onclick="() => context.Tools.ToggleFunctionEnabled(function)">@function.Name</div>
                                    </MudStack>
                                }
                            </ChildContent>
                        </MudMenu>

                    }
                }
            </MudMenu>
        </MudStack>

        <div class="prompt">
            <ChatTextField 
                Lines="6"
                OnEnter="(text) => Send(text)" @bind-Text="@_userPrompt" />
           
            @if (!_isWorking)
            {
                <MudIconButton OnClick="() => Send()" Icon="@Icons.Material.Outlined.Send"/>
            }
        </div>
    </MudPaper>
</div>

@code {
    [CascadingParameter] public TestProject? Project { get; set; }

    private ChatReference? _projectReference;
    private ChatReference? _activeDocument;

    private string _userPrompt = "";
    private bool _isWorking = false;
    private CancellationTokenSource _cts = new();

    private StringBuilder _activeResponse = new();

    private async Task ReloadToolsAsync()
    {
        var client = new AgentChatClient(chatClientFactory, serviceProvider);
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        context.Tools = await client.GetToolsAsync(authState.User, context, default);
    }

    private void OnReferencesChanged()
    {
        // Repaint the UI as suggestions will have changed
        this.StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Determine if we need to reset the context
        if(Project is not null)
        {
            context.ProjectId = Project.Id;
        }

        var needReset = false;
        var clearMessages = false;
        if (Project is not null && _projectReference?.Id != Project.Id)
        {
            clearMessages = true;
            needReset = true;
        }
        var activeDocument = appNavigationManager.State.ActiveDocument;
        if (activeDocument?.Id != _activeDocument?.Id || activeDocument?.EntityTypeName != _activeDocument?.EntityTypeName)
        {
            needReset = true;
        }

        // Never reset if we have a user prompt
        if(context.Messages.Count > 0 || !string.IsNullOrWhiteSpace(_userPrompt))
        {
            needReset = false;
        }

        if(context.Tools is null)
        {
            await ReloadToolsAsync();
        }

        if (needReset)
        {
            Clear(clearMessages: clearMessages);
        }
    }

    private void Clear()
    {
        Clear(clearMessages: true);
    }

    private void Clear(bool clearMessages)
    {
        _cts?.Cancel();

        if (clearMessages)
        {
            context.ClearMessages();
        }

        _agentId = OrchestrationStrategies.Default;
        _userPrompt = "";

        context.ClearReferences();
        _activeDocument = appNavigationManager.State.ActiveDocument;
        if(_activeDocument is not null)
        {
            context.References.Add(_activeDocument);
        }

        if(Project is not null)
        {
            _projectReference = ChatReferenceBuilder.Create(Project, false);
            context.References.Add(_projectReference);
        }
    }

    private async Task OnSuggestionClicked(Suggestion suggestion)
    {
        await SendAsync(new SuggestionChatMessage(suggestion));
    }

    private async Task Send()
    {
        await Send(_userPrompt);
    }
    private async Task Send(string message)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        await SendAsync(new ChatMessage(ChatRole.User, message));
    }

    private string _agentId = OrchestrationStrategies.Default;

    private async Task SendAsync(ChatMessage chatMessage)
    {
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        var cancellationToken = _cts.Token;

        _userPrompt = "";
        _isWorking = true;
        _activeResponse.Clear();
        this.StateHasChanged();

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var client = new AgentChatClient(chatClientFactory, serviceProvider);

        if(chatMessage is SuggestionChatMessage suggestionChatMessage && !string.IsNullOrEmpty(suggestionChatMessage.Suggestion.AgentId))
        {
            _agentId = suggestionChatMessage.Suggestion.AgentId;
        }

        try
        {
            //await foreach (var update in client.GetStreamingResponseAsync(authState.User, Project, context, chatMessage, cancellationToken))
            string? currentAuthor = null;
            await foreach (var update in client.InvokeAgentAsync(_agentId, authState.User, Project, context, chatMessage, cancellationToken))
            {
                if (string.IsNullOrEmpty(update.Text) && currentAuthor == update.AuthorName)
                {
                    //_activeResponse.Append(actionUpdate.ActionName+"\n\n");
                }
                else
                {
                    if (currentAuthor != update.AuthorName)
                    {
                        _activeResponse.AppendLine($"\n#### {update.AuthorName}:");
                        currentAuthor = update.AuthorName;
                    }

                    _activeResponse.Append(update.Text);
                }
                await InvokeAsync(this.StateHasChanged);
            }
        }
        catch(OperationCanceledException)
        {
            
        }
        catch(Exception ex)
        {
            context.Messages.Add(new ChatMessage(ChatRole.System, "Something went wrong:\n```\n" + ex.ToString() + "\n```\n"));
        }

        _isWorking = false;
        this.StateHasChanged();
    }
}
