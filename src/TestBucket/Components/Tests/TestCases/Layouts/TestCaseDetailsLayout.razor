@inherits LayoutComponentBase
@layout TestingLayout
@using Humanizer
@using TestBucket.Components.Layout
@using TestBucket.Components.Settings.Controllers
@using TestBucket.Components.Tests.Layouts
@using TestBucket.Components.Tests.TestRuns.Controllers
@using TestBucket.Contracts.Testing.States
@using TestBucket.Domain
@using TestBucket.Domain.Editor.Models
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Teams.Models
@inject TestBrowser browser
@inject SettingsController settingsController
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreation
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc
@inject ITestCaseManager testCaseManager
@implements IDisposable
@implements ITestCaseObserver

<TenantRedirect />

<div class="container-fill-2-rows">

    <div>
        @if (_loading)
        {
            <MudProgressLinear Indeterminate Color="Color.Tertiary" />
        }

        <div class="tb-toolbar">
            <MudStack Row Style="width: 100%; margin-right: 16px" AlignItems="AlignItems.Center" Spacing="1">
                <PathNavigation Test="@_testCase" TestSuite="@_testSuite" />
                <MudSpacer/>
                <MudTooltip Text="@loc["main"]">
                    <TbNavLink Href="@appNavigationManager.GetTestCaseUrl()" Icon="@TbIcons.BoldDuoTone.FileText" Match="NavLinkMatch.All" />
                </MudTooltip>

                @if(CanEdit)
                {
                    <MudTooltip Text="@loc["edit"]">
                        <TbNavLink Href="@appNavigationManager.GetTestCaseEditUrl()" Icon="@Icons.Material.Filled.Edit" Match="NavLinkMatch.All" />
                    </MudTooltip>
                }
                @if(IsReviewState)
                {
                    <MudTooltip Text="@loc["review"]">
                        <TbNavLink Href="@appNavigationManager.GetTestCaseEditUrl()" Icon="@TbIcons.BoldDuoTone.Review" Match="NavLinkMatch.All" />
                    </MudTooltip>

                }
                <MudTooltip Text="@loc["changes"]">
                    <TbNavLink Href="@appNavigationManager.GetTestCaseChangeHistoryUrl()" Icon="@TbIcons.IconSaxDuoTone.Clock1" Match="NavLinkMatch.All" />
                </MudTooltip>

                <MudTooltip Text="@loc["test-runs"]">
                    <TbNavLink Href="@appNavigationManager.GetTestCaseExecutionHistoryUrl()" Icon="@TbIcons.Filled.Vial" Match="NavLinkMatch.All" />
                </MudTooltip>


                <MudTooltip Text="@loc["variables"]">
                    <TbNavLink Href="@appNavigationManager.GetTestCaseVariablesUrl()" Icon="@Icons.Material.Filled.Abc"  Match="NavLinkMatch.All"/>
                </MudTooltip>

                <MudTooltip Text="@loc["fields"]">
                    <TbNavLink Href="@appNavigationManager.GetTestCaseFieldsUrl()" Icon="@TbIcons.BoldDuoTone.Field" Match="NavLinkMatch.All" />
                    @* <MudIconButton Icon="@TbIcons.BoldDuoTone.Field" Href="@appNavigationManager.GetTestCaseFieldsUrl()" Class="rounded-0" /> *@
                </MudTooltip>

                <MudTooltip Text="@loc["test-coverage"]">
                    <TbNavLink Icon="@TbIcons.BoldDuoTone.Coverage" Href="@appNavigationManager.GetTestCaseRequimentsUrl()" Match="NavLinkMatch.All" />
                </MudTooltip>

                <MudTooltip Text="@loc["attachments"]">
                    <TbNavLink Icon="@TbIcons.BoldDuoTone.PaperClip" Href="@appNavigationManager.GetTestCaseAttachmentsUrl()" Match="NavLinkMatch.All" />
                </MudTooltip>


                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudTooltip Text="@loc["run-test"]">
                    <MudIconButton OnClick="RunTestAsync" Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="rounded-0" />
                </MudTooltip>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="async x => await DeleteTestCaseAsync()">@loc["delete"]</MudMenuItem>
                </MudMenu>

            </MudStack>
        </div>
    </div>
    <CascadingValue Value="@_testSuite">
        <CascadingValue Value="@_testCase">
            <MudStack Style="width: 100%; overflow: auto; ">
                @Body
            </MudStack>
        </CascadingValue>
    </CascadingValue>
</div>

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private TestCase? _testCase;
    private TestSuite? _testSuite;
    private EditorSettings? _editorSettings;
    private MappedTestState? _testState = null;

    private Team? _team;
    private TestProject? _project;

    private bool _loading = false;

    private async Task DeleteTestCaseAsync()
    {
        if (_testCase is null)
        {
            return;
        }
        await testCaseEditor.DeleteTestCaseAsync(_testCase);
    }

    private async Task RunTestAsync()
    {
        if (_testCase is null || _testCase.TestProjectId is null)
        {
            return;
        }
        var run = await testRunCreation.CreateTestRunAsync(_testCase.Name, _testCase.TestProjectId.Value, [_testCase.Id]);
        if (run is not null)
        {
            appNavigationManager.NavigateTo(run);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    public bool CanEdit => _testCase is null ? false :
        (_testCase.MappedState != MappedTestState.Review ? true : _editorSettings?.BlockEditInReviewState == false);

    public bool IsReviewState => _testCase is null ? false : _testCase.MappedState == MappedTestState.Review;

    private async Task LoadAsync()
    {
        if (_project != Project || _team != Team)
        {
            _project = Project;
            _team = Team;

            _editorSettings = await settingsController.GetEditorSettingsAsync();

        }
        var testCaseId = appNavigationManager.GetEntityIdFromCurrentUri();
        if(testCaseId is null)
        {
            _testCase = null;
            return;
        }

        _testSuite = appNavigationManager.State.SelectedTestSuite;
        if (_testCase is not null && _testSuite?.Id != _testCase.TestSuiteId)
        {
            _testSuite = await browser.GetTestSuiteByIdAsync(_testCase.TestSuiteId);
        }

        if (testCaseId != _testCase?.Id)
        {
            _testCase = await browser.GetTestCaseByIdAsync(testCaseId.Value);
            if(_testCase is not null)
            {
                _testState = _testCase.MappedState;
            }
            appNavigationManager.State.SetSelectedTestCase(_testCase, null, _testSuite);
        }
    }

    public Task OnTestCreatedAsync(TestCase testCase) => Task.CompletedTask;
    public Task OnTestDeletedAsync(TestCase testCase) => Task.CompletedTask;

    public Task OnTestSavedAsync(TestCase testCase)
    {
        if(testCase.Id == _testCase?.Id)
        {
            _testCase = testCase;
            if (_testState != _testCase.MappedState)
            {
                this.StateHasChanged();
            }
            _testState = _testCase.MappedState;
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        testCaseManager.AddObserver(this);
    }

    public void Dispose()
    {
        testCaseManager.RemoveObserver(this);
    }
}
