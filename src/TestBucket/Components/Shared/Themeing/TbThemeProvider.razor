@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Domain.Appearance
@inject ThemingService themingService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject IUserPreferencesManager userPreferencesManager
@inject ITestBucketThemeManager testBucketThemeManager
@implements IDisposable

@code {

    [Parameter] public EventCallback<UserPreferences> UserPreferencesChanged { get; set; }

    /// <summary>
    /// We keep track of the settings and trigger a refresh if they changed to reload the style sheet
    /// </summary>

    private bool? _increasedContrast;
    private bool? _increasedFontSize;
    private bool? _darkMode;
    private string? _theme;
    private Dock? _explorerDock = null;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userPreferences = await userPreferencesManager.LoadUserPreferencesAsync(authenticationState.User);
        _theme = userPreferences.Theme;
        _darkMode = userPreferences.DarkMode;
        _increasedContrast = userPreferences.IncreasedContrast;
        _increasedFontSize = userPreferences.IncreasedFontSize;
        _explorerDock = userPreferences.ExplorerDock;
        userPreferencesManager.UserPreferencesChanged += OnUserPreferencesChanged;
    }
    public void Dispose()
    {
        userPreferencesManager.UserPreferencesChanged -= OnUserPreferencesChanged;
    }

    private void OnUserPreferencesChanged(object? sender, UserPreferences preferences)
    {
        var changed = _darkMode != preferences.DarkMode || 
        _increasedFontSize != preferences.IncreasedFontSize ||
                _explorerDock != preferences.ExplorerDock ||
                _increasedContrast != preferences.IncreasedContrast ||
                _theme != preferences.Theme;
        if (changed)
        {
            _explorerDock = preferences.ExplorerDock;
            _increasedFontSize = preferences.IncreasedFontSize;
            _darkMode = preferences.DarkMode;
            _increasedContrast = preferences.IncreasedContrast;
            _theme = preferences.Theme;

            navigationManager.Refresh(true);
        }
    }
}
