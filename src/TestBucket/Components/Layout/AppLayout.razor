@using TestBucket.Components.Account
@using TestBucket.Components.Layout.Controls
@using TestBucket.Components.Shared.Themeing
@using TestBucket.Components.Teams
@using TestBucket.Components.Teams.Controls
@using TestBucket.Domain.Teams.Models

@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject TenantResolver tenantResolver
@inject AuthenticationStateProvider authStateProvider
@inject ProjectController projectService
@inject TeamService teamService
@inject ThemingService themingService

<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@_isDarkMode" Theme="@themingService.Theme"/>
<TbThemeProvider UserPreferencesChanged="OnUserPreferencesChanged"/>
<MudSnackbarProvider />
<MudPopoverProvider />
<MudDialogProvider MaxWidth="MaxWidth.ExtraExtraLarge" />
<ProgressStatus/>

@{
    string tenantAdminUrl = $"{tenantId}/tenants";
    string teamAdminUrl = $"{tenantId}/Settings/Teams";
    string projectAdminUrl = $"{tenantId}/Settings/ManageProjects";
    string projectSettingsUrl = $"{tenantId}/Settings/Projects/{_project?.Slug}";
    if(_project is null)
    {
        projectSettingsUrl = $"{tenantId}/Settings/Projects";
    }
    string homeUrl = $"/{tenantId}";
    string authUrl = $"/{tenantId}/Auth";
    string requirementsUrl = $"/{tenantId}/Requirements";
    string testsUrl = $"/{tenantId}/Testing";
    string settingsUrl = $"/{tenantId}/Settings";
    string manageUrl = $"/{tenantId}/Account/Manage";
    string registerUrl = $"/{tenantId}/Account/Register";
    string loginUrl = $"/{tenantId}/Account/Login?returnUrl=/{tenantId}";
}

<CascadingValue Value="@_project">
    <CascadingValue Value="@_team">

        <div style="display: grid; grid-template-rows: auto 1fr;" class="container-fill">

            <MudToolBar Style="@MenuStyle" Class="@MenuClass">
                <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">

                    <TeamDropDown SelectedTeam="@_team" SelectedTeamChanged="OnSelectedTeamChanged" />
                    <ProjectDropDown Team="@_team" SelectedProject="@_project" SelectedProjectChanged="OnSelectedProjectChanged"/>

                    <TbNavLink Href="@requirementsUrl">Knowledge</TbNavLink>
                    <TbNavLink Href="@testsUrl">Testing</TbNavLink>
                    <TbNavLink Href="@testsUrl">Reporting</TbNavLink>
                    <TbNavLink Href="@testsUrl">Environments</TbNavLink>
                    <TbNavLink Href="@projectSettingsUrl">Project</TbNavLink>

                    <MudSpacer/>

                    <MudMenu Icon="@Icons.Material.Filled.Add">
                        <MudMenuItem>New Test Suite</MudMenuItem>
                        <MudMenuItem>New Test Case</MudMenuItem>
                        <MudMenuItem>New Run</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem>New Requirement Specification</MudMenuItem>
                        <MudMenuItem>New Requirement</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem>New Project</MudMenuItem>
                        <MudMenuItem>New Team</MudMenuItem>
                    </MudMenu>

                    <DarkModeToggle IsDarkMode="@_isDarkMode" IsDarkModeChanged="OnDarkModeChanged"/>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">

                        <!-- Pages -->
                        <MudMenuItem Icon="@Icons.Material.Filled.ViewList" Label="Testing" Href="@testsUrl"></MudMenuItem>

                        <!-- Admin -->
                        <MudMenuItem Icon="@Icons.Material.Filled.Settings" Label="Settings" Href="@settingsUrl"></MudMenuItem>

                        <!-- Profile / Logout -->
                        <AuthorizeView>
                            <MudDivider />
                            <MudMenuItem Icon="@Icons.Material.Filled.ManageAccounts" Label="Account" Href="@manageUrl"></MudMenuItem>
                            <MudMenuItem>
                                <form action="Account/Logout" method="post">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                    <button type="submit">Logout</button>
                                </form>
                            </MudMenuItem>
                        </AuthorizeView>
                    </MudMenu>
                </MudStack>
            </MudToolBar>

            <main class="container-fill">
                <article class="content container-fill">
                    @Body
                </article>
            </main>

        </div>
    </CascadingValue>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code {
    private Team? _team;
    private TestProject? _project;
    private string? tenantId;
    private string? currentUrl;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = default!;

    public string MenuStyle => $"width: 100%; ";
    public string MenuClass => $"tb-toolbar main " + (_isDarkMode ? "dark" : "light");

    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        tenantId = state.User.Claims.FirstOrDefault(x => x.Type == "tenant")?.Value;

        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnUserPreferencesChanged(UserPreferences preferences)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OnDarkModeChanged(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;
        await themingService.SetDarkModeAsync(isDarkMode);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_project is null)
            {
                _project = await projectService.GetActiveProjectAsync();
            }
            if (_team is null)
            {
                _team = await teamService.GetActiveTeamAsync();
            }

            var isDarkMode = await themingService.IsDarkModeAsync();
            if(isDarkMode != _isDarkMode)
            {
                _isDarkMode = isDarkMode;
                StateHasChanged();
            }
            StateHasChanged();
        }
    }


    private async Task OnSelectedTeamChanged(Team? team)
    {
        _project = null;
        _team = team;
        await teamService.SetActiveTeamAsync(team);
    }
    private async Task OnSelectedProjectChanged(TestProject? testProject)
    {
        _project = testProject;
        await projectService.SetActiveProjectAsync(testProject);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = navigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
}