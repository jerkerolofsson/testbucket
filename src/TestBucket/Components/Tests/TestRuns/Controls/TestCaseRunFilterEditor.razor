@using TestBucket.Domain
@using TestBucket.Domain.Testing.TestRuns.Search
@inject IStringLocalizer<SharedStrings> loc
@inject IDialogService dialogService;

<MudStack Row AlignItems="AlignItems.Center">

    <MudChipSet Size="Size.Small" T="string" SelectedValue="_filterResult" SelectionMode="SelectionMode.SingleSelection" SelectedValueChanged="OnFilterResultChanged" CheckMark Variant="Variant.Text" Color="Color.Info">
        <MudChip Value="@("all")" Text="@loc["all"]" />
        <MudChip Value="@("passed")" Text="@loc["passed"]" />
        <MudChip Value="@("blocked")" Text="@loc["blocked"]" />
        <MudChip Value="@("failed")" Text="@loc["failed"]" />
    </MudChipSet>

    <MudIconButton Icon="@TbIcons.Filled.Globe" OnClick="ShowBrowserFilterAsync"></MudIconButton>

    @if (_query.Fields is not null && _query.Fields.Count > 0)
    {

    }

</MudStack>

@code {
    [CascadingParameter] public TestProject? Project{ get; set; }

    /// <summary>
    /// The current search query for filtering test case runs.
    /// </summary>
    [Parameter] public SearchTestCaseRunQuery? Query { get; set; }

    /// <summary>
    /// Event callback invoked when the search query changes.
    /// </summary>
    [Parameter] public EventCallback<SearchTestCaseRunQuery> QueryChanged { get; set; }

    private string _filterResult = "all";

    private SearchTestCaseRunQuery _query = new();

    private async Task ShowBrowserFilterAsync()
    {
        var parameters = new DialogParameters<BrowserFieldBadgePickerDialog>
        {
            { x => x.Project, Project },
        };
        var dialog = await dialogService.ShowAsync<BrowserFieldBadgePickerDialog>(loc["browser"], parameters, DefaultBehaviors.DialogOptions);
        var result = await dialog.Result;
        if (result?.Data is FieldFilter filter)
        {
            _query.RemoveFieldFilter(x => x.FilterDefinitionId == filter.FilterDefinitionId);
            _query.AddFieldFilter(filter);
            await QueryChanged.InvokeAsync(_query);
        }
    }

    protected override void OnParametersSet()
    {
        if(Query is not null)
        {
            _query = Query;
        }
    }

    private async Task OnFilterResultChanged(string filter)
    {
        _filterResult = filter;
        _query.Result = filter switch
        {
            "passed" => TestResult.Passed,
            "blocked" => TestResult.Blocked,
            "failed" => TestResult.Failed,
            _ => null
        };

        await QueryChanged.InvokeAsync(_query);
    }
}
