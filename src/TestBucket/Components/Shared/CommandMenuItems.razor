@using TestBucket.Domain.Commands
@using TestBucket.Domain.Keyboard
@inject AuthenticationStateProvider authenticationStateProvider
@inject ICommandManager commandManager

@if (TypeName is not null)
{
    @foreach (var command in commandManager.GetCommandByContextMenuType(TypeName))
    {
        bool enabled = true;
        if (claimsPrincipal is null || 
            !command.Enabled || 
            (EntityType is not null && command.RequiredLevel is not null && !PermissionClaims.HasPermission(claimsPrincipal, EntityType.Value, command.RequiredLevel.Value)))
        {
            enabled = false;
        }

        var binding = GetBinding(command.Id);
        @if(enabled)
        {
            <MudMenuItem Icon="@command.Icon" OnClick="async () => await command.ExecuteAsync()">
                <MudStack Style="width: 100%" Row AlignItems="AlignItems.Center">
                    @command.Name

                    @if(binding is not null)
                    {
                        <MudSpacer/>
                        <KeyboardShortcutLabel Modifiers="@binding.ModifierKeys" KeyCode="@binding.Key"/>
                    }
                </MudStack>

            </MudMenuItem>
        }
        else
        {
            <MudMenuItem Icon="@command.Icon" Style="opacity: 0.5">
                <MudStack Style="width: 100%" Row AlignItems="AlignItems.Center">
                    <MudText Style="opacity: 0.5">@command.Name</MudText>
                </MudStack>
            </MudMenuItem>
        }
    }
}

@code {
    [Parameter] public string? TypeName { get; set; }
    [Parameter] public PermissionEntityType? EntityType {get;set;}

    private KeyboardBindings? _bindings;
    private ClaimsPrincipal? claimsPrincipal;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        claimsPrincipal = authState.User;
        _bindings = await commandManager.GetKeyboardBindingsAsync(claimsPrincipal);
    }

    private KeyboardBinding? GetBinding(string commandId)
    {
        if(_bindings?.Commands is null)
        {
            return null;
        }
        _bindings.Commands.TryGetValue(commandId, out var binding);
        return binding;
    }
}
