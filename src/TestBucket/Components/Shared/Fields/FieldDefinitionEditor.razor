@using System.Diagnostics
@using TestBucket.Contracts.Fields
@using TestBucket.Domain.Fields.Models
@using TestBucket.Traits.Core
@inject IStringLocalizer<FieldStrings> fieldLoc

<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem">
    @if(FieldDefinition is not null)
    {
        <MudStack>
            <MudTabs>
                <MudTabPanel Text="@fieldLoc["description"]">
                    <MudStack>

                        <MudStack Spacing="0">
                            <FieldHeader>@fieldLoc["name"]</FieldHeader>
                            <MudTextField 
                            HelperText="@fieldLoc["name-helpertext"]"
                            Value="@FieldDefinition.Name" ValueChanged="OnNameChanged" T="string" Variant="Variant.Outlined" />
                        </MudStack>

                        <MudStack Spacing="0">
                            <FieldHeader>@fieldLoc["description"]</FieldHeader>
                            <MudTextField Lines="10"
                            MaxLines="10"
                            HelperText="@fieldLoc["description-helpertext"]"
                            Value="@FieldDefinition.Description" ValueChanged="OnDescriptionChanged" T="string" Variant="Variant.Outlined" />
                        </MudStack>

                        <MudStack Spacing="0">

                            <FieldHeader>@fieldLoc["field-target"]</FieldHeader>
                            <div style="display: grid; grid-template-columns: repeat(3, 1fr)">
                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.TestSuite) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestSuite, x)">Test Suite</MudCheckBox>


                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.TestSuiteFolder) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestSuiteFolder, x)">Test Suite Folder</MudCheckBox>

                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.TestCase) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestCase, x)">Test Cases</MudCheckBox>

                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.Project) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.Project, x)">Projects</MudCheckBox>

                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.TestRun) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestRun, x)">Test Runs</MudCheckBox>

                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.TestCaseRun) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.TestCaseRun, x)">Test Case Runs</MudCheckBox>


                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.RequirementSpecification) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.Requirement, x)">Requirement Specification</MudCheckBox>

                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.RequirementSpecificationFolder) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.RequirementSpecificationFolder, x)">Requirement Folder</MudCheckBox>

                                <MudCheckBox Color="Color.Tertiary" T="bool"
                                             Value="@((FieldDefinition.Target&FieldTarget.Requirement) != 0)" ValueChanged="x => OnTargetChanged(FieldTarget.Requirement, x)">Requirement</MudCheckBox>

                            </div>
                            <MudText Typo="Typo.subtitle2">@fieldLoc["field-target-helpertext"]</MudText>
                        </MudStack>
                    </MudStack>
                </MudTabPanel>

                <MudTabPanel Text="@fieldLoc["appearance"]">
                    <MudStack>

                        <MudStack Spacing="0">
                            <FieldHeader>@fieldLoc["input-type"]</FieldHeader>
                            <MudSelect HelperText="@fieldLoc["input-type-helpertext"]"
                                       Value="@FieldDefinition.Type" ValueChanged="OnTypeChanged" T="FieldType" Variant="Variant.Outlined">
                                <MudSelectItem Value="@FieldType.String">String</MudSelectItem>
                                <MudSelectItem Value="@FieldType.Boolean">Boolean</MudSelectItem>
                                <MudSelectItem Value="@FieldType.SingleSelection">Single Selection</MudSelectItem>
                                <MudSelectItem Value="@FieldType.MultiSelection">Multi Selection</MudSelectItem>
                                <MudSelectItem Value="@FieldType.StringArray">Chip Field</MudSelectItem>
                            </MudSelect>
                        </MudStack>
                        
                        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                            <FieldHeader>@fieldLoc["field-readonly"]</FieldHeader>
                            <MudSpacer />
                            <MudSwitchM3 Color="Color.Tertiary" T="bool" Value="@FieldDefinition.ReadOnly" ValueChanged="OnReadOnlyChanged"/>
                          </MudStack>

                        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                            <FieldHeader>@fieldLoc["visible"]</FieldHeader>
                            <MudSpacer />
                            <MudSwitchM3 Color="Color.Tertiary" T="bool" Value="@FieldDefinition.IsVisible" ValueChanged="OnIsVisibleChanged"/>
                        </MudStack>

                        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                            <FieldHeader>@fieldLoc["show-description"]</FieldHeader>
                            <MudSpacer />
                            <MudSwitchM3 Color="Color.Tertiary" T="bool" Value="@FieldDefinition.ShowDescription" ValueChanged="OnShowDescriptionChanged"/>
                        </MudStack>


                        @if (FieldDefinition.Type == FieldType.SingleSelection || FieldDefinition.Type == FieldType.MultiSelection)
                        {
                            <MudStack Spacing="0">
                                <FieldHeader>@fieldLoc["options"]</FieldHeader>
                                <MudTextField 
                                    Lines="10"
                                    HelperText="@fieldLoc["options-helpertext"]" 
                                    Class="mt-3" 
                                    Value="@_options" 
                                    ValueChanged="OnOptionsChanged" 
                                    T="string" 
                                    Variant="Variant.Outlined" />
                            </MudStack>
                        }

                    </MudStack>
                </MudTabPanel>

                <MudTabPanel Text="@fieldLoc["icons"]">
                    <MudStack>

                        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                            <FieldHeader>@fieldLoc["field-icon"]</FieldHeader>
                            <MudSpacer />
                            <IconPicker @bind-Icon="@FieldDefinition.Icon" />
                        </MudStack>


                        <FieldHeader>@fieldLoc["icons"]</FieldHeader>
                        @if ((FieldDefinition.Type == FieldType.SingleSelection || FieldDefinition.Type == FieldType.MultiSelection) && FieldDefinition.OptionIcons is not null)
                        {
                            <FieldHeader>@fieldLoc["icons"]</FieldHeader>

                            <table style="width: 300px">
                                <thead>
                                    <tr>
                                        <th>@fieldLoc["option"]</th>
                                        <th>@fieldLoc["icon"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var option in FieldDefinition.OptionIcons)
                                    {
                                        <tr>
                                            <td>@option.Key</td>
                                            <td><IconPicker Icon="@option.Value" IconChanged="(icon) => FieldDefinition.OptionIcons[option.Key] = icon" /></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }

                    </MudStack>
                </MudTabPanel>
                
                <MudTabPanel Text="@fieldLoc["advanced"]">
                    <MudStack>

                        <MudStack Spacing="0">
                            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                                <FieldHeader>@fieldLoc["use-classifier"]</FieldHeader>
                                <MudSpacer/>
                                <MudSwitchM3 Color="Color.Tertiary" T="bool" Value="@FieldDefinition.UseClassifier" ValueChanged="OnUseClassifierChanged"/>
                            </MudStack>
                            <MudText Typo="Typo.subtitle2">@fieldLoc["use-classifier-helpertext"]</MudText>
                        </MudStack>

                        <MudStack Spacing="0">
                            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%">
                                <FieldHeader>@fieldLoc["inherit"]</FieldHeader>
                                <MudSpacer />
                                <MudSwitchM3 Color="Color.Tertiary" T="bool" Value="@FieldDefinition.Inherit" ValueChanged="OnInheritChanged" />
                            </MudStack>
                            <MudText Typo="Typo.subtitle2">@fieldLoc["inherit-helpertext"]</MudText>
                        </MudStack>

                        <MudStack Spacing="0">
                            <FieldHeader>@fieldLoc["trait"]</FieldHeader>
                            <MudSpacer />
                            <MudTextField 
                            HelperText="@fieldLoc["trait-helpertext"]"
                            Value="@FieldDefinition.Trait" ValueChanged="OnTraitChanged" T="string" Variant="Variant.Outlined" />

                            @if (FieldDefinition.TraitType != TraitType.Custom)
                            {
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Check" />
                                    <MudText Color="Color.Success" Typo="Typo.subtitle1">@fieldLoc["trait-match-known-type"]</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudStack>

                </MudTabPanel>
            </MudTabs>

        </MudStack>

        <MudStack>
            <h3>@fieldLoc["preview"]</h3>

            <FieldEditor @bind-Field="_dummy"/>
        </MudStack>
    }
</div>

@code {
    [Parameter] public FieldDefinition? FieldDefinition { get; set; }
    [Parameter] public EventCallback<FieldDefinition> FieldDefinitionChanged { get; set; }

    private string _options = "";
    private FieldValue _dummy = new FieldValue() { FieldDefinitionId = 0  };

    private async Task OnShowDescriptionChanged(bool showDescription)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.ShowDescription = showDescription;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnReadOnlyChanged(bool readOnly)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.ReadOnly = readOnly;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnUseClassifierChanged(bool useClassifier)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.UseClassifier = useClassifier;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnIsVisibleChanged(bool isVisible)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.IsVisible = isVisible;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnInheritChanged(bool inherit)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Inherit = inherit;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    protected override void OnParametersSet()
    {
        _dummy.FieldDefinition = FieldDefinition;

        _options = "";
        if(FieldDefinition?.Options is not null)
        {
            _options = string.Join("\n", FieldDefinition.Options);
        }
    }

    private async Task OnTargetChanged(FieldTarget value, bool enabled)
    {
        if (FieldDefinition is not null)
        {
            var flag = value;
            if(enabled)
            {
                FieldDefinition.Target |= value;
            }
            else
            {
                FieldDefinition.Target &= ~value;
            }
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnTypeChanged(FieldType value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Type = value;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnTraitTypeChanged(TraitType value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.TraitType = value;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private async Task OnDescriptionChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            _options = value;
            FieldDefinition.Description = value;
            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnOptionsChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            _options = value;
            FieldDefinition.Options = _options.Split([',', '\n'], StringSplitOptions.TrimEntries|StringSplitOptions.RemoveEmptyEntries).ToList();
            FieldDefinition.OptionIcons ??= [];
            AddOrRemoveOptionIcons();

            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }

    private void AddOrRemoveOptionIcons()
    {
        Debug.Assert(FieldDefinition is not null);
        Debug.Assert(FieldDefinition.Options is not null);
        Debug.Assert(FieldDefinition.OptionIcons is not null);
        if (FieldDefinition?.Options is null)
        {
            return;
        }
        if (FieldDefinition?.OptionIcons is null)
        {
            return;
        }

        foreach (var newOption in FieldDefinition.Options)
        {
            if (!FieldDefinition.OptionIcons.ContainsKey(newOption))
            {
                FieldDefinition.OptionIcons.Add(newOption, "");
            }
        }
        foreach (var oldOption in FieldDefinition.OptionIcons.Keys.ToList())
        {
            if (!FieldDefinition.Options.Contains(oldOption))
            {
                FieldDefinition.OptionIcons.Remove(oldOption);
            }
        }

    }

    private async Task OnTraitChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Trait = value;
            FieldDefinition.TraitType = TraitType.Custom;
            if(TraitTypeConverter.TryConvert(FieldDefinition.Trait, out var traitType))
            {
                FieldDefinition.TraitType = traitType.Value;
            }

            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
    private async Task OnNameChanged(string value)
    {
        if (FieldDefinition is not null)
        {
            FieldDefinition.Name = value;
            FieldDefinition.Trait = value.Replace(" ", "");
            FieldDefinition.TraitType = TraitType.Custom;
            if(TraitTypeConverter.TryConvert(FieldDefinition.Trait, out var traitType))
            {
                FieldDefinition.TraitType = traitType.Value;
            }

            await FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        }
    }
}