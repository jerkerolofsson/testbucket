@using TestBucket.Components.Metrics.Controls
@using TestBucket.Components.Metrics.Controls.Controls
@using TestBucket.Contracts.Testing.Models
@using TestBucket.Domain.Issues
@using TestBucket.Domain.Issues.Models
@using TestBucket.Formats.Dtos
@inject IStringLocalizer<SharedStrings> loc
@inject TestExecutionController controller
@inject IIssueManager issueManager
@implements ILinkedIssueObserver
@implements IDisposable

@if(TestCaseRun is not null)
{
    <TestResultQuickPicker TestCaseRun="@TestCaseRun" ResultChanged="OnResultChanged"/>

    <MudStack Spacing="0">
        <MudText Typo="Typo.h2">@loc["test-log"]</MudText>
        <MarkdownEditor ShowToolbar="false"
            MaxHeight="120" MinHeight="120"
            Value="@TestCaseRun.Message" ValueChanged="OnMessageChanged" />
    </MudStack>

    <MudStack Spacing="0">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
            <MudIcon Icon="@TbIcons.Filled.Gauge" />
            <MudText Typo="Typo.h2">@loc["metrics"]</MudText>
        </MudStack>
        <MetricsGridView TestCaseRun="@TestCaseRun" />
    </MudStack>

    <MudStack Spacing="0">
    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
        <MudIcon Icon="@TbIcons.BoldDuoTone.Bug" />
        <MudText Typo="Typo.h2">@loc["issues"]</MudText>
    </MudStack>
        <LinkedIssuesTable TestCaseRun="@TestCaseRun" />
    </MudStack>

    <MudStack Spacing="0">

        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
            <MudIcon Icon="@TbIcons.BoldDuoTone.PaperClip" />
            <MudText Typo="Typo.h2">@loc["attachments"]</MudText>
        </MudStack>
        <AttachmentGrid TestCaseRunId="@TestCaseRun.Id" Style="width: 100%" AllowUpload @ref="_attachmentGrid"/>
        <MudStack Row Style="width: 100%">
            <MudSpacer/>
            <CaptureScreenShotButton TestCaseRunId="@TestCaseRun.Id" ScreenshotCaptured="OnScreenshotCaptured" />
        </MudStack>
    </MudStack>
}

@code {
    private AttachmentGrid? _attachmentGrid;

    [Parameter] public TestCaseRun? TestCaseRun { get; set; }
    [Parameter] public EventCallback<TestCaseRun> TestCaseRunChanged { get; set; }
    [Parameter] public EventCallback<TestResult> ResultChanged { get; set; }

    protected override void OnInitialized()
    {
        issueManager.AddObserver(this);
        base.OnInitialized();
    }

    public async Task OnLinkedIssueAddedAsync(LinkedIssue issue)
    {
        if (TestCaseRun is null) return;
        await TestCaseRunChanged.InvokeAsync(TestCaseRun);
    }
    public async Task OnLinkedIssueDeletedAsync(LinkedIssue issue)
    {
        if (TestCaseRun is null) return;
        await TestCaseRunChanged.InvokeAsync(TestCaseRun);
    }

    public void Dispose()
    {
        issueManager.RemoveObserver(this);        
    }

    private async Task OnScreenshotCaptured(AttachmentDto _)
    {
        if(_attachmentGrid is not null)
        {
            await _attachmentGrid.ReloadAttachmentsAsync();
        }
    }

    private async Task OnResultChanged(TestResult result)
    {
        if(TestCaseRun is null)
        {
            return;
        }
        await ResultChanged.InvokeAsync(result);
    }

    private async Task OnMessageChanged(string message)
    {
        if (TestCaseRun is null)
        {
            return;
        }
        await controller.SetTestCaseRunMessageAsync(TestCaseRun, message);
        await TestCaseRunChanged.InvokeAsync(TestCaseRun);
    }
}
