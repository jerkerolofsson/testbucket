@using Plotly.Blazor.LayoutLib
@using TestBucket.Domain.Testing.Aggregates
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject IStringLocalizer<SharedStrings> loc
@inject ThemingService themingService

<MudPaper Elevation="2">
    <MudStack Spacing="0" Class="pa-1">
        <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">@Title</MudText>
            <MudSpacer />
        </MudStack>
        @if (_layout is not null && Results is not null)
        {
            <PlotlyChart style="height: 10vh; min-height: 350px" @ref="_chart" @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" />
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="350px" />
        }
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public TestExecutionResultSummary? Results { get; set; }

    private PlotlyChart? _chart;
    private Config? _config = new Config()
    {
        Responsive = true
    };
    private Layout? _layout;

    // Using of the interface IList is important for the event callback!
    private IList<ITrace> _data = new List<ITrace>
    {
        new Bar
        {
            X = new List<object> { "passed", "failed", "blocked", "skipped" },
            Y = new List<object> { 0,0,0,0,0 },
            Marker = new Plotly.Blazor.Traces.BarLib.Marker
            {
                ColorArray = ["rgba(11, 186, 131, 1)", "rgba(246, 78, 98, 1)", "rgb(250,220,80)", "rgb(150,150,150)", "rgb(50,50,50)"]
            }
        }        
    };

    protected override async Task OnParametersSetAsync()
    {
        _layout ??= new Layout()
            {
                BarCornerRadius = 5,
                PaperBgColor = "transparent",
                PlotBgColor = "transparent",
                Font = new Font
                {
                    Color = themingService.IsDarkMode ? "#eee" : "#111",
                }
            };

        if (Results is not null)
        {
            if(_data.Count > 0 && _data[0] is Bar bar)
            {
                bar.Y = [Results.Passed, Results.Failed, Results.Blocked, Results.Skipped, Results.NoRun];
            }
            // var bar = new Bar
            // {
            //     Name = "Results",
            //     X = ["passed", "failed", "blocked", "skipped"],
            //     Y = [Results.Passed, Results.Failed, Results.Blocked, Results.Skipped, Results.NoRun],
            //     Marker = new Plotly.Blazor.Traces.BarLib.Marker
            //     {
            //         ColorArray = ["rgba(11, 186, 131, 1)", "rgba(246, 78, 98, 1)", "rgb(250,220,80)", "rgb(150,150,150)", "rgb(50,50,50)"]
            //     }
            // };

            // _data[0] = bar;
            if (_chart is not null)
            {
                await _chart.React();
            }
        }
    }
}
