@using TestBucket.Contracts.Integrations
@using TestBucket.Contracts.Projects
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IntegrationStrings> integrationLoc
@inject ProjectController controller
@inject AppNavigationManager appNavigationManager

@if (TestSuite is not null)
{
    <MudText Typo="Typo.h1">@loc["automation"]</MudText>

    @if(_integrations.Count == 0)
    {
        @if (Project is not null)
        { 
            string url = appNavigationManager.GetUrl(Project) + "/Integrations";
            <MudLink Href="@url">@integrationLoc["no-integration"]</MudLink>
        }
    }
    else
    {
        <Field Row>
            <FieldHeader>@loc["ci-cd"]</FieldHeader>
            <MudSpacer />
            <ExternalSystemPicker Project="@_project" Integration="@_integration" IntegrationChanged="OnIntegrationChanged" />
        </Field>

        @if (_integration is not null)
        {
            <Field Row>
                <FieldHeader>@loc["ci-cd-ref"]</FieldHeader>
                <MudSpacer />
                <MudTextField AutoFocus="true" Variant="Variant.Outlined" T="string" ValueChanged="OnDefaultCiCdRefChanged" Value="@TestSuite.DefaultCiCdRef"></MudTextField>
            </Field>
        }
    }
}

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [Parameter] public TestSuite? TestSuite { get; set; }
    [Parameter] public EventCallback<TestSuite> TestSuiteChanged { get; set; }
    private IReadOnlyList<ExternalSystem> _integrations = [];
    private ExternalSystem? _integration;
    private TestProject? _project;

    private async Task OnDefaultCiCdRefChanged(string value)
    {
        if (TestSuite is null)
        {
            return;
        }

        TestSuite.DefaultCiCdRef = value;
        await TestSuiteChanged.InvokeAsync(TestSuite);
    }

    protected override async Task OnParametersSetAsync()
    {
        if(TestSuite?.TestProjectId is not null)
        {
            if (_project?.Id != TestSuite.TestProjectId)
            {
                _project = await controller.GetProjectByIdAsync(TestSuite.TestProjectId.Value);
            }

            if(_project is not null)
            {
                _integrations = await controller.GetProjectIntegrationsAsync(_project.Id);

                // Only show integrations that can create pipelines
                _integrations = _integrations
                .Where(x => (x.SupportedCapabilities & ExternalSystemCapability.CreatePipeline) == ExternalSystemCapability.CreatePipeline).ToArray();

                _integration = _integrations.Where(x => x.Id == TestSuite.ExternalSystemId).FirstOrDefault();
            }

            //_runners = await controller.GetPipelineRunnersAsync(TestSuite.TestProjectId.Value);
            //_runner = _runners.Where(x => x.SystemName == TestSuite.CiCdSystem).FirstOrDefault();
        }
    }

    private async Task OnIntegrationChanged(ExternalSystem system)
    {
        if(TestSuite is null)
        {
            return;
        }
        TestSuite.CiCdSystem = system?.Provider;
        TestSuite.ExternalSystemId = system?.Id;
        await TestSuiteChanged.InvokeAsync(TestSuite);
    }
}
