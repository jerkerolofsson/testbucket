@attribute [Authorize(Roles = "ADMIN")]
@page "/{TenantId}/Settings/Users"
@using TestBucket.Components.Users.Services
@using TestBucket.Domain.Settings
@layout SettingsLayout
@inject UserController userController

<MudStack Class="container-settings-page">

    <MudText Class="mb-3" Typo="Typo.h1">Users</MudText>

    <MudDataGrid ServerData="LoadGridData"
                 Style="width: 100%"
                 Dense="true"
                 Hover="true"
                 T="ApplicationUser"
                 @ref="_dataGrid"
                 SortMode="SortMode.None">
                 @* RowClick="(e) => OnTestClicked(e.Item)" *@

        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudSpacer/>
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddUserAsync"></MudIconButton>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.UserName" Title="UserName" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
            <PropertyColumn Property="x => x.AccessFailedCount" Title="AccessFailedCount" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="ApplicationUser" />
        </PagerContent>
    </MudDataGrid>
</MudStack>

@code {
    [Parameter] public string? TenantId { get; set; }

    private MudDataGrid<ApplicationUser>? _dataGrid;

    private async Task AddUserAsync()
    {
        await userController.AddUserAsync();
        _dataGrid?.ReloadServerData();
    }


    private async Task<GridData<ApplicationUser>> LoadGridData(GridState<ApplicationUser> state)
    {
        var result = await userController.BrowseAsync(state.Page*state.PageSize, state.PageSize);

        GridData<ApplicationUser> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
