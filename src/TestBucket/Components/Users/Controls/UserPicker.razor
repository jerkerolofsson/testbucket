@using TestBucket.Data.Identity
@inject IUserService userService

<MudDataGrid ServerData="LoadGridData"
Dense="true"
Hover="true"
T="ApplicationUser"
SortMode="SortMode.None">
    <Columns>
        <PropertyColumn Property="x => x.TenantId" />
        <PropertyColumn Property="x => x.UserName" />
        <PropertyColumn Property="x => x.Email" />
        <PropertyColumn Property="x => x.PhoneNumber" />
    </Columns>

    <PagerContent>
        <MudDataGridPager T="ApplicationUser" />
    </PagerContent>
</MudDataGrid>

@code {

    [Parameter] public string? TenantId { get; set; }

    private async Task<GridData<ApplicationUser>> LoadGridData(GridState<ApplicationUser> state)
    {
        var query = new Contracts.SearchQuery
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize
            };

        var result = await userService.SearchAsync(TenantId??"", query);

        GridData<ApplicationUser> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
