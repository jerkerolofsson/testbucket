@using TestBucket.Domain.Commands
@using TestBucket.Domain.Keyboard
@inject AuthenticationStateProvider authenticationStateProvider
@inject ICommandManager commandManager

@if (TypeNames is not null)
{
    foreach (var commandItem in commandManager.GetCommandMenuItems(TypeNames))
    {
        if (commandItem.Folder is not null)
        {
            <MudMenu Label="@commandItem.Folder">
                @foreach (var childCommand in commandItem.FolderCommands)
                {
                    <CommandMenuItem Item="@childCommand" Bindings="@_bindings" Principal="@claimsPrincipal" />
                }
            </MudMenu>
        }
        else
        {
            <CommandMenuItem Item="@commandItem.Command" Bindings="@_bindings" Principal="@claimsPrincipal"/>
        }
    }
}

@code {
    /// <summary>
    /// This is used to find/filter commands
    /// </summary>
    [Parameter] public string? TypeNames { get; set; }

    private KeyboardBindings? _bindings;
    private ClaimsPrincipal? claimsPrincipal;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        claimsPrincipal = authState.User;
        _bindings = await commandManager.GetKeyboardBindingsAsync(claimsPrincipal);
    }
}
