@using TestBucket.Domain.Requirements.Models
@inject NavigationManager navigationManager
@inject TestBrowser testBrowser
@inject RequirementBrowser requirementBrowser
@inject AppNavigationManager appNavigationManager

<MudStack Row AlignItems="AlignItems.Center">
    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowUpward" OnClick="NavUp"/>
    <MudBreadcrumbs Items="@_nav"/>
</MudStack>

@code {
    [Parameter] public TestSuite? TestSuite { get; set; }
    [Parameter] public TestCase? Test { get; set; }
    [Parameter] public Requirement? Requirement { get; set; }
    [Parameter] public RequirementSpecification? RequirementSpecification { get; set; }
    [Parameter] public RequirementSpecificationFolder? RequirementFolder { get; set; }
    [Parameter] public long? FolderId { get; set; }
    [Parameter] public IEnumerable<BreadcrumbItem>? TailItems { get; set; }

    private List<BreadcrumbItem> _nav = [];
    private string? _navUpUrl;

    private void NavUp()
    {
        if (_navUpUrl is not null)
        {
            navigationManager.NavigateTo(_navUpUrl);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        List<BreadcrumbItem> nav = new();

        var test = Test;
        var testSuite = TestSuite;

        if (Requirement is not null)
        {
            var specification = RequirementSpecification ?? Requirement.RequirementSpecification ?? await requirementBrowser.GetRequirementSpecificationByIdAsync(Requirement.RequirementSpecificationId);

            if (specification is not null)
            {
                var specificationUrl = appNavigationManager.GetUrl(specification);
                nav.Add(new BreadcrumbItem(specification.Name, specificationUrl));
                _navUpUrl = specificationUrl;
            }

            if (Requirement.PathIds is not null)
            {
                var pathItems = Requirement.Path.Split('/');
                var len = Math.Min(pathItems.Length, Requirement.PathIds.Length);
                for (int i = 0; i < Requirement.PathIds.Length; i++)
                {
                    var url = appNavigationManager.GetRequirementFolderUrl(Requirement.PathIds[i]);
                    nav.Add(new BreadcrumbItem(pathItems[i], url));

                    // Parent dir is the last one
                    _navUpUrl = url;
                }
            }

            var requirementUrl = appNavigationManager.GetUrl(Requirement);
            nav.Add(new BreadcrumbItem(Requirement.Name, requirementUrl));
        }
        else if (RequirementFolder is not null)
        {
            var specification = RequirementSpecification ?? RequirementFolder.RequirementSpecification ??
                await requirementBrowser.GetRequirementSpecificationByIdAsync(RequirementFolder.RequirementSpecificationId);

            if (specification is not null)
            {
                var specificationUrl = appNavigationManager.GetUrl(specification);
                nav.Add(new BreadcrumbItem(specification.Name, specificationUrl));
                _navUpUrl = specificationUrl;
            }

            if (RequirementFolder.PathIds is not null && RequirementFolder.Path is not null)
            {
                var pathItems = RequirementFolder.Path.Split('/');
                var len = Math.Min(pathItems.Length, RequirementFolder.PathIds.Length);
                for (int i = 0; i < RequirementFolder.PathIds.Length; i++)
                {
                    var url = appNavigationManager.GetRequirementFolderUrl(RequirementFolder.PathIds[i]);
                    nav.Add(new BreadcrumbItem(pathItems[i], url));

                    // Parent dir is the last one
                    _navUpUrl = url;
                }
            }

            var requirementUrl = appNavigationManager.GetRequirementFolderUrl(RequirementFolder.Id);
            nav.Add(new BreadcrumbItem(RequirementFolder.Name, requirementUrl));
        }
        else if (RequirementSpecification is not null)
        {

            var specificationUrl = appNavigationManager.GetUrl(RequirementSpecification);
            nav.Add(new BreadcrumbItem(RequirementSpecification.Name, specificationUrl));
            _navUpUrl = specificationUrl;
        }

        // First the test suite
        if(TestSuite is not null && test is null)
        {
             var testSuiteUrl = appNavigationManager.GetUrl(TestSuite);
            nav.Add(new BreadcrumbItem(TestSuite.Name, testSuiteUrl));
            _navUpUrl = testSuiteUrl;
        }
        else if (test?.PathIds is not null && test.Path is not null)
        {
            var testSuiteId = test.TestSuiteId;

            testSuite ??= await testBrowser.GetTestSuiteByIdAsync(testSuiteId);
            if(testSuite is not null)
            {
                var testSuiteUrl = appNavigationManager.GetUrl(testSuite);
                nav.Add(new BreadcrumbItem(testSuite.Name, testSuiteUrl));
                _navUpUrl = testSuiteUrl;
            }

            var pathItems = test.Path.Split('/');
            var len = Math.Min(pathItems.Length, test.PathIds.Length);
            for (int i = 0; i < test.PathIds.Length; i++)
            {
                var url = appNavigationManager.GetFolderUrl(testSuiteId, test.PathIds[i]);
                nav.Add(new BreadcrumbItem(pathItems[i], url));

                // Parent dir is the last one
                _navUpUrl = url;
            }
            nav.Add(new BreadcrumbItem(test.Name, appNavigationManager.GetUrl(test)));
        }
        else if (FolderId is not null)
        {
            var folder = await testBrowser.GetTestSuiteFolderByIdAsync(FolderId.Value);
            if(folder?.PathIds is not null && folder.Path is not null)
            {
                var testSuiteId = folder.TestSuiteId;

                testSuite ??= await testBrowser.GetTestSuiteByIdAsync(folder.TestSuiteId);
                if (testSuite is not null)
                {
                    var testSuiteUrl = appNavigationManager.GetUrl(testSuite);
                    nav.Add(new BreadcrumbItem(testSuite.Name, testSuiteUrl));
                    _navUpUrl = testSuiteUrl;
                }

                var pathItems = folder.Path.Split('/');
                var len = Math.Min(pathItems.Length, folder.PathIds.Length);
                for (int i = 0; i < folder.PathIds.Length; i++)
                {
                    var url = appNavigationManager.GetFolderUrl(folder.TestSuiteId, folder.PathIds[i]);
                    nav.Add(new BreadcrumbItem(pathItems[i], url));

                    // Parent dir is the last one
                    _navUpUrl = url;
                }

                nav.Add(new BreadcrumbItem(folder.Name, appNavigationManager.GetUrl(folder)));
            }
        }

        if(TailItems is not null)
        {
            nav.AddRange(TailItems);
        }

        _nav = nav;
        //this.StateHasChanged();
    }
}
