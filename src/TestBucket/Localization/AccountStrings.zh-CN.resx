<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="account" xml:space="preserve">
    <value>帐户</value>
  </data>
  <data name="account-details" xml:space="preserve">
    <value>帐户详细信息</value>
  </data>
  <data name="account-name" xml:space="preserve">
    <value>帐户名称</value>
  </data>
  <data name="account-sub-type" xml:space="preserve">
    <value>子类型</value>
  </data>
  <data name="account-type" xml:space="preserve">
    <value>帐户类型</value>
  </data>
  <data name="add-account" xml:space="preserve">
    <value>添加帐户</value>
  </data>
  <data name="change-password" xml:space="preserve">
    <value>更改密码</value>
  </data>
  <data name="custom-variables" xml:space="preserve">
    <value>自定义变量</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>电子邮件</value>
  </data>
  <data name="enter-the-code" xml:space="preserve">
    <value>输入代码</value>
  </data>
  <data name="forgot-your-password" xml:space="preserve">
    <value>忘记密码了吗？</value>
  </data>
  <data name="login" xml:space="preserve">
    <value>登录</value>
  </data>
  <data name="login-prompt" xml:space="preserve">
    <value>登录到结核病</value>
  </data>
  <data name="login-prompt-description" xml:space="preserve">
    <value>输入您的电子邮件和密码登录。</value>
  </data>
  <data name="logout" xml:space="preserve">
    <value>注销</value>
  </data>
  <data name="password" xml:space="preserve">
    <value>密码</value>
  </data>
  <data name="personal-data" xml:space="preserve">
    <value>个人数据</value>
  </data>
  <data name="profile" xml:space="preserve">
    <value>轮廓</value>
  </data>
  <data name="register" xml:space="preserve">
    <value>登记</value>
  </data>
  <data name="register-new-user" xml:space="preserve">
    <value>注册为新用户</value>
  </data>
  <data name="remember-me" xml:space="preserve">
    <value>记住账号</value>
    <comment>Account Login</comment>
  </data>
  <data name="remember-this-machine" xml:space="preserve">
    <value>记住这台机器</value>
  </data>
  <data name="resend-email-confirmation" xml:space="preserve">
    <value>重新发送电子邮件确认</value>
  </data>
  <data name="test-accounts-description" xml:space="preserve">
    <value>测试帐户包含凭据或帐户设置，并且可以在运行并发测试时避免复制同一帐户的使用情况。</value>
  </data>
  <data name="two-factor-auth" xml:space="preserve">
    <value>两个因素身份验证</value>
  </data>
  <data name="username" xml:space="preserve">
    <value>用户名</value>
  </data>
  <data name="verification-code" xml:space="preserve">
    <value>验证码</value>
  </data>
  <data name="verify" xml:space="preserve">
    <value>核实</value>
    <comment>Verify TOTP code</comment>
  </data>
  <data name="custom-variables-wizard-description" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value>添加将与帐户关联的任何自定义属性。 这些属性将通过测试用例可以访问，因为帐户已锁定和分配后（例如，运行测试用例时）。 这些自定义属性是用户定义的，除了上一页的固定属性外，还可以选择添加。</value>
  </data>
</root>