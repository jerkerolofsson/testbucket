@using TestBucket.Components.States.Controllers
@using TestBucket.Contracts.Testing.Models
@using TestBucket.Contracts.Testing.States
@using TestBucket.Domain.States
@inject StateController controller
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<StateStrings> loc

<Field Row>
    <FieldHeader for="test-case-state">@loc["state"]</FieldHeader>
    <MudSpacer/>
    <MudSelect id="test-case-state" Variant="Variant.Outlined" T="TestState" Value="@State" ValueChanged="OnStateChanged">
        @foreach(var state in _states)
        {
            <MudSelectItem Value="@state">
                <Chip Color="@state.Color" Text="@state.Name" />
            </MudSelectItem>
        }
    </MudSelect>
</Field>

@code {
    [Parameter] public long? TestProjectId { get; set; }
    [Parameter] public TestState? State { get; set; }
    [Parameter] public EventCallback<TestState?> StateChanged { get; set; }

    private IReadOnlyList<TestState> _states = [];

    public long? ProjectId => TestProjectId ?? appNavigationManager.State.SelectedProject?.Id;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ProjectId is not null && _states.Count == 0)
        {
            await RefreshStatesAsync(State);
        }
    }

    public async Task RefreshStatesAsync(TestState? state)
    {
        if (ProjectId is not null)
        {
            var states = await controller.GetTestCaseStatesAsync(ProjectId.Value);
            _states = states;

            var currentStateName = state?.Name;
            if (currentStateName is not null)
            {
                var actualState = _states.FirstOrDefault(x => x.Name == currentStateName);
                if (actualState?.AllowedStates is not null)
                {
                    _states = [actualState, .. _states.Where(x => x.Name != null && actualState.AllowedStates.Contains(x.Name))];
                }
            }

            if (_states.Count > 0)
            {
                this.StateHasChanged();
            }
        }
    }

    private async Task OnStateChanged(TestState? state)
    {
        await RefreshStatesAsync(state);
        await StateChanged.InvokeAsync(state);
    }
}
