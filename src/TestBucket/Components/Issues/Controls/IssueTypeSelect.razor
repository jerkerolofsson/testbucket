@using TestBucket.Contracts.Issues.Types
@using TestBucket.Contracts.Testing.Models
@using TestBucket.Contracts.Testing.States
@using TestBucket.Domain.States
@inject ProjectController controller
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<IssueStrings> loc

<MudSelect Variant="Variant.Outlined" T="IssueType" Value="@Type" ValueChanged="OnTypeChanged" @attributes="@AdditionalAttributes">
    @foreach (var state in _types)
    {
        <MudSelectItem Value="@state">
            @if (state.MappedType == MappedIssueType.Other)
            {
                @state.Name
            }
            else
            {
                var name = state.MappedType.ToString().ToLower();
                var label = "type-" + name;
                @loc[label]
            }
        </MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter] public long? TestProjectId { get; set; }
    [Parameter] public IssueType? Type { get; set; }
    [Parameter] public EventCallback<IssueType?> TypeChanged { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private IReadOnlyList<IssueType> _types = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        long? testProjectId = TestProjectId;
        if (testProjectId is null)
        {
            testProjectId = appNavigationManager.State.SelectedProject?.Id;
        }

        if (testProjectId != 0 && testProjectId is not null && _types.Count == 0)
        {
            _types = await controller.GetIssueTypesAsync(testProjectId.Value);
            if (_types.Count > 0)
            {
                this.StateHasChanged();
            }
        }
    }
   
    private async Task OnTypeChanged(IssueType? state)
    {
        await TypeChanged.InvokeAsync(state);
    }
}
