@inject IUserPreferencesManager userPreferencesManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IStringLocalizer<SharedStrings> loc

@if(UserPreferences?.PreferTextToIcons == true)
{
    if (IsDarkMode)
    {
        <MudButton Color="Color.Primary" OnClick="SetLightMode">@loc["set-light-mode"]</MudButton>
    }
    else
    {
        <MudButton Color="Color.Primary" OnClick="SetDarkMode">@loc["set-dark-mode"]</MudButton>
    }
}
else
{
    if (IsDarkMode)
    {
        <MudTooltip Text="@loc["set-light-mode"]">
            <MudIconButton Icon="@Icons.Material.Filled.LightMode" OnClick="SetLightMode" />
        </MudTooltip>
    }
    else
    {
        <MudTooltip Text="@loc["set-dark-mode"]">
            <MudIconButton Icon="@Icons.Material.Filled.DarkMode" OnClick="SetDarkMode" />
        </MudTooltip>
    }
}
@code {
    [CascadingParameter] UserPreferences? UserPreferences { get; set; }
    [Parameter] public bool IsDarkMode { get; set; }
    [Parameter] public EventCallback<bool> IsDarkModeChanged { get; set; }

    private async Task SetLightMode()
    {
        await IsDarkModeChanged.InvokeAsync(false);
    }

    private async Task SetDarkMode()
    {
        await IsDarkModeChanged.InvokeAsync(true);
    }
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if(authenticationState.User is not null)
        {
            //userPreferencesManager.UserPreferencesChanged += OnUserPreferencesChanged;
        }
    }
    public void Dispose()
    {
        //userPreferencesManager.UserPreferencesChanged -= OnUserPreferencesChanged;
    }

    private void OnUserPreferencesChanged(object? sender, UserPreferences preferences)
    {
        if(preferences.DarkMode != IsDarkMode)
        {
            IsDarkModeChanged.InvokeAsync(preferences.DarkMode);
        }
    }
}
