@using System.Net
@using TestBucket.Components.Metrics.Controls.Controllers
@using TestBucket.Domain.Metrics.Models
@inject IStringLocalizer<SharedStrings> loc
@inject MetricsController metricsController
@inject AppNavigationManager appNavigationManager

<MudStack Spacing="1">

    @if (_metrics.Count > 0)
    {
        <MudDataGrid Items="_metrics"
                     Elevation="0"
                     Class="tb-metrics-grid"
                     RowClass="tb-datarow cursor-pointer"
                     Dense
                     Hover
                     Bordered
                     T="Metric"
                     SortMode="SortMode.Single">
            <ColGroup>
                <col style="width: 40%;" />
                <col style="width: 40%;" />
                <col style="width: 20%;" />
                <col style="width: 10%;" />
            </ColGroup>

            <Columns>

                <TemplateColumn Title="@loc["name"]">
                    <CellTemplate>
                        <MudTooltip Text="@context.Item.MeterName">
                            @{
                                string testResultsForMetricUrl = appNavigationManager.GetTestCaseRunsUrl() + "?q=" + WebUtility.UrlEncode($"metric:{context.Item.Name}");
                            }
                            <MudLink Href="@testResultsForMetricUrl">
                                @context.Item.Name
                            </MudLink>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["value"]">
                    <CellTemplate>
                        @context.Item.Value
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["unit"]">
                    <CellTemplate>
                        @context.Item.Unit
                    </CellTemplate>
                </TemplateColumn>

                
                <TemplateColumn Title="" StickyRight>
                    <CellTemplate>
                        <MudMenu Class="rounded-0" Icon="@Icons.Material.Filled.MoreVert" OpenChanged="() => SetSelectedMetric(context.Item)">
                            <MudMenuItem OnClick="async () => await DeleteMetricAsync(context.Item)">@loc["delete"]</MudMenuItem>
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

        </MudDataGrid>
    }

    @if (!ReadOnly)
    {
        <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
            <MudSpacer />
            <MudButton data-testid="add-metric"
                       Class="tb-button-primary"
                       StartIcon="@Icons.Material.Outlined.Add"
                       Variant="Variant.Outlined"
                       OnClick="AddAsync">@loc["add-metric"]</MudButton>
        </MudStack>
    }
</MudStack>

@code {
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public TestCaseRun? TestCaseRun { get; set; }

    private TestCaseRun? _testCaseRun;

    private List<Metric> _metrics = [];

    private void SetSelectedMetric(Metric metric)
    {
        
    }

    protected override void OnParametersSet()
    {
        if (_testCaseRun?.Id != TestCaseRun?.Id)
        {
            _testCaseRun = TestCaseRun;
            _metrics = TestCaseRun?.Metrics?.ToList() ?? [];
        }
    }

    private async Task DeleteMetricAsync(Metric metric)
    {
        if (_testCaseRun is not null)
        {
            if(await metricsController.DeleteAsync(metric))
            {
                _metrics = _metrics.Where(x=>x.Id != metric.Id).ToList();
            }
        }
    }

    private async Task AddAsync()
    {
        if(_testCaseRun is not null)
        {
            var createdMetric = await metricsController.AddAsync(_testCaseRun);
            if (createdMetric is not null)
            {
                _metrics = [.. _metrics, createdMetric];
            }
        }
    }
}
