@using Plotly.Blazor.LayoutLib
@using TestBucket.Components.Reporting.Helpers
@using TestBucket.Domain.Appearance.Models
@inject TestBrowser testBrowser
@inject IStringLocalizer<SharedStrings> loc
@inject ThemingService themingService

@if (Query is not null)
{
    <MudPaper Elevation="2" Class="tb-tile">
        <MudStack Spacing="0" Class="pa-1">
            <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">@Title</MudText>
                <MudSpacer />
                @if(Fields is not null)
                {
                    <MudSelect Value="@Field1" ValueChanged="OnField1Changed" T="FieldDefinition" HelperText="@loc["column"]">
                        @foreach(var field in Fields)
                        {
                            <MudSelectItem Value="@field">@field.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Value="@Field2" ValueChanged="OnField2Changed" T="FieldDefinition" HelperText="@loc["row"]">
                        @foreach (var field in Fields)
                        {
                            <MudSelectItem Value="@field">@field.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
            </MudStack>

            @if(_data.Count > 0)
            {
                <div class="tb-test-matrix" style="grid-template-columns: repeat(@(_columns.Count+1), 1fr)">
                    <div></div>
                    @foreach(var col in _columns)
                    {
                        <div class="col header">@col</div>
                    }

                    @foreach (var row in _rows)
                    {
                        <div class="row header">@row</div>
                        @foreach (var col in _columns)
                        {
                            @if(_data[col].ContainsKey(row))
                            {
								string color = GetCellColor(col, row);
								string style = $"background: {color}";

								<div style="@style" class="value"><div>@_data[col][row]</div></div>
                            }
                            else
                            {
                                <div class="value empty"/>
                            }
                        }
                    }
                </div>
            }
        </MudStack>
    </MudPaper>
}

@code {
	[Parameter] public IReadOnlyList<FieldDefinition> Fields { get; set; } = [];
	[Parameter] public SearchTestQuery? Query { get; set; }
	[Parameter] public FieldDefinition? Field1 { get; set; }
	[Parameter] public FieldDefinition? Field2 { get; set; }

	[Parameter] public EventCallback<FieldDefinition> Field1Changed { get; set; }
	[Parameter] public EventCallback<FieldDefinition> Field2Changed { get; set; }

	[Parameter] public string? Title { get; set; }

	private Dictionary<string, Dictionary<string, long>> _data = [];
	private List<string> _columns = [];
	private List<string> _rows = [];

	private async Task OnField1Changed(FieldDefinition? field1)
	{
		if(field1 is not null)
		{
			await Field1Changed.InvokeAsync(field1);
		}
	}
	private async Task OnField2Changed(FieldDefinition? field2)
	{
		if (field2 is not null)
		{
			await Field2Changed.InvokeAsync(field2);
		}
	}

	private long? _max;
	private long? _min;
	private TestBucketBaseTheme? _theme;

	private string GetCellColor(string col, string row)
	{
		if(_max is null || _min is null || _theme is null)
		{
			return "transparent";
		}

		var range = _max.Value - _min.Value;

		if (_data[col].TryGetValue(row, out var value) && _max > 0)
		{
			double x = value / (double)_max;
			int index = (int)Math.Round(x * (_theme.HeatmapPalette.Colors.Count-1));
			var color = _theme.HeatmapPalette.Colors[index];
			if(color is not null)
			{
				return color.ToString(Contracts.Appearance.Models.ColorOutputFormats.HexA);
			}
		}
		return "transparent";
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Query is not null && Field1 is not null && Field2 is not null)
		{
			var state = await themingService.GetApplicationStateAsync();
			_theme = state.Theme;

			_data = await testBrowser.GetTestCaseCoverageMatrixByFieldAsync(Query, Field1, Field2);
			_columns.Clear();
			_columns.AddRange(_data.Keys.OrderBy(x=>x));
			_rows.Clear();

			_min = _max = null;

			foreach (var col in _data.Keys)
			{
				foreach (var row in _data[col].Keys)
				{
					if(!_rows.Contains(row))
					{
						_rows.Add(row);

						if(_data[col].TryGetValue(row, out var value))
						{
							if(_max is null || _min is null)
							{
								_max = _min = value;
							}
							_max = Math.Max(value, _max.Value);
							_min = Math.Min(value, _min.Value);
						}
					}
                }
            }
            _rows.Sort();
        }
    }

}
