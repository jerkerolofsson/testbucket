@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject TenantResolver tenantResolver

@code {
    /// <summary>
    /// Redirects to the login page for the URL requested if the authenticated user does not belong to the requested tenant.
    /// This is not a security measure, the services does not use the tenant ID from the URL but the tenant ID from the claim
    /// of the authenticated user, so navigating to a page for another tenant will not result in any data from that tenant.
    ///
    /// The exception is login and register flows that uses the tenant ID from the URL
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var urlTenant = await tenantResolver.ResolveTenantIdFromUrlAsync(navigationManager.Uri);
        var state = await authStateProvider.GetAuthenticationStateAsync();
        var authTenant = state.User.Claims.FirstOrDefault(x => x.Type == "tenant")?.Value;
        if (urlTenant != authTenant)
        {
            navigationManager.NavigateTo($"/{urlTenant}/Account/Login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}");
        }
    }
}
