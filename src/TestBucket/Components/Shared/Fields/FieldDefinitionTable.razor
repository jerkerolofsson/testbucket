@using TestBucket.Components.Shared.Fields.Dialogs
@using TestBucket.Contracts.Fields
@using TestBucket.Domain.Fields.Models
@inject FieldController fieldController
@inject IDialogService dialogService
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<FieldStrings> fieldLoc

<MudDataGrid    Items="_fields"
                Dense="true"
                Hover="true"
                T="FieldDefinition"
                RowClick="async e => await EditFieldAsync(e.Item)"
                SortMode="SortMode.None">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddFieldAsync"></MudIconButton>

        </MudStack>
    </ToolBarContent>

    <ColGroup>
        <col style="width: 15%;" />
        <col style="width: 15%;"/>
        <col style="width: 5%;" />
        <col style="width: 20%;"/>
        <col style="width: 40%;" />
        <col style="width: 5%;" />
    </ColGroup>

    <Columns>
        <TemplateColumn Title="@loc["name"]">
            <CellTemplate>
                <MudStack Row AlignItems="AlignItems.Center">
                    @context.Item.Name
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        
        <PropertyColumn Property="x => x.Type" Title="@fieldLoc["field-type"]" />

        <TemplateColumn Title="@fieldLoc["inherited"]">
            <CellTemplate>
                @if(context.Item.Inherit)
                {
                    <MudText Color="Color.Success">●</MudText>
                }
                else
                {
                    <MudText Color="Color.Error">●</MudText>
                }
            </CellTemplate>
        </TemplateColumn>
      

        <TemplateColumn Title="@fieldLoc["field-target"]">
            <CellTemplate>
                @string.Join(", ", context.Item.Target)
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="@fieldLoc["field-options"]">
            <CellTemplate>
                @if(context.Item.Options is not null)
                {
                    @string.Join(", ", context.Item.Options)
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Clear" OnClick="async () => await DeleteAsync(context.Item)"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="FieldDefinition" />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter] public long? ProjectId { get; set; }

    private IReadOnlyList<FieldDefinition> _fields = [];

    private async Task EditFieldAsync(FieldDefinition fieldDefinition)
    {
        var parameters = new DialogParameters<EditFieldDefinitionDialog>
        {
            { x=>x.FieldDefinition, fieldDefinition }
        };
        var dialog = await dialogService.ShowAsync<EditFieldDefinitionDialog>(null, parameters);
        var result = await dialog.Result;
        await ReloadFieldsAsync();
    }

    private async Task DeleteAsync(FieldDefinition definition)
    {
        await fieldController.DeleteAsync(definition);
        await ReloadFieldsAsync();
    }

    private async Task AddFieldAsync()
    {
        FieldDefinition definition = new()
            {
                IsVisible = true,
                Name = "Priority",
                Options = ["Low", "Medium", "High"],
                TestProjectId = ProjectId,
                Type = Domain.Fields.Models.FieldType.String
            };

        var parameters = new DialogParameters<AddFieldDefinitionDialog>
        {
            { x=>x.FieldDefinition, definition }
        };
        var dialog = await dialogService.ShowAsync<AddFieldDefinitionDialog>(null, parameters);
        var result = await dialog.Result;
        await ReloadFieldsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ReloadFieldsAsync();
    }

    private async Task ReloadFieldsAsync()
    {
        FieldTarget? target = null;
        _fields = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery() { ProjectId = ProjectId, Target = target });
    }
}
