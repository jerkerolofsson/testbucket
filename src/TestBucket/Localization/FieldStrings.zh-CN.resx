<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add-custom-field" xml:space="preserve">
    <value>添加自定义字段</value>
  </data>
  <data name="add-new-field" xml:space="preserve">
    <value>添加新字段</value>
  </data>
  <data name="advanced" xml:space="preserve">
    <value>先进的</value>
  </data>
  <data name="appearance" xml:space="preserve">
    <value>外貌</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>漏洞</value>
    <comment>Label type</comment>
  </data>
  <data name="data-source" xml:space="preserve">
    <value>数据源</value>
  </data>
  <data name="data-source-type-commits" xml:space="preserve">
    <value>提交</value>
  </data>
  <data name="data-source-type-components" xml:space="preserve">
    <value>成分</value>
  </data>
  <data name="data-source-type-external" xml:space="preserve">
    <value>从外部服务获取数据</value>
  </data>
  <data name="data-source-type-features" xml:space="preserve">
    <value>特征</value>
  </data>
  <data name="data-source-type-issues" xml:space="preserve">
    <value>问题</value>
  </data>
  <data name="data-source-type-labels" xml:space="preserve">
    <value>标签</value>
  </data>
  <data name="data-source-type-layers" xml:space="preserve">
    <value>层</value>
  </data>
  <data name="data-source-type-list" xml:space="preserve">
    <value>用户定义的列表</value>
  </data>
  <data name="data-source-type-milestones" xml:space="preserve">
    <value>里程碑</value>
  </data>
  <data name="data-source-type-releases" xml:space="preserve">
    <value>发行</value>
  </data>
  <data name="data-source-type-requirements" xml:space="preserve">
    <value>要求</value>
  </data>
  <data name="data-source-type-systems" xml:space="preserve">
    <value>系统</value>
  </data>
  <data name="data-source-type-testcases" xml:space="preserve">
    <value>测试用例</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="description-helpertext" xml:space="preserve">
    <value>可以向用户显示的有用描述</value>
  </data>
  <data name="documentation" xml:space="preserve">
    <value>文档</value>
    <comment>Label type</comment>
  </data>
  <data name="duplicate" xml:space="preserve">
    <value>复制</value>
    <comment>Label type</comment>
  </data>
  <data name="enhancement" xml:space="preserve">
    <value>增强</value>
    <comment>Label type</comment>
  </data>
  <data name="field-data-source-not-available" xml:space="preserve">
    <value>此类输入不可用数据源</value>
  </data>
  <data name="field-icon" xml:space="preserve">
    <value>现场图标</value>
  </data>
  <data name="field-options" xml:space="preserve">
    <value>选项</value>
  </data>
  <data name="field-readonly" xml:space="preserve">
    <value>只读</value>
  </data>
  <data name="field-required-permission" xml:space="preserve">
    <value>需要编辑的许可</value>
  </data>
  <data name="field-target" xml:space="preserve">
    <value>目标</value>
  </data>
  <data name="field-target-helpertext" xml:space="preserve">
    <value>定义可以具有此字段的实体类型</value>
  </data>
  <data name="field-type" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="good first issue" xml:space="preserve">
    <value>好的第一个问题</value>
    <comment>Label type</comment>
  </data>
  <data name="grouping" xml:space="preserve">
    <value>分组</value>
  </data>
  <data name="help wanted" xml:space="preserve">
    <value>把招工广告</value>
    <comment>Label type</comment>
  </data>
  <data name="icons" xml:space="preserve">
    <value>图标</value>
  </data>
  <data name="inherit" xml:space="preserve">
    <value>继承</value>
  </data>
  <data name="inherited" xml:space="preserve">
    <value>遗传</value>
  </data>
  <data name="inherit-helpertext" xml:space="preserve">
    <value>如果启用，实体将从父实体继承该值。 例如，测试用例可以从文件夹中继承该值，该文件夹从测试套件中继承了值，或者执行的测试用例将从测试案例继承该值。</value>
  </data>
  <data name="input-type" xml:space="preserve">
    <value>输入类型</value>
  </data>
  <data name="input-type-helpertext" xml:space="preserve">
    <value>将显示给用户输入字段值的输入UI控件的类型</value>
  </data>
  <data name="invalid" xml:space="preserve">
    <value>无效的</value>
    <comment>Label type</comment>
  </data>
  <data name="name" xml:space="preserve">
    <value>姓名</value>
  </data>
  <data name="name-helpertext" xml:space="preserve">
    <value>自定义字段的唯一名称</value>
  </data>
  <data name="options" xml:space="preserve">
    <value>输入选项</value>
  </data>
  <data name="options-helpertext" xml:space="preserve">
    <value>用户可以选择此字段的选项</value>
  </data>
  <data name="preview" xml:space="preserve">
    <value>预览</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>问题</value>
    <comment>Label type</comment>
  </data>
  <data name="show-description" xml:space="preserve">
    <value>显示描述</value>
  </data>
  <data name="trait" xml:space="preserve">
    <value>现场特征映射</value>
  </data>
  <data name="trait-helpertext" xml:space="preserve">
    <value>该字段映射到的定义明确的特征。 该性状用于映射各种格式之间的导入/导出字段，可用于报告和分析</value>
  </data>
  <data name="trait-match-known-type" xml:space="preserve">
    <value>这个特征与众所周知的类型相匹配</value>
  </data>
  <data name="use-classifier" xml:space="preserve">
    <value>AI分类</value>
  </data>
  <data name="use-classifier-helpertext" xml:space="preserve">
    <value>如果进行更改后，则使用AI更新此字段，如果它是空的。</value>
  </data>
  <data name="use-predefined-field" xml:space="preserve">
    <value>使用预定义的字段</value>
  </data>
  <data name="visible" xml:space="preserve">
    <value>可见的</value>
  </data>
  <data name="wontfix" xml:space="preserve">
    <value>不会修复</value>
    <comment>Label type</comment>
  </data>
  <data name="default-value" xml:space="preserve">
    <value />
  </data>
</root>