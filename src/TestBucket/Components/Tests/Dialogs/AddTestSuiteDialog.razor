@using TestBucket.Domain.Teams.Models
@attribute [Authorize(Roles = "ADMIN")]
@inject TestSuiteService testSuiteService

<EditForm Model="@_name" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <DialogContent>
            <MudStack Spacing="1">
                @if (_name is not null)
                {
                    <MudTextField 
                    AutoFocus="true"
                    Variant="Variant.Outlined"
                    T="string" ValueChanged="OnValueChanged" Value="@_name"></MudTextField>

                    <MudStack Spacing="1" Row="true" Class="mt-2">
                        <MudTooltip Text="Slug"><MudText Style="background: black; font-size: 7pt">@_slug</MudText></MudTooltip>
                        <MudTooltip Text="Short Name"><MudText Style="background: black; font-size: 7pt">@_shortName</MudText></MudTooltip>
                    </MudStack>
                }
                @if (_errorMessage is not null)
                {
                    <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
                }

                <TestBucket.Components.Projects.Controls.ProjectDropDown @bind-SelectedProject="@_project"/>

            </MudStack>
        </DialogContent>

        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">OK</MudButton>
            <MudButton OnClick="Close">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private string _name = "";
    private string _slug = "";
    private string _shortName = "";

    private string? _errorMessage;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Team? Team { get; set; }
    [Parameter] public TestProject? Project { get; set; }

    private TestProject? _project;
    private Team? _team;

    protected override void OnParametersSet()
    {
        _team = Team;
        _project = Project;
    }

    private void OnValueChanged(string name)
    {
        _name = name;

    }

    private void Close()
    {
        MudDialog.Close();
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(_name))
        {
            _errorMessage = "Invalid name";
            return;
        }

        var testSuite = await testSuiteService.AddTestSuiteAsync(_team?.Id, _project?.Id, _name);
        MudDialog.Close(testSuite);
    }
}
