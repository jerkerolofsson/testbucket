@attribute [Authorize()]
@page "/{TenantId}/Code/Features"
@using TestBucket.Components.Code.Controls
@using TestBucket.Components.Issues.Controls
@using TestBucket.Components.Shared.Profile
@using TestBucket.Contracts.Fields
@using TestBucket.Domain
@using TestBucket.Domain.Code.Models
@using TestBucket.Domain.Testing.TestCases.Search
@using TestBucket.Domain.Testing.TestRuns.Search
@layout CodeLayout
@inject ArchitectureController architectureController
@inject FieldController fieldController
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<CodeStrings> codeLoc
@inject AuthenticationStateProvider authenticationStateProvider 
@inject AppNavigationManager appNavigationManager

<Splitter Class="container-fill pa-2" Bordered="false" Dimension="50" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>
        @if (_project is not null)
        {
            <MudDataGrid 
            @ref="_grid"
            ServerData="LoadGridData"
            Dense Hover RowClass="tb-datarow cursor-pointer"
            RowClick="async (row) => await OnRowClicked(row.Item)"
            T="Feature" SortMode="SortMode.None">

                <ToolBarContent>
                    <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                        <MudTextField Value="@_searchText" T="string" ValueChanged="OnSearch"
                                      Class="default-search"
                                      Clearable="true"
                                      Variant="Variant.Outlined"
                                      IconSize="Size.Small"
                                      Adornment="Adornment.Start"
                                      Placeholder="@loc["search"]"
                                      AdornmentIcon="@Icons.Material.Filled.Search" />

                        <MudSpacer />

                        <PermissionView Entity="PermissionEntityType.Architecture" Level="PermissionLevel.Write">
                            <Authorized>
                                <MudButton 
                                    StartIcon="@Icons.Material.Filled.Add"
                                    Class="tb-button-new" OnClick="AddAsync" Variant="Variant.Filled">@loc["add"]</MudButton>
                            </Authorized>
                        </PermissionView>
                    </MudStack>
                </ToolBarContent>

                <ColGroup>
                    <col style="width: 80%" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                </ColGroup>

                <Columns>
                    <TemplateColumn Title="@loc["name"]">
                        <CellTemplate>
                            <div class="name">@context.Item.Name</div>
                           
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="@codeLoc["dev-lead"]">
                        <CellTemplate>
                            @if (context.Item.DevLead is not null)
                            {
                                <UserProfileImage UserName="@context.Item.DevLead" />
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="@codeLoc["test-lead"]">
                        <CellTemplate>
                            @if (context.Item.TestLead is not null && context.Item.DevLead != context.Item.TestLead)
                            {
                                <UserProfileImage UserName="@context.Item.TestLead" />
                            }
                        </CellTemplate>
                    </TemplateColumn>

                </Columns>

                <PagerContent>
                    <MudDataGridPager T="Feature" />
                </PagerContent>
            </MudDataGrid>
        }
    </StartContent>
    <EndContent>
        @if (_selectedFeature is not null)
        {
            <MudTabs Style="width: 100%">
                <MudTabPanel Text="@codeLoc["feature"]">
                    <MudStack Class="pa-2">
                        <ArchitecturalComponentView Component="_selectedFeature"/>
                    </MudStack>
                </MudTabPanel>
                <MudTabPanel Text="@loc["issues"]">
                    <IssueGrid @bind-SearchText="_issueSearchText" />
                </MudTabPanel>
                <MudTabPanel Text="@loc["test-cases"]">
                    <TestCaseGrid @bind-Query="_testCaseQuery" CompareFolder="false" Project="Project"/>
                </MudTabPanel>
                <MudTabPanel Text="@loc["test-results"]">
                    <TestCaseRunGrid @bind-Query="_testCaseRunQuery" />
                </MudTabPanel>
            </MudTabs>
        }
    </EndContent>
</Splitter>


@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    private TestProject? _project;
    private IReadOnlyList<Feature> _features = [];
    private MudDataGrid<Feature>? _grid;
    private string _searchText = "";
    private Feature? _selectedFeature;
    private SearchTestQuery _testCaseQuery = new();
    private SearchTestCaseRunQuery _testCaseRunQuery = new();
    private string _issueSearchText = "";

    protected void OnSearch(string text)
    {
        _searchText = text;
        _grid?.ReloadServerData();
    }

    private async Task AddAsync()
    {
        await architectureController.AddFeatureAsync();
        await ReloadAsync();
    }

    private async Task OnRowClicked(Feature feature)
    {
        _selectedFeature = feature;
        appNavigationManager.State.SetSelectedFeature(feature);

        if(_project is not null)
        {
            var q = $"feature:\"{_selectedFeature.Name}\"";
            var testCaseFields = await fieldController.GetDefinitionsAsync(_project.Id, FieldTarget.TestCase);
            var testCaseRunFields = await fieldController.GetDefinitionsAsync(_project.Id, FieldTarget.TestCaseRun);
            _testCaseQuery = SearchTestCaseQueryParser.Parse(q, testCaseFields);
            _testCaseRunQuery = SearchTestCaseRunQueryParser.Parse(q, testCaseRunFields);
            _issueSearchText = q;
        }
    }

    private async Task EditAsync(Feature feature)
    {
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.HasPermission(PermissionEntityType.Architecture, PermissionLevel.Write))
        {
            await architectureController.EditFeatureAsync(feature);
            await ReloadAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        if(_project?.Id != Project?.Id && Project is not null)
        {
            _project = Project;
            await ReloadAsync();
        }
    }
    private async Task ReloadAsync()
    {
        if(Project is not null)
        {
            _features = await architectureController.GetFeaturesAsync(Project.Id);
            _grid?.ReloadServerData();
        }
    }

    protected async Task DeleteAsync(Feature feature)
    {
        await architectureController.DeleteFeatureAsync(feature);
        await ReloadAsync();
    }

    /// <summary>
    /// Loads commit data
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    private Task<GridData<Feature>> LoadGridData(GridState<Feature> state)
    {
        if (Project is null)
        {
            return Task.FromResult(new GridData<Feature> { TotalItems = 0 });
        }

        Feature[] page;
        if(string.IsNullOrEmpty(_searchText))
        {
            page = _features.OrderBy(x=>x.Name).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }
        else
        {
            page = _features.OrderBy(x => x.Name).Where(x => x.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase)).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }


        GridData<Feature> data = new()
        {
            Items = page,
            TotalItems = (int) _features.Count
        };

        return Task.FromResult(data);
    }
}