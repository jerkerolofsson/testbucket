@attribute [Authorize()]
@page "/{TenantId}/Tests"
@using Humanizer
@using TestBucket.Components.Layout
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Teams.Models
@layout AppLayout
@inject TestCaseEditorService testCaseEditor
@implements ITestCaseObserver
@implements IDisposable

<TenantRedirect/>

<MudSplitter Style="height: 100%" Color="Color.Primary" Bordered="false" Dimension="20" EnableMargin="false">
    <StartContent>
        <TestTreeView OnFolderClicked="OnFolderClicked" OnTestSuiteClicked="OnTestSuiteClicked" OnTestCaseClicked="OnTestCaseClicked" OnTestRunClicked="OnTestRunClicked" />
    </StartContent>

    <EndContent>
        @if (_selectedTestCase is not null)
        {
            <TestCaseEditor Test="@_selectedTestCase" TestChanged="OnTestModified" />
        }
        else if (_selectedTestRun is not null)
        {
            <TestRunView TestRun="@_selectedTestRun"/>
        }
        else if(_selectedTestSuiteId is not null)
        {
            <TestCaseGrid CompareFolder="false" TestSuiteId="@_selectedTestSuiteId" OnTestCaseClicked="OnTestCaseClicked" />
        }
        else
        {
            <TestCaseGrid CompareFolder="true" Folder="@_selectedFolder" TestSuiteId="@_selectedTestSuiteId" OnTestCaseClicked="OnTestCaseClicked" />
        }
    </EndContent>
</MudSplitter>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private Team? _team;
    private TestProject? _project;
    private TestCase? _selectedTestCase;
    private TestRun? _selectedTestRun;
    private TestSuiteFolder? _selectedFolder;
    private long? _selectedTestSuiteId;

    protected override void OnParametersSet()
    {
        if(_project != Project || _team != Team)
        {
            _project = Project;
            _team = Team;

            // Clear selection
            _selectedFolder = null;
            _selectedTestCase = null;
            _selectedTestSuiteId = null;
            _selectedTestRun = null;
        }
    }

    private void OnTestCaseClicked(TestCase test)
    {
        _selectedFolder = null;
        _selectedTestRun = null;
        _selectedTestCase = test;
    }

    public async Task OnTestDeletedAsync(TestCase testCase)
    {
        await InvokeAsync(() =>
        {
            if (_selectedTestCase?.Id == testCase.Id)
            {
                _selectedTestCase = null;
                this.StateHasChanged();
            }
        });
    }

    public Task OnTestCreatedAsync(TestCase testCase)
    {
        return Task.CompletedTask;
    }

    public Task OnTestSavedAsync(TestCase testCase)
    {
        return Task.CompletedTask;
    }

    private async Task OnTestModified(TestCase test)
    {
        _selectedTestCase = test;
        await testCaseEditor.SaveTestCaseAsync(test);
    }

    private void OnTestSuiteClicked(TestSuite suite)
    {
        _selectedTestRun = null;
        _selectedTestCase = null;
        _selectedFolder = null;
        _selectedTestSuiteId = suite.Id;
    }
    private void OnFolderClicked(TestSuiteFolder folder)
    {
        _selectedTestRun = null;
        _selectedTestCase = null;
        _selectedFolder = folder;
        _selectedTestSuiteId = null;
    }
    private void OnTestRunClicked(TestRun run)
    {
        _selectedTestRun = run;
        _selectedTestCase = null;
        _selectedFolder = null;
        _selectedTestSuiteId = null;
    }

    #region Lifecycle
    protected override void OnInitialized()
    {
        testCaseEditor.AddObserver(this);
    }
    public void Dispose()
    {
        testCaseEditor.RemoveObserver(this);
    }
    #endregion
}
