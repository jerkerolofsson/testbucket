@page "/{TenantId}/Account/Register"
@using TestBucket.Components.Users
@layout EmptyLayout
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserRegistrationService userService

<PageTitle>Register</PageTitle>

<MudPaper Class="tb-login-container" Style="min-width: 400px">

    <MudText Typo="Typo.h1" Color="Color.Tertiary">Register</MudText>
    <MudText>Create a new account.</MudText>

    <StatusMessage Message="@Message" />
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <MudStack Spacing="0" Class="mt-5">
            <InputText @bind-Value="Input.Email" id="Input.Email" autocomplete="username" aria-required="true" Placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </MudStack>
        <MudStack Spacing="0" Class="mt-3">
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" autocomplete="current-password" aria-required="true" placeholder="Password" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </MudStack>
        <MudStack Spacing="0" Class="mt-3">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" autocomplete="current-password" aria-required="true" placeholder="Confirm password" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </MudStack>

        <MudStack Row Class="mt-3">
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Register</MudButton>
        </MudStack>
    </EditForm>

    @* <div class="col-lg-4 col-lg-offset-2"> *@
    @*     <section> *@
    @*         <h3>Use another service to register.</h3> *@
    @*         <hr /> *@
    @*         <ExternalLoginPicker /> *@
    @*     </section> *@
    @* </div> *@
</MudPaper>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [Parameter] public string TenantId { get; set; } = "";

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var response = await userService.RegisterUserAsync(TenantId, Input.Email, Input.Password, ReturnUrl);
        if (response.User is null)
        {
            identityErrors = response.Errors;
            return;
        }

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                $"{TenantId}/Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
