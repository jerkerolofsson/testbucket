@attribute [Authorize()]
@page "/{TenantId}/Issues"
@using System.Threading.Tasks
@using TestBucket.Components.Shared.Commands
@using TestBucket.Components.Issues.Layouts
@using TestBucket.Components.Labels.Controllers
@using TestBucket.Domain
@using TestBucket.Domain.Commands
@using TestBucket.Domain.ExtensionManagement
@using TestBucket.Domain.Issues
@using TestBucket.Domain.Issues.Models
@using TestBucket.Domain.Labels.Models
@using TestBucket.Domain.Issues.Search
@layout IssuesLayout
@inject AppNavigationManager appNavigationManager
@inject IssueController controller
@inject LabelController labelController
@inject IExtensionManager extensionManager
@inject CommandController commandManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc
@inject IIssueManager issueManager
@implements IDisposable
@implements ILocalIssueObserver

<MudStack Style="width: 100%" Class="pa-2">
    @if (Project is not null)
    {
        <MudStack Spacing="3" Row AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h1" Color="Color.Primary">@_totalCount</MudText>
            <MudText Typo="Typo.h1">@issueLoc["issues"]</MudText>
        </MudStack>

        <MudDataGrid @ref="_grid"
			ServerData="LoadGridData"
			Dense Hover 
			RowClass="tb-datarow cursor-pointer"
			RowContextMenuClick="(row) => OnRowContextMenuClicked(row)"
			RowClick="(row) => OnRowClicked(row)"
        T="LocalIssue" SortMode="SortMode.None">

            <ToolBarContent>
                <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                    <MudTextField Value="@_searchText" T="string" ValueChanged="OnSearch"
                    Class="default-search"
                    Clearable="true"
                    Variant="Variant.Outlined"
                    IconSize="Size.Small"
                    Adornment="Adornment.Start"
                    Placeholder="@loc["search"]"
                    AdornmentIcon="@Icons.Material.Filled.Search" />

                    <SemanticSearchToggle @bind-Enabled="@_semanticSearch" EnabledLabel="@loc["semantic-search"]" DisabledLabel="@loc["normal-search"]" />

                    <MudSpacer />
                    <PermissionView Entity="PermissionEntityType.Issue" Level="PermissionLevel.Write">
                        <Authorized>
                            <MudButton 
                                StartIcon="@Icons.Material.Filled.Add"
                                Class="tb-button-new" OnClick="AddIssue" Variant="Variant.Filled">@issueLoc["new-issue"]</MudButton>
                        </Authorized>
                    </PermissionView>
                </MudStack>
            </ToolBarContent>

            <ColGroup>
                <col style="width: 150px;" />
                <col style="width: 2fr;" />
                <col style="width: 100px;" />
                <col style="width: 100px;" />
                <col style="width: 200px;" />
            </ColGroup>

            <Columns>
                <TemplateColumn Title="@loc["id"]">
                    <CellTemplate>
                        <MudTooltip Text="@context.Item.Url">
                            <MudStack AlignItems="AlignItems.Center" Row Spacing=1>
                                @if(UserPreferences?.PreferTextToIcons == true)
                                {
                                    <MudText>@(context.Item.ExternalSystemName ?? "TestBucket")</MudText>
                                }
                                else
                                {
                                    @if (context.Item.ExternalSystemName is not null)
                                    {
                                        <MudIcon Icon="@extensionManager.GetIcon(context.Item.ExternalSystemName??"")" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@TbIcons.Brands.TestBucket" />
                                    }
                                }
                                <MudText>@context.Item.ExternalDisplayId</MudText>
                            </MudStack>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>


                <TemplateColumn Title="@loc["title"]">
                    <CellTemplate>
                        @context.Item.Title
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["state"]">
                    <CellTemplate>
                        @context.Item.State
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["type"]">
                    <CellTemplate>
                        @context.Item.IssueType
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="@loc["label"]">
                    <CellTemplate>
                        <MudStack Row>
                            @foreach (var label in context.Item.GetLabels())
                            {
                                var color = GetLabelColor(label);
                                <Chip Text="@label" Color="@color"></Chip>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <PagerContent>
                <MudDataGridPager T="LocalIssue" />
            </PagerContent>
        </MudDataGrid>
    }

	<MudMenu PositionAtCursor="true" @ref="_contextMenu">
		<CommandMenuItems TypeNames="issue"/>
	</MudMenu>

</MudStack>

@code {
	[Parameter] public string TenantId { get; set; } = "";
	[CascadingParameter] public TestProject? Project { get; set; }
	[CascadingParameter] public UserPreferences? UserPreferences { get; set; }
	[CascadingParameter] public Team? Team { get; set; }

	[SupplyParameterFromQuery(Name = "q")] public string? Query { get; set; }

	private MudMenu? _contextMenu;
	private MudDataGrid<LocalIssue>? _grid;
	private string? _searchText;
	private bool _semanticSearch = true;

	private long? _totalCount;

	private IReadOnlyList<Label> _labels = [];

	public string GetLabelColor(string name)
	{
		var label = _labels.Where(x=>x.Title == name).FirstOrDefault();
		return label?.Color ?? "#777";
	}

	protected override async Task OnParametersSetAsync()
	{
		if(Project is not null && _labels.Count == 0)
		{
			_labels = await labelController.GetLabelsAsync(Project);
		}

		appNavigationManager.State.ClearSelection();
		OnSearch(Query ?? "state:open is:issue");
	}

	protected void OnSearch(string text)
	{
		_searchText = text;
		_grid?.ReloadServerData();
	}

	private async Task OnRowContextMenuClicked(DataGridRowClickEventArgs<LocalIssue> row)
	{
		if(_contextMenu is null)
		{
			return;
		}

		var issue = row.Item;
		appNavigationManager.State.SetSelectedIssue(issue);
		await _contextMenu.OpenMenuAsync(row.MouseEventArgs, false);
	}

	private Task OnRowClicked(DataGridRowClickEventArgs<LocalIssue> row)
	{
		var issue = row.Item;
		appNavigationManager.NavigateTo(issue);
		return Task.CompletedTask;
	}

    private async Task AddIssue()
    {
        await commandManager.ExecuteAsync("create-issue");
    }


    /// <summary>
    /// Loads issues
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    private async Task<GridData<LocalIssue>> LoadGridData(GridState<LocalIssue> state)
    {
        if (Project is null)
        {
            return new GridData<LocalIssue> { TotalItems = 0 };
        }

        PagedResult<LocalIssue> result;
        if(_semanticSearch)
        {
            result = await controller.SemanticSearchAsync(Project.Id, _searchText ?? "", state.Page * state.PageSize, state.PageSize);
        }
        else
        {
            result = await controller.SearchAsync(Project.Id, _searchText ?? "", state.Page * state.PageSize, state.PageSize);
        }

        if (_totalCount != result.TotalCount)
        {
            _totalCount = result.TotalCount;
            await this.InvokeAsync(StateHasChanged);
        }

        return new GridData<LocalIssue>()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };
    }

    protected override void OnInitialized()
    {
        issueManager.AddObserver(this);
    }

    public void Dispose()
    {
        issueManager.RemoveObserver(this);
    }
    public Task OnLocalIssueAddedAsync(LocalIssue issue)
    {
        _grid?.ReloadServerData();
        return Task.CompletedTask;
    }
    public Task OnLocalIssueUpdatedAsync(LocalIssue issue)
    {
        _grid?.ReloadServerData();
        return Task.CompletedTask;
    }
    public Task OnLocalIssueFieldChangedAsync(LocalIssue issue)
    {
        _grid?.ReloadServerData();
        return Task.CompletedTask;
    }
    public Task OnLocalIssueDeletedAsync(LocalIssue issue)
    {
        _grid?.ReloadServerData();
        return Task.CompletedTask;
    }
}
