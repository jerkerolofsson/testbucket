@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Domain.Insights.Model
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<InsightStrings> insightLoc

@if(Data is not null && ColorMap is not null)
{
    <div class="tb-insights-heatmap">
        @foreach(var series in Data.Series)
        {
            // Get the base color for hte series
            ColorMap.TryGetValue(series.Name, out var color);
            color ??= "#2085fb";

            <div class="series-name">@insightLoc[series.Name]</div>

            <div class="values">
                @foreach(var point in series.Data)
                {
                    var scaledColor = GetColor(color, point.Value);
                    string css = $"background: {scaledColor}";

                    <div style="@css" class="item">
                        @if(point.Value != _min)
                        {
							<MudTooltip Text="@point.Label">
								<span>@point.Value</span>
							</MudTooltip>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter] public Dictionary<string, string> ColorMap { get; set; } = [];
    [Parameter] public InsightsData<string, double>? Data { get; set; }

    private double _min;
    private double _max;

    public string GetColor(string baseColor, double value)
    {
        // Normalize the value between 0.0 and 1.0
        var n = (value - _min) / (_max - _min);

        ThemeColor color = baseColor;
        var scaledColor = color.SetAlpha(n);

        return scaledColor.ToString(ColorOutputFormats.HexA);
    }

    protected override void OnParametersSet()
    {
        if(Data is null)
        {
            return;
        }

        _min = double.MaxValue;
        _max = double.MinValue;
        foreach (var series in Data.Series)
        {
            if(series.HasData)
            {
                _min = Math.Min(series.Values.Min(), _min);
                _max = Math.Max(series.Values.Max(), _max);
            }
        }
    }
}
