@attribute [Authorize()]
@using TestBucket.Components.Issues.Layouts
@using TestBucket.Components.Reporting.Controllers
@using TestBucket.Components.Shared.Themeing.Models
@using TestBucket.Contracts.Appearance
@using TestBucket.Contracts.Insights
@using TestBucket.Contracts.Issues.States
@using TestBucket.Domain
@using TestBucket.Domain.Appearance
@using TestBucket.Domain.Commands
@using TestBucket.Domain.ExtensionManagement
@using TestBucket.Domain.Insights.Model
@using TestBucket.Domain.Issues.Insights
@using TestBucket.Domain.Issues.Models
@using TestBucket.Domain.Issues.Search
@using TestBucket.Domain.Testing.TestCases.Insights
@using TestBucket.Domain.Testing.TestRuns.Insights
@inject AppNavigationManager appNavigationManager
@inject InsightsController controller
@inject IExtensionManager extensionManager
@inject ICommandManager commandManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc
@inject DashboardController controller

<div>

    @if(_dashboard is not null)
    {
        @if(!ReadOnly)
        {
            <MudStack Style="width: 100%" Row AlignItems="AlignItems.Center">
                <MudTextField T="string" Value="_dashboard.Name" Variant="Variant.Outlined"/>
                <MudSpacer/>
                <MudIconButton Color="Color.Error" data-testid="delete-dashboard" Icon="@Icons.Material.Filled.Delete" OnClick="DeleteDashboardAsync" />
            </MudStack>
        }

        <div class="tb-insights-dashboard">
            @if (_dashboard.Specifications is not null)
            {
                @foreach (var data in _dashboard.Specifications)
                {
                    <InsightsChart State="State" Project="Project" ReadOnly="@ReadOnly" UserQuery="@_query" Spec="@data" 
                        Delete="OnDeleteAsync"
                        SpecChanged="OnSpecChangedAsync" />
                }

                @if(!ReadOnly)
                {
                    <MudPaper Elevation="2" Class="tb-tile">
                        <button @onclick="AddSpec" class="add" data-testid="add" style="font-size: 64pt; width: 100%; height: 100%">+</button>
                    </MudPaper>
                }
            }
        </div>
    }
</div>

@code {
    [Parameter] public bool ReadOnly { get; set; } = true;
    [Parameter] public string? DashboardName { get; set; }
    [Parameter] public long? DashboardId { get; set; }
    [Parameter] public string Query { get; set; } = "";
    [CascadingParameter] public TestProject Project { get; set; } = default!;
    [CascadingParameter] public ApplicationState? State { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    [Parameter] public EventCallback<Dashboard> Deleted { get; set; }
    private string _query = "";
    private Dashboard? _dashboard;

    private async Task AddSpec()
    {
        if (_dashboard is not null)
        {
            _dashboard.Specifications ??= [];
            _dashboard.Specifications.Add(new InsightsVisualizationSpecification()
            {
                Name = "New Insight"
            });
            await controller.UpdateDashboardAsync(_dashboard);
        }
    }

    private async Task DeleteDashboardAsync()
    {
        if (_dashboard is not null)
        {
            var deleted = await controller.DeleteDashboardAsync(_dashboard);
            if(deleted)
            {
                await Deleted.InvokeAsync(_dashboard);
            }
        }
    }
    private async Task OnDeleteAsync(InsightsVisualizationSpecification spec)
    {
        if (spec is not null && _dashboard is not null)
        {
            _dashboard.Specifications ??= [];
            _dashboard.Specifications.Remove(spec);
            await controller.UpdateDashboardAsync(_dashboard);
        }
    }
    private async Task OnSpecChangedAsync(InsightsVisualizationSpecification? spec)
    {
        if(spec is not null && _dashboard is not null)
        {
            await controller.UpdateDashboardAsync(_dashboard);
        }
    }

    // private InsightsVisualizationSpecification? _testsByCat;
    // private InsightsVisualizationSpecification? _countByResultsSpec;
    // private InsightsVisualizationSpecification? _countByLatestResultsSpec;
    // private InsightsVisualizationSpecification? _countResultsByComponentSpec;
    // private InsightsVisualizationSpecification? _countResultsByAsigneeSpec;

    // private InsightsVisualizationSpecification? _inflowOutflowSpec;
    // private InsightsVisualizationSpecification? _countPerStateSpec;

    protected override async Task OnParametersSetAsync()
    {
        if (DashboardId is not null)
        {
            _dashboard = await controller.GetDashboardByIdAsync(DashboardId.Value); 
        }
        else if (DashboardName is not null)
        {
            _dashboard = await controller.GetDashboardByNameAsync(Project.Id, DashboardName);
        }

        if(_dashboard is not null)
        {
            _dashboard.TestProjectId = Project.Id;
        }

        if (_dashboard?.Specifications is not null)
        {
            if(Query is not null)
            {
                foreach(var spec in _dashboard.Specifications)
                {
                    foreach(var query in spec.DataQueries)
                    {
                        query.Query = Query;
                    }
                }
            }
        }
    }

}
