@using Plotly.Blazor.LayoutLib
@using TestBucket.Components.Reporting.Helpers
@using TestBucket.Domain.Testing.Aggregates
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject IStringLocalizer<SharedStrings> loc
@inject ThemingService themingService

<MudPaper Elevation="2">
    <MudStack Spacing="0" Class="pa-1">
        <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">@Title</MudText>
            <MudSpacer/>
            <MudToggleGroup T="GroupBy" Value="@_grouping" ValueChanged="OnGroupByChanged" Color="Color.Surface">
                <MudToggleItem Value="GroupBy.Category">@loc["groupby-category"]</MudToggleItem>
                <MudToggleItem Value="GroupBy.Result">@loc["groupby-result"]</MudToggleItem>
            </MudToggleGroup>
        </MudStack>
        @if (_layout is not null && Results is not null)
        {
            <PlotlyChart style="height: 10vh; min-height: 350px" @ref="_chart" @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" />
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="350px" />
        }
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public Dictionary<string,TestExecutionResultSummary>? Results { get; set; }
    [Parameter] public GroupBy Grouping { get; set; } = GroupBy.Category;
    private GroupBy _grouping = GroupBy.Category;

    public enum GroupBy
    {
        Category,
        Result
    }

    private PlotlyChart? _chart;
    private Config? _config = new Config()
    {
        Responsive = true
    };
    private Layout? _layout;

    // Using of the interface IList is important for the event callback!
    private IList<ITrace> _data = new List<ITrace>
    {

    };

    private async Task OnGroupByChanged(GroupBy grouping)
    {
        _grouping = grouping;
        await BuildChartData();
    }

    private async Task BuildChartData()
    {
        if (_grouping == GroupBy.Category)
        {
            _layout = PlotlyChartBuilder.GetDefaultLayout(themingService.IsDarkMode);
            _layout.Colorway = new string[] { "rgba(11, 186, 131, 1)", "rgba(246, 78, 98, 1)", "rgb(250,220,80)", "rgb(150,150,150)", "rgb(50,50,50)" };
            _layout.BarMode = BarModeEnum.Stack;
            BuildResultsGroupedByCategory();
        }
        else
        {
            _layout = PlotlyChartBuilder.GetDefaultLayout(themingService.IsDarkMode);
            _layout.BarMode = BarModeEnum.Stack;

            BuildResultsGroupedByResult();
        }

        if (_chart is not null)
        {
            await _chart.Update(_data, _layout);
            await _chart.React();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _grouping = Grouping;

        if (Results is not null)
        {
            await BuildChartData();
        }
    }

    private void BuildResultsGroupedByCategory()
    {
        if (Results is null)
        {
            return;
        }
        _data.Clear();
        var categories = Results.Keys.ToArray();
        foreach (var result in PlotlyChartBuilder.ResultLabels)
        {
            PlotlyChartBuilder.BuildPassrateCategoryBarData(_data, categories, result, Results.Values);
        }
    }

    private void BuildResultsGroupedByResult()
    {
        if (Results is null)
        {
            return;
        }
        _data.Clear();
        foreach(var kvp in Results)
        {
            var result = kvp.Value;
            string name = kvp.Key;
            _data.Add(PlotlyChartBuilder.CreateResultBar(result, name));
        }
    }
}
