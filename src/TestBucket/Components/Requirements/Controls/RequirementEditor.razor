@using MudBlazor.Utilities
@using TestBucket.Components.Comments
@using TestBucket.Components.Comments.Controls
@using TestBucket.Components.Requirements.Commands
@using TestBucket.Contracts.Requirements.States
@using TestBucket.Contracts.Requirements.Types
@using TestBucket.Domain.Appearance
@using TestBucket.Domain.Comments.Models
@using TestBucket.Domain.Requirements
@inject RequirementEditorController editor
@inject RequirementBrowser browser
@inject ProjectController controller
@inject AppNavigationManager appNavigationManager
@inject IAppLocalization loc
@inject CommentsController comments

@if(Requirement is not null)
{
    <Splitter Class="container-fill" Bordered="false" Dimension="70" EnableMargin="false" Color="Color.Tertiary">
        <StartContent>
            <div class="pa-2 container-fill-2-rows">

                <MudTextField Variant="Variant.Outlined"
                    Label="@loc.Shared["title"]"
                    HelperText="@loc.Shared["title"]"
                    AdornmentColor="Color.Tertiary" 
                    Value="@Requirement.Name" 
                    ValueChanged="OnNameChanged" 
                    T="string" 
                    AutoFocus="true" />

                    <div>
                        <MarkdownEditor 
                            Preview="false"
                            ShowToolbar="true"
                            MaxHeight="100%"
                            MinHeight="100%"
                            Color="Color.Primary"
                            AllowResize="true"
                            ValueUpdateMode="ValueUpdateMode.OnBlur"
                            Value="@Requirement.Description"
                            ValueChanged="OnDescriptionChanged"
                            SpellChecker="false">
                        </MarkdownEditor>

                        <CommentThread Comments="@_comments" CommentAdded="OnCommentAdded" CommentDeleted="OnCommentDeleted"/>
                    </div>

            </div>
        </StartContent>
        <EndContent>
            <MudStack Class="pa-2" Style="width: 100%">
               
                <Field Row>
                    <FieldHeader>@loc.Shared["state"]</FieldHeader>
                    <MudSpacer />
                    <RequirementStateSelect State="@State" StateChanged="OnStateChanged" />
                </Field>

                <Field Row>
                    <FieldHeader>@loc.Shared["assigned-to"]</FieldHeader>
                    <MudSpacer />
                    <UserPicker SelectedUserName="@Requirement.AssignedTo" SelectedUserNameChanged="OnAssignedToChanged" />
                </Field>

                <Field>
                    <MudDatePicker Variant="Variant.Filled" PickerVariant="PickerVariant.Dialog" Label="@loc.Shared["start-date"]" Date="_startDate" DateChanged="OnStartDateChanged"/>
                    <MudDatePicker Variant="Variant.Filled" PickerVariant="PickerVariant.Dialog" Label="@loc.Shared["end-date"]" Date="_endDate" DateChanged="OnEndDateChanged" />
                </Field>

                <FieldsEditor Requirement="@Requirement" />

                <Field>
                    <FieldHeader>@loc.Shared["attachments"]</FieldHeader>
                    <AttachmentGrid RequirementId="@Requirement.Id" Style="width: 100%" AllowUpload />
                </Field>


                <Field Row>
                    <FieldHeader>@loc.Requirements["parent"]</FieldHeader>
                    <MudSpacer />
                    <MudStack Row AlignItems="AlignItems.Center">                                
                        @if(_parent is not null)
                        {
                            <div>
                                <MudLink Href="@appNavigationManager.GetUrl(_parent)">@_parent.Name</MudLink>
                            </div>
                            <MudTooltip Text="@loc.Shared["clear"]">
                                <MudIconButton OnClick="RemoveParentLinkAsync" Icon="@Icons.Material.Filled.Clear"/>
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="@loc.Shared["browse"]">
                                <MudIconButton OnClick="SelectParentLinkAsync" Icon="@Icons.Material.Filled.FolderOpen"/>
                            </MudTooltip>
                        }
                    </MudStack>
                </Field>

                <Field Row>
                    <FieldHeader>@loc.Requirements["type"]</FieldHeader>
                    <MudSpacer/>
                    <RequirementTypeSelect Type="@Type" TypeChanged="OnTypeChanged" />
                </Field>

            </MudStack>
        </EndContent>
    </Splitter>
}

@code {
    [Parameter] public Requirement? Requirement { get; set; }
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestProject? Project {get;set;}
    private Requirement? _parent;
    private RequirementTestLink[] _links = [];
    private List<Comment> _comments = [];
    private Requirement? _requirement;

    private DateTime? _startDate;
    private DateTime? _endDate;

    private async Task OnStartDateChanged(DateTime? date)
    {
        _startDate = date;
        if(_requirement is not null && _requirement.StartDate != date)
        {
            if (date is null)
            {
                _requirement.StartDate = date;
            }
            else
            {
                _requirement.StartDate = date.Value.ToUniversalTime();
            }
            await SaveChangesAsync();
        }
    }

    private async Task OnEndDateChanged(DateTime? date)
    {
        _endDate = date;
        if (_requirement is not null && _requirement.DueDate != date)
        {
            if(date is null)
            {
                _requirement.DueDate = date;
            }
            else
            {
                _requirement.DueDate = date.Value.ToUniversalTime();
            }
            await SaveChangesAsync();
        }
    }


    private RequirementState? State
    {
        get
        {
            if (Requirement?.State is not null)
            {
                return new RequirementState() { MappedState = Requirement.MappedState ?? MappedRequirementState.Draft, Name = RequirementStates.Draft };
            }
            return null;
        }
    }

    private RequirementType? Type
    {
        get
        {
            if (Requirement?.RequirementType is not null)
            {
                return new RequirementType() { MappedType = Requirement.MappedType ?? MappedRequirementType.General, Name = RequirementTypes.General };
            }
            return null;
        }
    }

    protected override void OnInitialized()
    {
        _parent = null;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Requirement is not null && _requirement?.Id != Requirement.Id)
        {
            _startDate = null;
            _endDate = null;
            _parent = null;
            _requirement = Requirement;
            _comments = _requirement.Comments?.ToList() ?? []; 
            if(_requirement.StartDate is not null)
            {
                _startDate = _requirement.StartDate.Value.DateTime.ToUniversalTime();
            }
            if(_requirement.DueDate is not null)
            {
                _endDate = _requirement.DueDate.Value.DateTime.ToUniversalTime();
            }
            if (Requirement.ParentRequirementId is not null)
            {
                _parent = await browser.GetRequirementByIdAsync(Requirement.ParentRequirementId.Value);
            }
            _links = await browser.GetLinksForRequirementAsync(Requirement);
        }
    }

    private async Task OnAssignedToChanged(string? user)
    {
        if (Requirement is not null)
        {
            Requirement.AssignedTo = user;
            await SaveChangesAsync();
        }
    }
    private async Task OnTypeChanged(RequirementType? type)
    {
        if (Requirement is not null)
        {
            Requirement.RequirementType = type?.Name;
            Requirement.MappedType = type?.MappedType;

            await SaveChangesAsync();
        }
    }
    private async Task OnStateChanged(RequirementState? state)
    {
        if (Requirement is not null)
        {
            Requirement.State = state?.Name;
            Requirement.MappedState = state?.MappedState;

            await SaveChangesAsync();
        }
    }
    private async Task OnTypeChanged(string type)
    {
        if (Requirement?.TestProjectId is not null)
        {
            Requirement.RequirementType = type;
            await SaveChangesAsync();
        }
    }

    private async Task SaveChangesAsync()
    {
        if (Requirement is not null)
        {
            await editor.SaveRequirementAsync(Requirement);
        }
    }

    private async Task SelectParentLinkAsync()
    {
        if (Requirement is not null)
        {
            await editor.SelectParentRequirementAsync(Requirement, Project, Team);
            if(Requirement.ParentRequirementId is not null)
            {
                _parent = await browser.GetRequirementByIdAsync(Requirement.ParentRequirementId.Value);
            }
        }
    }
    private async Task RemoveParentLinkAsync()
    {
        if (Requirement is not null)
        {
            _parent = null;
            Requirement.ParentRequirementId = null;
            await SaveChangesAsync();
        }
    }

    private async Task OnNameChanged(string name)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Name = name;
        await SaveChangesAsync();
    }

    private async Task OnDescriptionChanged(string description)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Description = description;
        await SaveChangesAsync();
    }

    private async Task OnCommentAdded(Comment comment)
    {
        if (_requirement is not null)
        {
            comment.TeamId = _requirement.TeamId;
            comment.TestProjectId = _requirement.TestProjectId;
            comment.RequirementId = _requirement.Id;
            _comments.Add(comment);
            await comments.AddCommentAsync(comment);
        }
    }
    private async Task OnCommentDeleted(Comment comment)
    {
        if (Requirement is not null)
        {
            _comments.Remove(comment);
            await comments.DeleteCommentAsync(comment);
        }
    }
}
