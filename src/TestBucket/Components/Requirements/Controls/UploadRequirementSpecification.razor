@using TestBucket.Contracts.Localization
@using TestBucket.Domain.Progress
@using TestBucket.Domain.Requirements
@using TestBucket.Domain.Requirements.Import
@inject RequirementEditorController editor
@inject IProgressManager progressManager
@inject IAppLocalization loc

@if(Project is not null)
{
    <UploadFile MaxFileSize="@MaxFileSize" TestProjectId="@Project.Id" Accept=".pdf,.md,.txt,.tbz" FileUploadStarted="OnFileUploadStarted" FileUploaded="OnFileUploaded">

        @if(_loading)
        {
            <MudProgressLinear Indeterminate Color="Color.Tertiary"/>
        }
        else
        {
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mud-width-full mud-height-full" Row>
                @if (!_loading)
                {
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.CloudUpload" />
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h6">@loc.Shared["upload-file-hint"]</MudText>
                        <MudText Typo="Typo.subtitle1">@loc.Requirements["upload-collection-description"]</MudText>
                        <MudText Typo="Typo.subtitle2">@string.Format(loc.Shared["upload-max-filesize-fmt"], MaxFileSize.Bytes())</MudText>
                    </MudStack>
                }
            </MudStack>
        }
    </UploadFile>
}
@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    [Parameter] public long MaxFileSize { get; set; } = 10_000_000;

    private bool _loading = false;

    public void OnFileUploadStarted()
    {
        _loading = true;
    }

    public async Task OnFileUploaded(FileResource fileResource)
    {
        if(Project?.TenantId is null)
        {
            return;
        }

        await using var progressTask = progressManager.CreateProgressTask("Importing " + fileResource.Name + "..");

        await editor.ImportAsync(Project, fileResource);
        _loading = false;
    }
}
