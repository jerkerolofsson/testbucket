@attribute [Authorize()]
@page "/{TenantId}/Settings/Accounts"
@using TestBucket.Domain
@layout SettingsLayout
@inject AppNavigationManager appNav
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<AccountStrings> accountLoc
@inject TestAccountController controller

<MudStack Class="container-settings-page">

    <MudBreadcrumbs Items="@_nav"></MudBreadcrumbs>

    <MudDataGrid ServerData="LoadGridData"
                 Dense Hover RowClass="tb-datarow cursor-pointer"
                 @ref="_dataGrid"
                 RowClick="(row) => OnRowClicked(row.Item)"
                 T="TestAccount"
                 SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudIcon Icon="@TbIcons.BoldDuoTone.UserCircle" Size="Size.Large" Color="Color.Info" />
                <MudText Typo="Typo.h2">@loc["test-accounts"]</MudText>
                <MudSpacer />
                <PermissionView Entity="PermissionEntityType.TestAccount" Level="PermissionLevel.Write">
                    <Authorized>
                        <MudButton 
                            data-testid="add-account"
                            Class="tb-button-new"
                            StartIcon="@Icons.Material.Filled.Add" OnClick="AddAsync">@loc["add"]</MudButton>
                    </Authorized>
                </PermissionView>
            </MudStack>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 10%;" />
            <col style="width: 120px;" />
            <col />
            <col />
            <col />
            <col />
            <col style="width: 10%;" />
        </ColGroup>
        <Columns>
            <TemplateColumn Title="@loc["enabled"]">
                <CellTemplate>
                    @if (context.Item.Enabled)
                    {
                        <MudText Color="Color.Success">●</MudText>
                    }
                    else
                    {
                        <MudText Color="Color.Error">●</MudText>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="@loc["locked"]">
                <CellTemplate>

                    <PermissionView Entity="PermissionEntityType.TestAccount" Level="PermissionLevel.Write">
                        <Authorized>
                            <LockedToggle Locked="context.Item.Locked" LockedChanged="async (isLocked) => await OnLockChanged(context.Item, isLocked)" />
                        </Authorized>
                    </PermissionView>

                    @* @if (context.Item.Locked)
                    {
                        <PermissionView Entity="PermissionEntityType.TestAccount" Level="PermissionLevel.Write">
                            <Authorized>
                                <MudIconButton Icon="@Icons.Material.Filled.Lock" Color="Color.Warning" OnClick="async () => await UnlockAsync(context.Item)"/>

                            </Authorized>
                            <NotAuthorized>
                                <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Warning"/>
                            </NotAuthorized>
                        </PermissionView>
                    }
                    else
                    {
                        <PermissionView Entity="PermissionEntityType.TestAccount" Level="PermissionLevel.Write">
                            <Authorized>
                                <MudIconButton Icon="@Icons.Material.Filled.Lock" OnClick="async () => await LockAsync(context.Item)"/>
                            </Authorized>
                            <NotAuthorized>
                                <MudIcon Icon="@Icons.Material.Filled.Lock"/>
                            </NotAuthorized>
                        </PermissionView>
                    } *@
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Name" Title="@loc["name"]" />
            <PropertyColumn Property="x => x.Type" Title="@accountLoc["account-type"]" />
            <PropertyColumn Property="x => x.SubType" Title="@accountLoc["account-sub-type"]" />
            <TemplateColumn Title="@loc["modified"]">
                <CellTemplate>@context.Item.Modified.Humanize()</CellTemplate>
            </TemplateColumn>
             <TemplateColumn>
                <CellTemplate>
                    <PermissionView Entity="PermissionEntityType.TestAccount" Level="PermissionLevel.Delete">
                        <Authorized>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" OnClick="async () => await DeleteAsync(context.Item)" />
                        </Authorized>
                    </PermissionView>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>

    <MudText Class="" Typo="Typo.subtitle1">@loc["test-accounts-description"]</MudText>

</MudStack>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    private List<BreadcrumbItem> _nav = [];
    private MudDataGrid<TestAccount>? _dataGrid;

    private async Task<GridData<TestAccount>> LoadGridData(GridState<TestAccount> state)
    {
        var result = await controller.GetAccountsAsync(state.Page * state.PageSize, state.PageSize);

        GridData<TestAccount> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }

    protected override void OnInitialized()
    {
        SetupBreadcrumbs();
    }

    private async Task AddAsync()
    {
        await controller.AddAsync();
        _dataGrid?.ReloadServerData();
    }

    private async Task DeleteAsync(TestAccount account)
    {
        await controller.DeleteAsync(account);
        _dataGrid?.ReloadServerData();
    }

    private async Task OnLockChanged(TestAccount account, bool isLocked)
    {
        if(isLocked)
        {
            await LockAsync(account);
        }
        else
        {
            await UnlockAsync(account);
        }
    }

    private async Task UnlockAsync(TestAccount account)
    {
        await controller.UnlockAsync(account);
        //_dataGrid?.ReloadServerData();
    }
    
    private async Task LockAsync(TestAccount account)
    {
        await controller.LockAsync(account);
        //_dataGrid?.ReloadServerData();
    }

    private void OnRowClicked(TestAccount account)
    {
        appNav.NavigateTo(account);
    }

    private void SetupBreadcrumbs()
    {
        _nav.Clear();
        _nav.Add(new BreadcrumbItem(loc["settings"], appNav.GetSettingsUrl()));
        _nav.Add(new BreadcrumbItem(loc["test-accounts"], appNav.GetTestAccountsSettingsUrl()));
    }
}
