@page "/{tenantId}/Settings/Teams"
@using TestBucket.Components.Teams.Dialogs
@using TestBucket.Domain.Teams.Models
@layout SettingsLayout
@inject TeamController teamService
@inject IDialogService dialogService
@inject IStringLocalizer<SharedStrings> loc

<MudStack Class="container-settings-page">

    <MudDataGrid ServerData="LoadGridData"
                 Dense="true"
                 Hover="true"
                 T="Team"
                 @ref="_dataGrid"
                 SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudIcon Icon="@Icons.Material.Filled.Devices" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h2">@loc["teams"]</MudText>
                <MudSpacer />

                <PermissionView Entity="PermissionEntityType.Team" Level="PermissionLevel.Write">
                    <Authorized>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTeamAsync"></MudIconButton>
                    </Authorized>
                </PermissionView>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.ShortName" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Slug" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="Team" />
        </PagerContent>
    </MudDataGrid>
</MudStack>

@code {
    [Parameter] public string? TenantId { get; set; }


    private MudDataGrid<Team>? _dataGrid;

    private async Task AddTeamAsync()
    {
        var dialog = await dialogService.ShowAsync<AddTeamDialog>();
        var result = await dialog.Result;
        _dataGrid?.ReloadServerData();
    }

    private async Task<GridData<Team>> LoadGridData(GridState<Team> state)
    {
        var result = await teamService.SearchAsync(new Contracts.SearchQuery
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize
            });

        GridData<Team> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
