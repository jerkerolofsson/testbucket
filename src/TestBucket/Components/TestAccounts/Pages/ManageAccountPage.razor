@attribute [Authorize()]
@page "/{TenantId}/Settings/Accounts/{Id:long}"
@using TestBucket.Domain
@layout SettingsLayout
@inject AppNavigationManager appNav
@inject IStringLocalizer<SharedStrings> loc
@inject TestAccountController controller

<MudStack Class="container-settings-page">

    <MudBreadcrumbs Items="@_nav"></MudBreadcrumbs>

    @if(_account is not null)
    {
        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
            <MudIcon Icon="@TbIcons.BoldDuoTone.UserCircle" Size="Size.Large" Color="Color.Info"/>
            <MudText Typo="Typo.h2">@_account.Name</MudText>
        </MudStack>

        <Field Row>
            <FieldHeader>@loc["enabled"]</FieldHeader>
            <MudSpacer />
            <PermissionView Entity="PermissionEntityType.TestAccount" Level="PermissionLevel.Write">
                <Authorized>
                    <MudSwitchM3 T="bool" Color="Color.Tertiary" ValueChanged="OnEnabledChangedAsync" Value="@_account.Enabled"/>
                </Authorized>
                <NotAuthorized>
                    <MudSwitchM3 Color="Color.Tertiary" Disabled Value="@_account.Enabled" />
                </NotAuthorized>
            </PermissionView>
        </Field>
        <MudTable Items="@_account.Variables" Dense RowClass="tb-datarow">
            <HeaderContent>
                <MudTh>@loc["name"]</MudTh>
                <MudTh>@loc["value"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@loc["name"]">@context.Key</MudTd>
                <MudTd DataLabel="@loc["value"]">@context.Value</MudTd>
            </RowTemplate>
        </MudTable>
    }

</MudStack>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [Parameter] public long? Id { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    private TestAccount? _account;

    private List<BreadcrumbItem> _nav = [];
    protected override void OnInitialized()
    {
        SetupBreadcrumbs();
    }

    private async Task OnEnabledChangedAsync(bool value)
    {
        if(_account is null)
        {
            return;
        }
        _account.Enabled = value;
        await controller.UpdateAsync(_account);
    }

    protected override async Task OnParametersSetAsync()
    {
        if(_account?.Id != Id && Id is not null)
        {
            _account = await controller.GetAccountByIdAsync(Id.Value);
            SetupBreadcrumbs();
        }
    }


    private void SetupBreadcrumbs()
    {
        _nav.Clear();
        _nav.Add(new BreadcrumbItem(loc["settings"], appNav.GetSettingsUrl()));
        _nav.Add(new BreadcrumbItem(loc["test-accounts"], appNav.GetTestAccountsSettingsUrl()));
        if(_account is not null)
        {
            _nav.Add(new BreadcrumbItem(_account.Name, appNav.GetUrl(_account)));
        }
    }
}
