@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject ITestCaseManager testCaseManager
@inject ITestRunManager testRunManager
@inject TestSuiteService testSuiteService
@inject TestCaseEditorController testCaseEditor
@inject TestRunCreationController testRunCreation
@inject AppNavigationManager appNavigationManager

@if (Folder is not null)
{
    <MudMenuItem Icon="@Icons.Material.Filled.PlayArrow" OnClick="RunAsync">Run</MudMenuItem>
    <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="() => CreateNewTestCaseAsync(Folder)">Create New Test</MudMenuItem>
    <MudMenuItem Icon="@Icons.Material.Filled.Add" OnClick="() => GenerateAiTestsAsync(Folder)">Generate New Tests with AI</MudMenuItem>
    <MudDivider />
    <MudMenuItem Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="AddTestSuiteFolderAsync">Create Folder</MudMenuItem>
    <MudMenuItem Icon="@Icons.Material.Filled.Palette" OnClick="EditTestSuiteFolderAsync" Label="Customize folder" />
    <MudDivider />
    <MudMenuItem Icon="@Icons.Material.Filled.FolderDelete" IconColor="Color.Error" OnClick="DeleteTestSuiteFolderAsync" Label="Delete folder" />
}
@code {
    [Parameter] public TestSuiteFolder? Folder { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }

    private async Task CreateNewTestCaseAsync(TestSuiteFolder folder)
    {
        await testCaseEditor.CreateNewTestCaseAsync(Project, folder, folder.TestSuiteId);
    }

    private async Task GenerateAiTestsAsync(TestSuiteFolder folder)
    {
        await testCaseEditor.GenerateAiTestsAsync(folder, folder.TestSuiteId);
    }

    private async Task AddTestSuiteFolderAsync()
    {
        if (Folder is null)
        {
            return;
        }
        var parentFolderId = Folder.Id;
        var projectId = Project?.Id ?? Folder?.TestProjectId;
        var testSuiteId = Folder?.TestSuiteId;

        if (projectId is null || testSuiteId is null)
        {
            return;
        }
        await testBrowser.AddTestSuiteFolderAsync(projectId.Value, testSuiteId.Value, parentFolderId);
    }


    private async Task DeleteTestSuiteFolderAsync()
    {
        if (Folder is null)
        {
            return;
        }
        await testSuiteService.DeleteFolderByIdAsync(Folder.Id);
    }

    private async Task EditTestSuiteFolderAsync()
    {
        if (Folder is null)
        {
            return;
        }
        await testBrowser.CustomizeFolderAsync(Folder);
    }

    private async Task RunAsync()
    {
        if (Folder?.TestProjectId is null)
        {
            return;
        }
        long[] testCaseIds = await testBrowser.GetTestSuiteSuiteFolderTestsAsync(Folder, true);
        var run = await testRunCreation.CreateTestRunAsync(Folder.Name, Folder.TestProjectId.Value, testCaseIds);
        if (run is not null)
        {
            appNavigationManager.NavigateTo(run);
        }
    }
}
