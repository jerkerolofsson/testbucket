@page "/{tenantId}/projects"
@layout AppLayout
@attribute [Authorize(Roles = "ADMIN")]
@inject ProjectService projectService
@inject IDialogService dialogService

<MudButton>Projects</MudButton>

<MudDataGrid ServerData="LoadGridData"
             Dense="true"
             Hover="true"
             T="TestProject"
             @ref="_dataGrid"
             SortMode="SortMode.None">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddProjectAsync"></MudIconButton>

        </MudStack>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.ShortName" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Slug" />
    </Columns>

    <PagerContent>
        <MudDataGridPager T="TestProject" />
    </PagerContent>
</MudDataGrid>


@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    private MudDataGrid<TestProject>? _dataGrid;

    private async Task AddProjectAsync()
    {
        var parameters = new DialogParameters<AddProjectDialog>
        {
            { x=>x.Team, Team }
        };
        var dialog = await dialogService.ShowAsync<AddProjectDialog>(null, parameters);
        var result = await dialog.Result;
        _dataGrid?.ReloadServerData();
    }

    private async Task<GridData<TestProject>> LoadGridData(GridState<TestProject> state)
    {
        var result = await projectService.SearchAsync(new Contracts.SearchQuery
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize
            });

        GridData<TestProject> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
