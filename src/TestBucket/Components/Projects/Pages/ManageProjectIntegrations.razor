@page "/{tenantId}/Settings/Projects/{projectSlug}/Integrations"
@using TestBucket.Contracts.Integrations
@using TestBucket.Domain.ExtensionManagement
@layout SettingsLayout
@attribute [Authorize(Roles = "ADMIN")]
@inject ProjectController projectController
@inject IDialogService dialogService
@inject IExtensionManager extensionManager

<TenantRedirect/>

<MudStack Class="container-settings-page">

    @foreach(var extension in _extensions)
    {
        _configurations.TryGetValue(extension.SystemName, out var externalSystem);
        <ExternalIntegrationEditor 
            Extension="@extension"
            Name="@extension.FriendlyName" 
            Integration="@externalSystem" 
            IntegrationChanged="OnConfigurationChanged" 
            Icon="@extension.Icon" />
    }
</MudStack>


@code {
    [Parameter] public string? TenantId { get; set; }
    [Parameter] public string? ProjectSlug { get; set; }

    private string? _projectSlug;

    private IReadOnlyList<IExtension> _extensions = [];
    private Dictionary<string, ExternalSystem> _configurations = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task OnConfigurationChanged(ExternalSystem integration)
    {
        if (ProjectSlug is not null)
        {
            await projectController.SaveProjectIntegrationsAsync(ProjectSlug, integration);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectSlug is not null && _projectSlug != ProjectSlug)
        {
            _projectSlug = ProjectSlug;

            IReadOnlyList<ExternalSystem> integrations = await projectController.GetProjectIntegrationsAsync(ProjectSlug);
            foreach(var config in integrations)
            {
                _configurations[config.Name] = config;
            }

            _extensions = extensionManager.GetExtensions().OrderBy(x=>x.FriendlyName).ToList();
        }
    }
}
