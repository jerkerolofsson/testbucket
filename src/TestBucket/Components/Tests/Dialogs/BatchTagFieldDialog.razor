@using TestBucket.Components.Requirements.Controls
@using TestBucket.Contracts.Fields
@inject FieldController controller
@inject TeamController teamController
@inject ProjectController projectController
@inject IStringLocalizer<SharedStrings> loc

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <TitleContent>@loc["batch-tag"]</TitleContent>
    <DialogContent>

        @if(_loading)
        {
            <div style="display: grid; grid-template-columns: 200px 1fr; min-width: 700px; gap: 5px">
                <div>
                    <MudSkeleton SkeletonType="SkeletonType.Text" Height="400"/>
                </div>
                <div>
                </div>
            </div>
        }
        else
        {
            <div style="display: grid; grid-template-columns: 200px 1fr; min-width: 700px; gap: 5px">
                <div>

                    <MudNavMenu>

                        <MudNavLink OnClick="ShowRequirement">@loc["link-requirement-to-test"]</MudNavLink>

                        @foreach(var field in _fields)
                        {
                            <MudNavLink OnClick="() => ShowView(field)">@field.FieldDefinition?.Name</MudNavLink>
                        }
                    </MudNavMenu>
                </div>

                <div style="">
                    @if(_showRequirement)
                    {
                        <RequirementTreeView Project="@_project" Team="@_team" OnRequirementClicked="SetRequirement" />
                    }
                    else @if (_field?.FieldDefinition is not null)
                    {
                        <MudStack Style="max-width: 400px">
                            <MudText Typo="Typo.h1">@_field.FieldDefinition.Name</MudText>
                            <FieldValueEditor @bind-Field="_field" />

                            @if (!string.IsNullOrEmpty(_field.FieldDefinition.Description))
                            {
                                <MudText>@_field.FieldDefinition.Description</MudText>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudText>@loc["batch-tag-description"]</MudText>
                    }

                </div>
            </div>
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="() => MudDialog.Close(_field)" Color="Color.Primary">@loc["ok"]</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    private bool _loading = true;

    [Parameter] public long? ProjectId { get; set; }
    [Parameter] public FieldTarget Target { get; set; } = FieldTarget.TestCase;

    private TestProject? _project;
    private Team? _team;

    private List<FieldValue> _fields = [];
    private FieldValue? _field;
    private bool _showRequirement = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFieldDefinitionsAsync();

        if (ProjectId is not null)
        {
            _project = await projectController.GetProjectByIdAsync(ProjectId.Value);
            if (_project?.TeamId is not null)
            {
                _team = await teamController.GetTeamByIdAsync(_project.TeamId.Value);
            }
        }

        _loading = false;
    }

    private async Task LoadFieldDefinitionsAsync()
    {
        var query = new SearchFieldQuery
            {
                Count = 0,
                Offset = 100,
                Target = Target,
                ProjectId = ProjectId,
            };
        _fields.Clear();
        var fieldDefinitions = await controller.SearchDefinitionsAsync(query);
        foreach (var fieldDefinition in fieldDefinitions)
        {
            if (fieldDefinition.IsVisible && !fieldDefinition.ReadOnly)
            {
                _fields.Add(new FieldValue { FieldDefinition = fieldDefinition, FieldDefinitionId = fieldDefinition.Id });
            }
        }
    }

    private void SetRequirement(Requirement requirement)
    {
        MudDialog.Close(requirement);
    }

    private void ShowView(FieldValue viewType)
    {
        _field = viewType;
        _showRequirement = false;
    }
    private void ShowRequirement()
    {
        _showRequirement = true;
        _field = null;
    }

    private string SelectedRowClassFunc(FieldValue element, int rowNumber)
    {
        if (_fields[rowNumber] == _field)
        {
            return "tb-navmenu-selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
