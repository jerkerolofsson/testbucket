@using TestBucket.CodeCoverage
@using TestBucket.CodeCoverage.Models
@using TestBucket.Domain

@if (Report is not null)
{
    <Splitter>
        <StartContent>
            <div class="container-fill">
                <TreeView T="CodeEntity" Items="@RootNodes" SelectedValue="_selected" SelectedValueChanged="OnSelectedValueChanged">
                    <ItemTemplate>
                        <MudStack Row Spacing="1" Style="width: 100%" AlignItems="AlignItems.Center">
                            <div>@context.Text</div>
                            <MudSpacer/>
                            <div class="@GetCoverageClassName(context.Value?.CoveragePercent.Value)">@(context.Value?.CoveragePercent.Value)%</div>
                        </MudStack>
                    </ItemTemplate>
                </TreeView>
            </div>
        </StartContent>
        <EndContent>
            @if(_selected is CodeCoverageMethod method)
            {
                @(method.Name)@(method.Signature)
            }
        </EndContent>
    </Splitter>
}

@code {
    [Parameter] public CodeCoverageReport? Report { get; set; }

    private CodeEntity? _selected;
    private List<TreeNode<CodeEntity>>? _rootNodes = null;

    private string GetCoverageClassName(double? value)
    {
        if(value is not null)
        {
            if(value <= 0)
            {
                return "coverage none";
            }
            if (value >= 100)
            {
                return "coverage c100";
            }
            if (value > 99)
            {
                return "coverage c99";
            }
            if (value > 90)
            {
                return "coverage c90";
            }
            if (value > 80)
            {
                return "coverage c80";
            }
            return "coverage";
        }
        return "";
    }

    private void OnSelectedValueChanged(CodeEntity code)
    {
        _selected = code;
    }

    private string GetIcon(CodeEntity entity)
    {
        return TbIcons.BoldDuoTone.CodeSquare;
    }

    private TreeNode<CodeEntity> CreateNode(CodeEntity entity)
    {
        return new TreeNode<CodeEntity>
            {
                Expandable = entity.GetChildren().Count > 0,
                Children = entity.GetChildren().Select(CreateNode).ToList(),
                Value = entity,
                Text = entity.GetName(),
                Icon = GetIcon(entity)
            };
    }

    private IReadOnlyCollection<TreeNode<CodeEntity>> RootNodes
    {
        get
        {
            if(Report is null)
            {
                return [];
            }
            if (_rootNodes is null)
            {
                var list = new List<TreeNode<CodeEntity>>();
                foreach (var node in Report.Packages)
                {
                    list.Add(CreateNode(node));
                }
                _rootNodes = list;
            }
            return _rootNodes;
        }
    }
}
