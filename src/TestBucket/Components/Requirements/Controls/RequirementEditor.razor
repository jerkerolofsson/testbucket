@using MudBlazor.Utilities
@using TestBucket.Components.Comments
@using TestBucket.Components.Comments.Controls
@using TestBucket.Components.Requirements.Commands
@using TestBucket.Components.Shared.Splitter
@using TestBucket.Contracts.Requirements.States
@using TestBucket.Contracts.Requirements.Types
@using TestBucket.Domain.Comments.Models
@using TestBucket.Domain.Requirements
@inject RequirementEditorController editor
@inject RequirementBrowser browser
@inject ProjectController controller
@inject AppNavigationManager appNavigationManager
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<RequirementStrings> reqLoc
@inject IStringLocalizer<StateStrings> stateLoc
@inject CommentsController comments

@if(Requirement is not null)
{
    <div class="container-fill-2-rows">
        <MudToolBar Class="tb-toolbar">
            <TestBucket.Components.Shared.Tab.TbTabHeader Labels="@TabLabels" SelectedLabel="@_selectedTab" SelectedLabelChanged="OnSelectedTabChanged"/>
            @if (_selectedTab == "edit" && _editor is not null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
                <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()"  Class="rounded-0"/>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

                <MudDivider DividerType="DividerType.Middle" Vertical />

                <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />

                <MudDivider DividerType="DividerType.Middle" Vertical />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.CompareArrows" Href="@appNavigationManager.GetUrl(Requirement)" />
            }
            else
            {
                <MudSpacer/>

                <MudTooltip Text="@reqLoc["linked-test-count--tooltip"]">
                    @(_links.Length) tests
                </MudTooltip>
            }
        </MudToolBar>

        <Splitter Class="container-fill" Bordered="false" Dimension="70" EnableMargin="false" Color="Color.Tertiary">
            <StartContent>
                <MudStack Class="pa-2" Style="width: 100%; height: 100%">

                    @if (_selectedTab != "edit")
                    {
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h1">@Requirement.Name</MudText>
                            <MudText Typo="Typo.h1" Color="Color.Primary">@Requirement.ExternalId</MudText>
                        </MudStack>

                    }

                    @if (_selectedTab == "edit" || _selectedTab == "view")
                    {
                        <MarkdownEditor 
                        @ref="_editor"
                        @bind-Preview="_preview"
                        ShowToolbar="false"
                        MaxHeight="100%"
                        MinHeight="100%"
                        Color="Color.Primary"
                        AllowResize="true"
                        Value="@Requirement.Description"
                        ValueChanged="OnDescriptionChanged"
                        SpellChecker="false">
                        </MarkdownEditor>

                        <CommentThread Comments="@_comments" CommentAdded="OnCommentAdded" CommentDeleted="OnCommentDeleted"/>
                    }

                </MudStack>
            </StartContent>
            <EndContent>
                <MudStack Class="pa-2" Style="width: 100%">
                    @if (_selectedTab == "edit")
                    {
                        <Field>
                            <MudTextField Variant="Variant.Outlined"
                            Label="@loc["title"]"
                            HelperText="@loc["title"]"
                            AdornmentColor="Color.Tertiary" 
                            Value="@Requirement.Name" 
                            ValueChanged="OnNameChanged" 
                            T="string" 
                            AutoFocus="true" />
                        </Field>

                        <Field Row>
                            <FieldHeader>@loc["state"]</FieldHeader>
                            <MudSpacer />
                            <RequirementStateSelect State="@State" StateChanged="OnStateChanged" />
                        </Field>

                        <Field Row>
                            <FieldHeader>@loc["assigned-to"]</FieldHeader>
                            <MudSpacer />
                            <UserPicker SelectedUserName="@Requirement.AssignedTo" SelectedUserNameChanged="OnAssignedToChanged" />
                        </Field>
                        <FieldsEditor Requirement="@Requirement" />

                        <Field>
                            <FieldHeader>@loc["attachments"]</FieldHeader>
                            <AttachmentGrid RequirementId="@Requirement.Id" Style="width: 100%" AllowUpload />
                        </Field>


                        <Field Row>
                            <FieldHeader>@reqLoc["parent"]</FieldHeader>
                            <MudSpacer />
                            <MudStack Row AlignItems="AlignItems.Center">                                
                                @if(_parent is not null)
                                {
                                    <div>
                                        <MudLink Href="@appNavigationManager.GetUrl(_parent)">@_parent.Name</MudLink>
                                    </div>
                                    <MudIconButton OnClick="RemoveParentLinkAsync" Icon="@Icons.Material.Filled.Clear"/>
                                }
                                else
                                {
                                    <MudIconButton OnClick="SelectParentLinkAsync" Icon="@Icons.Material.Filled.FolderOpen"/>
                                }
                            </MudStack>
                        </Field>

                        <Field Row>
                            <FieldHeader>@reqLoc["type"]</FieldHeader>
                            <MudSpacer/>
                            <RequirementTypeSelect Type="@Type" TypeChanged="OnTypeChanged" />
                        </Field>
                    }
                    else if(_selectedTab == "view")
                    {
                        <Field>
                            <FieldHeader>@loc["created"]</FieldHeader>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <TestBucket.Components.Shared.Profile.UserProfileImage UserName="@Requirement.CreatedBy" />
                                <div>@Requirement.Created.Humanize()</div>
                            </MudStack>
                        </Field>

                        <Field Row>
                            <FieldHeader>@stateLoc["state"]</FieldHeader>
                            <MudSpacer/>
                            <div>@Requirement.State</div>
                        </Field>

                        <Field Row>
                            <FieldHeader>@reqLoc["type"]</FieldHeader>
                            <MudSpacer/>
                            @if(Requirement.RequirementType is not null)
                            {
                                var label = "type-" + Requirement.RequirementType.ToLower();
                                <div>@reqLoc[label]</div>
                            }
                        </Field>

                        @if (_parent is not null)
                        {
                            <Field Row>
                                <FieldHeader>@reqLoc["parent"]</FieldHeader>
                                <MudSpacer />
                                <MudLink Href="@appNavigationManager.GetUrl(_parent)">@_parent.Name</MudLink>
                            </Field>
                        }

                        <FieldsEditor Requirement="@Requirement" ReadOnly AutoSaveChanges="false"/>

                        <MudTooltip Text="@loc["slug"]">
                            <CopyToClipboard Text="@Requirement.Slug" IconSize="Size.Small">
                                <MudText Typo="Typo.subtitle1">@Requirement.Slug</MudText>
                            </CopyToClipboard>
                        </MudTooltip>

                        @if (!string.IsNullOrEmpty(Requirement.ExternalId))
                        {
                            <MudTooltip Text="@loc["external-id"]">
                                <CopyToClipboard Text="@Requirement.ExternalId" IconSize="Size.Small">
                                    <MudText Typo="Typo.subtitle1">@Requirement.ExternalId</MudText>
                                </CopyToClipboard>
                            </MudTooltip>
                        }
                    }

                </MudStack>

            </EndContent>
        </Splitter>

    </div>
}

@code {
    [Parameter] public Requirement? Requirement { get; set; }
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestProject? Project {get;set;}
    private Requirement? _parent;
    private RequirementTestLink[] _links = [];
    private List<Comment> _comments = [];
    private Requirement? _requirement;

    private string[] TabLabels => ["view", "edit"];
    private string _selectedTab = "view";

    private async Task OnSelectedTabChanged(string label)
    {
        if(_selectedTab == label)
        {
            return;
        }

        if(label == "edit" && _editor is not null) 
        {
            // Clicked on edit
            await _editor.SetPreviewAsync(wantedState:false);
        }
        if (_selectedTab == "edit")
        {
            // Was edit
            await SaveChangesAsync();
        }
        _preview = label == "preview";
        _selectedTab = label;
    }

    private MarkdownEditor? _editor;
    private bool _preview = true;

    private RequirementState? State
    {
        get
        {
            if (Requirement?.State is not null)
            {
                return new RequirementState() { MappedState = Requirement.MappedState ?? MappedRequirementState.Draft, Name = RequirementStates.Draft };
            }
            return null;
        }
    }

    private RequirementType? Type
    {
        get
        {
            if (Requirement?.RequirementType is not null)
            {
                return new RequirementType() { MappedType = Requirement.MappedType ?? MappedRequirementType.General, Name = RequirementTypes.General };
            }
            return null;
        }
    }

    protected override void OnInitialized()
    {
        _parent = null;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Requirement is not null && _requirement?.Id != Requirement.Id)
        {
            _parent = null;
            _requirement = Requirement;
            _comments = _requirement.Comments?.ToList() ?? []; 
            if (Requirement.ParentRequirementId is not null)
            {
                _parent = await browser.GetRequirementByIdAsync(Requirement.ParentRequirementId.Value);
            }
            _links = await browser.GetLinksForRequirementAsync(Requirement);
        }
    }

    private async Task OnAssignedToChanged(string? user)
    {
        if (Requirement is not null)
        {
            Requirement.AssignedTo = user;
            await SaveChangesAsync();
        }
    }
    private async Task OnTypeChanged(RequirementType? type)
    {
        if (Requirement is not null)
        {
            Requirement.RequirementType = type?.Name;
            Requirement.MappedType = type?.MappedType;

            await SaveChangesAsync();
        }
    }
    private async Task OnStateChanged(RequirementState? state)
    {
        if (Requirement is not null)
        {
            Requirement.State = state?.Name;
            Requirement.MappedState = state?.MappedState;

            await SaveChangesAsync();
        }
    }
    private async Task OnTypeChanged(string type)
    {
        if (Requirement?.TestProjectId is not null)
        {
            Requirement.RequirementType = type;
            //var types = await controller.GetRequirementTypesAsync(Requirement.TestProjectId.Value);
            //Requirement.MappedType = types.Where(x => x.Name == type).Select(x => x.MappedState).FirstOrDefault();

            await SaveChangesAsync();
        }
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        if (Requirement is not null)
        {
            await editor.SaveRequirementAsync(Requirement);
        }
    }

    private async Task SelectParentLinkAsync()
    {
        if (Requirement is not null)
        {
            await editor.SelectParentRequirementAsync(Requirement, Project, Team);
            if(Requirement.ParentRequirementId is not null)
            {
                _parent = await browser.GetRequirementByIdAsync(Requirement.ParentRequirementId.Value);
            }
        }
    }
    private async Task RemoveParentLinkAsync()
    {
        if (Requirement is not null)
        {
            _parent = null;
            Requirement.ParentRequirementId = null;
            await editor.SaveRequirementAsync(Requirement);
        }
    }

    private void OnNameChanged(string name)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Name = name;
    }

    private void OnDescriptionChanged(string description)
    {
        if (Requirement is null)
        {
            return;
        }
        Requirement.Description = description;
    }

    private async Task OnCommentAdded(Comment comment)
    {
        if (_requirement is not null)
        {
            comment.TeamId = _requirement.TeamId;
            comment.TestProjectId = _requirement.TestProjectId;
            comment.RequirementId = _requirement.Id;
            _comments.Add(comment);
            await comments.AddCommentAsync(comment);
        }
    }
    private async Task OnCommentDeleted(Comment comment)
    {
        if (Requirement is not null)
        {
            _comments.Remove(comment);
            await comments.DeleteCommentAsync(comment);
        }
    }
}
