@using TestBucket.Components.Tests.Dialogs
@using TestBucket.Components.Tests.Services
@using TestBucket.Data.Testing
@using TestBucket.Data.Testing.Models
@inject TestBrowser testBrowser
@inject IDialogService dialogService

<MudDataGrid ServerData="LoadGridData"
Style="width: 100%"
Dense="true"
Hover="true"
T="TestCase"
RowClick="(e) => OnRowClicked(e.Item)"
@ref="_dataGrid"
SortMode="SortMode.None">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTestCaseAsync"></MudIconButton>

        </MudStack>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <PropertyColumn Property="x => x.Name" Title="Name" />
    </Columns>

    <PagerContent>
        <MudDataGridPager T="TestCase" />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter] public TestSuiteFolder? Folder { get; set; }
    [Parameter] public long? TestSuiteId { get; set; }

    private MudDataGrid<TestCase?> _dataGrid = default!;

    protected override void OnParametersSet()
    {
        if(_dataGrid is not null)
        {
            _dataGrid.ReloadServerData();
        }
    }

    private void OnRowClicked(TestCase testCase)
    {
        //navigationManager.NavigateTo($"/{TenantId}/tenants/manage/{tenant.Id}");
    }

    private async Task AddTestCaseAsync()
    {
        if (Folder is not null)
        {
            var parameters = new DialogParameters<AddTestCaseDialog>
            {
                { x => x.Folder, Folder }
            };
            var dialog = await dialogService.ShowAsync<AddTestCaseDialog>("Add test case", parameters);
            var result = await dialog.Result;
            if (result?.Data is TestCase)
            {
            }
        }
    }

    private async Task<GridData<TestCase>> LoadGridData(GridState<TestCase> state)
    {

        var result = await testBrowser.SearchTestCasesAsync(TestSuiteId, Folder?.Id, state.Page*state.PageSize, state.PageSize);

        GridData<TestCase> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
