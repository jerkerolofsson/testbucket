@using TestBucket.Components.Reporting.Controllers
@using TestBucket.Domain
@using TestBucket.Domain.Code.Yaml
@using TestBucket.Domain.Code.Yaml.Models
@using TestBucket.Domain.Insights.Model
@using TestBucket.Domain.Issues.Insights
@using TestBucket.Domain.Testing.TestCases.Insights
@using TestBucket.Domain.Testing.TestRuns.Insights
@inject IStringLocalizer<SharedStrings> loc 
@inject InsightsController insightsController

<div class="tb-architecture-view">

    @if(_browser is not null)
    {
        @if(_loading)
        {
            <MudProgressLinear Indeterminate Color="Color.Secondary"/>
        }

        <MudStack Row AlignItems="AlignItems.Center">
            <MudChipSet T="string" SelectedValues="_entitiesToShow" SelectionMode="SelectionMode.MultiSelection" SelectedValuesChanged="OnValuesChanged" CheckMark Variant="Variant.Text" Color="Color.Info">
                <MudChip Value="@("issues")" Text="@loc["issues"]"/>
                <MudChip Value="@("number-of-test-cases")"  Text="@loc["number-of-test-cases"]"/>
            </MudChipSet>
        </MudStack>

        foreach(var system in _browser.GetSystems())
        {
            <div class="system" style="@GetStyle(system)">
                <div class="title">@system.Name</div>
                <div class="children">
                    @foreach(var tier in  _browser.GetLayerDisplayTiersWithin(system))
                    {
                        <div class="tier" data-tier="@tier">
                            @foreach(var layer in _browser.GetLayersWithin(system, tier))
                            {
                                <div class="layer" style="@GetStyle(layer)">
                                    <div class="title">@layer.Name</div>
                                    <div class="children">
                                        @foreach(var component in _browser.GetComponentsWithin(layer))
                                        {
                                            string cssClass = "component";
                                            if (_browser.IsSelectedComponent(SelectedItems, component))
                                            {
                                                cssClass += " feature-component";
                                            }

                                            <MudTooltip Text="@component.Description">
                                                <ChildContent>
                                                    <div class="@cssClass" style="@GetStyle(component)">
                                                        <div class="title">@component.Name</div>
                                                        @foreach(var insightsData in _data.Keys)
                                                        {
                                                            @if(_data[insightsData].Series.Count > 0)
                                                            {
                                                                if(_data[insightsData].Series[0].TryGetValue(component.Name, out double value))
                                                                {
                                                                    <MudChip T="string">

                                                                        @if(insightsData == "issues")
                                                                        {
                                                                            <MudIcon Icon="@TbIcons.BoldDuoTone.Bug" Size=Size.Small/>
                                                                        }

                                                                        @(Math.Round(value).ToString())
                                                                    </MudChip>
                                                                }
                                                            }
                                                        }
                                                    </div>
                                                </ChildContent>
                                            </MudTooltip>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code 
{
    [CascadingParameter] public TestProject? Project { get; set; }
    [Parameter] public ProjectArchitectureModel? Model { get; set; }
    [Parameter] public IReadOnlyList<NamedArchitecturalComponent>? SelectedItems { get; set; }

    private List<string> _entitiesToShow = [];

    private Dictionary<string, InsightsData<string, double>> _data = [];

    private async Task OnValuesChanged(IReadOnlyCollection<string>? entitiesToShow)
    {
        _loading = true;
        this.StateHasChanged();

        _entitiesToShow.Clear();
        if(entitiesToShow is not null)
        {
            _entitiesToShow.AddRange(entitiesToShow);
        }

        foreach(var key in _data.Keys.ToArray())
        {
            if(!_entitiesToShow.Contains(key))
            {
                // It has been removed
                _data.Remove(key);
            }
        }

        foreach(var entityToShow in _entitiesToShow)
        {
            if(!_data.ContainsKey(entityToShow))
            {
                // We need to load it
                switch(entityToShow)
                {
                    case "issues":
                        _data[entityToShow] = await insightsController.GetDataAsync(Project?.Id, new InsightsDataQuery { DataSource = IssueDataSourceNames.IssuesByComponent });
                        break;
                    case "number-of-test-cases":
                        _data[entityToShow] = await insightsController.GetDataAsync(Project?.Id, new InsightsDataQuery { DataSource = TestCaseDataSourceNames.CountByComponent });
                        break;
                }
            }
        }

        _loading = false;
    }

    private ArchitecturalComponentBrowser? _browser;
    private bool _loading = false;

    private string GetStyle(NamedArchitecturalComponent component)
    {
        var sb = new StringBuilder();
        if(component.Display is not null)
        {
            if(component.Display.BackColor is not null)
            {
                sb.Append($"background-color: {component.Display.BackColor};");
            }
            if(component.Display.ForeColor is not null)
            {
                sb.Append($"color: {component.Display.ForeColor};");
            }
        }
        return sb.ToString();
    }


    protected override void OnInitialized()
    {
        if (Model is not null)
        {
            _browser = new ArchitecturalComponentBrowser(Model);
        }
    }
    protected override void OnParametersSet()
    {
        if (Model is not null)
        {
            _browser = new ArchitecturalComponentBrowser(Model);
        }
    }
}
