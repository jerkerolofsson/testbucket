@using FluentValidation
@using TestBucket.Components.Tests.Services
@inject RequirementEditorController controller
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<RequirementStrings> reqLoc
@inject IValidator<RequirementSpecificationFolder> validator
@inject IStringLocalizer<ValidationStrings> validationLoc

<EditForm Model="@_name" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">

        <TitleContent>@loc["new-folder"]</TitleContent>

        <DialogContent>
            <MudStack Spacing="0">
                <MudTextField 
                    AutoFocus="true"
                    Variant="Variant.Outlined"
                    T="string" ValueChanged="OnValueChanged" Value="@_name"></MudTextField>

                @if (_validationResult is not null)
                {
                    <FluentValidationResultSummary Result="@_validationResult" StringLocalizer="@validationLoc" />
                }
            </MudStack>
        </DialogContent>

        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@loc["ok"]</MudButton>
            <MudButton OnClick="Close">@loc["cancel"]</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private string _name = "";

    private FluentValidation.Results.ValidationResult? _validationResult;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public long ProjectId { get; set; }
    [Parameter] public long SpecificationId { get; set; }
    [Parameter] public long? ParentFolderId { get; set; }

    private void OnValueChanged(string name)
    {
        _name = name;
        Validate();
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private bool Validate()
    {
        var folder = new RequirementSpecificationFolder() { Name = _name };
        _validationResult = validator.Validate(folder);

        return _validationResult.IsValid;
    }

    private async Task OnValidSubmitAsync()
    {
        if(!Validate())
        {
            return;
        }

        var folder = await controller.AddRequirementSpecificationFolderAsync(ProjectId, SpecificationId, ParentFolderId, _name);
        MudDialog.Close(folder);
    }
}
