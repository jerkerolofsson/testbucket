@using TestBucket.Domain.Requirements.Models
@attribute [Authorize()]
@inject TestCaseEditorController testCaseEditorService
@inject TestSuiteService testSuiteController
@inject IStringLocalizer<SharedStrings> loc

<EditForm Model="@_testCase" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <MudDialog DefaultFocus="DefaultFocus.FirstChild">
        <DialogContent>
            <MudStack Spacing="1" Style="min-width: 30vw" Row AlignItems="AlignItems.Center">
                <MudLink OnClick="ChangeFolderAsync">@(FolderPath)/</MudLink>
                <MudTextField AutoFocus T="string" Value="@_name" ValueChanged="OnNameChanged"></MudTextField>
            </MudStack>

            @if (_errorMessage is not null)
            {
                <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
            }

        </DialogContent>

        <DialogActions>
            @if (_testSuite is not null &&
            !string.IsNullOrEmpty(_testCase.Name) && 
            _testCase.TestProjectId is not null)
            {
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">OK</MudButton>
            }
            <MudButton OnClick="Close">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private string? _errorMessage;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public string? Name { get; set; }
    [Parameter] public TestProject? Project { get; set; }
    [Parameter] public Team? Team { get; set; }
    [Parameter] public TestSuiteFolder? Folder { get; set; }
    [Parameter] public long? TestSuiteId { get; set; }
    [Parameter] public bool IsTemplate { get; set; } = false;
    [Parameter] public ScriptType ScriptType { get; set; } = ScriptType.ScriptedDefault;

    private TestCase _testCase = new() { Name = "", TenantId = "" };
    private TestSuite? _testSuite;
    private TestSuiteFolder? _folder;
    private string _name = "";

    /// <summary>
    /// Returns the name shown in the UI
    /// </summary>
    private string FolderPath
    {
        get
        {
            var path = new StringBuilder();

            if(_testSuite is not null)
            {
                path.Append(_testSuite.Name);
                path.Append("/");
            }
            if (!string.IsNullOrEmpty(_folder?.Path))
            {
                path.Append(_folder.Path);
                path.Append("/");
            }
            if (!string.IsNullOrEmpty(_folder?.Name))
            {
                path.Append(_folder.Name);
                path.Append("/");
            }
            if (!string.IsNullOrEmpty(_testCase?.Path))
            {
                path.Append(_testCase?.Path);
            }
            return path.ToString().TrimEnd('/');
        }
    }

    private void OnNameChanged(string name)
    {
        _name = name;
        var components = _name.Split('/');
        if(components.Length == 1)
        {
            _testCase.Name = name;
            _testCase.Path = "";
        }
        else
        {
            _testCase.Name = components.Last();
            _testCase.Path = string.Join('/', components.Take(components.Length-1));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        this.OnNameChanged(Name ?? "New Test");

        if(TestSuiteId is not null)
        {
            var testSuite = await testSuiteController.GetTestSuiteByIdAsync(TestSuiteId.Value);
            ChangeTestSuite(testSuite);
        }

        await OnFolderChangedAsync(Folder);
    }

    private void ChangeTestSuite(TestSuite? suite)
    {
        _testSuite = suite;
        if(_testSuite is not null)
        {
            _testCase.TestSuiteId = _testSuite.Id;
            _testCase.TeamId = _testSuite.TeamId ?? Team?.Id;
            _testCase.TestProjectId = _testSuite.TestProjectId ?? Project?.Id;

            if (_folder?.TestSuiteId != _testSuite.Id)
            {
                _folder = null;
                _testCase.TestSuiteFolderId = null;
            }
        }
    }
    private async Task OnFolderChangedAsync(TestSuiteFolder? folder)
    {
        _folder = folder;
        if (folder is not null)
        {
            _testCase.TestSuiteFolderId = folder.Id;
            _testCase.TeamId = folder.TeamId ?? Team?.Id;
            _testCase.TestProjectId = folder.TestProjectId ?? Project?.Id;

            if (folder.TestSuiteId != _testCase.TestSuiteId)
            {
                var testSuite = await testSuiteController.GetTestSuiteByIdAsync(folder.TestSuiteId);
                ChangeTestSuite(testSuite);
            }
        }
    }


    public async Task ChangeFolderAsync()
    {
        if (Project is not null)
        {
            var folder = await testSuiteController.PickFolderAsync(Project);
            if (folder is not null)
            {
                await OnFolderChangedAsync(folder);
            }
        }
    }

    private void Close()
    {
        MudDialog.Close();
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(_testCase.Name))
        {
            _errorMessage = "Invalid name";
            return;
        }

        _testCase.ScriptType = ScriptType;
        _testCase.IsTemplate = IsTemplate;
        await testCaseEditorService.AddTestCaseAsync(_testCase);
        MudDialog.Close(_testCase);
    }
}

