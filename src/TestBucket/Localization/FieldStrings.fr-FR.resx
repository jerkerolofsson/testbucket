<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add-custom-field" xml:space="preserve">
    <value>Ajouter un champ personnalisé</value>
  </data>
  <data name="add-new-field" xml:space="preserve">
    <value>Ajouter un nouveau champ</value>
  </data>
  <data name="advanced" xml:space="preserve">
    <value>Avancée</value>
  </data>
  <data name="appearance" xml:space="preserve">
    <value>Apparence</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>Bogue</value>
    <comment>Label type</comment>
  </data>
  <data name="data-source" xml:space="preserve">
    <value>Source de données</value>
  </data>
  <data name="data-source-type-commits" xml:space="preserve">
    <value>Engagements</value>
  </data>
  <data name="data-source-type-components" xml:space="preserve">
    <value>Composantes</value>
  </data>
  <data name="data-source-type-external" xml:space="preserve">
    <value>Recherchez les données du service externe</value>
  </data>
  <data name="data-source-type-features" xml:space="preserve">
    <value>Caractéristiques</value>
  </data>
  <data name="data-source-type-issues" xml:space="preserve">
    <value>Problèmes</value>
  </data>
  <data name="data-source-type-labels" xml:space="preserve">
    <value>Étiquettes</value>
  </data>
  <data name="data-source-type-layers" xml:space="preserve">
    <value>Couches</value>
  </data>
  <data name="data-source-type-list" xml:space="preserve">
    <value>Liste définie par l'utilisateur</value>
  </data>
  <data name="data-source-type-milestones" xml:space="preserve">
    <value>Jalons</value>
  </data>
  <data name="data-source-type-releases" xml:space="preserve">
    <value>Sorties</value>
  </data>
  <data name="data-source-type-requirements" xml:space="preserve">
    <value>Exigences</value>
  </data>
  <data name="data-source-type-systems" xml:space="preserve">
    <value>Systèmes</value>
  </data>
  <data name="data-source-type-testcases" xml:space="preserve">
    <value>Cas de test</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="description-helpertext" xml:space="preserve">
    <value>Une description utile qui peut être montrée à l'utilisateur</value>
  </data>
  <data name="documentation" xml:space="preserve">
    <value>Documentation</value>
    <comment>Label type</comment>
  </data>
  <data name="duplicate" xml:space="preserve">
    <value>Double</value>
    <comment>Label type</comment>
  </data>
  <data name="enhancement" xml:space="preserve">
    <value>Renforcement</value>
    <comment>Label type</comment>
  </data>
  <data name="field-data-source-not-available" xml:space="preserve">
    <value>La source de données n'est pas disponible pour ce type d'entrée</value>
  </data>
  <data name="field-icon" xml:space="preserve">
    <value>Icône de terrain</value>
  </data>
  <data name="field-options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="field-readonly" xml:space="preserve">
    <value>En lecture seule</value>
  </data>
  <data name="field-required-permission" xml:space="preserve">
    <value>Autorisation requise pour modifier</value>
  </data>
  <data name="field-target" xml:space="preserve">
    <value>Cible</value>
  </data>
  <data name="field-target-helpertext" xml:space="preserve">
    <value>Définit les types d'entités qui peuvent être ce champ</value>
  </data>
  <data name="field-type" xml:space="preserve">
    <value>Taper</value>
  </data>
  <data name="good first issue" xml:space="preserve">
    <value>Bon premier problème</value>
    <comment>Label type</comment>
  </data>
  <data name="grouping" xml:space="preserve">
    <value>Regroupement</value>
  </data>
  <data name="help wanted" xml:space="preserve">
    <value>Aide recherchée</value>
    <comment>Label type</comment>
  </data>
  <data name="icons" xml:space="preserve">
    <value>Icônes</value>
  </data>
  <data name="inherit" xml:space="preserve">
    <value>Hériter</value>
  </data>
  <data name="inherited" xml:space="preserve">
    <value>Hérité</value>
  </data>
  <data name="inherit-helpertext" xml:space="preserve">
    <value>S'ils sont activés, les entités hériteront de la valeur d'une entité parent. Par exemple, un cas de test pourrait hériter de la valeur d'un dossier qui hérite de la valeur d'une suite de test, ou un cas de test exécuté héritera de la valeur du cas de test.</value>
  </data>
  <data name="input-type" xml:space="preserve">
    <value>Type d'entrée</value>
  </data>
  <data name="input-type-helpertext" xml:space="preserve">
    <value>Le type de contrôle d'interface utilisateur d'entrée qui sera affiché à l'utilisateur pour saisir une valeur pour le champ</value>
  </data>
  <data name="invalid" xml:space="preserve">
    <value>Invalide</value>
    <comment>Label type</comment>
  </data>
  <data name="name" xml:space="preserve">
    <value>Nom</value>
  </data>
  <data name="name-helpertext" xml:space="preserve">
    <value>Nom unique pour le champ personnalisé</value>
  </data>
  <data name="options" xml:space="preserve">
    <value>Options d'entrée</value>
  </data>
  <data name="options-helpertext" xml:space="preserve">
    <value>Options parmi lesquelles l'utilisateur peut choisir pour ce champ</value>
  </data>
  <data name="preview" xml:space="preserve">
    <value>Prévisualisation</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>Question</value>
    <comment>Label type</comment>
  </data>
  <data name="show-description" xml:space="preserve">
    <value>Description de la démonstration</value>
  </data>
  <data name="trait" xml:space="preserve">
    <value>Cartographie des traits de terrain</value>
  </data>
  <data name="trait-helpertext" xml:space="preserve">
    <value>Trait bien défini auquel ce champ est à la recherche. Le trait est utilisé pour cartographier les champs d'importation / d'exportation entre différents formats et peut être utilisé pour les rapports et l'analyse</value>
  </data>
  <data name="trait-match-known-type" xml:space="preserve">
    <value>Ce trait correspond à un type bien connu</value>
  </data>
  <data name="use-classifier" xml:space="preserve">
    <value>Classification de l'IA</value>
  </data>
  <data name="use-classifier-helpertext" xml:space="preserve">
    <value>Utilise l'IA pour mettre à jour ce champ, s'il est vide après les modifications.</value>
  </data>
  <data name="use-predefined-field" xml:space="preserve">
    <value>Utilisez un champ prédéfini</value>
  </data>
  <data name="visible" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="wontfix" xml:space="preserve">
    <value>Ne réparera pas</value>
    <comment>Label type</comment>
  </data>
</root>