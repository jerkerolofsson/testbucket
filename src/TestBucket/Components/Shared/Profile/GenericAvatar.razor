
@if(ImageUri is null)
{
    <div class="@(ClassDiv) force-visible" style="@Style" @onclick="OnUserClickedAsync">@_text</div>
} 
else
{
    <img class="@ClassImg" style="@Style" src="@ImageUri" onerror="@OnErrorJs" @onclick="OnUserClickedAsync" />
    <div class="@ClassDiv" style="@Style" @onclick="OnUserClickedAsync">@_text</div>
}


@code {
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string? Style { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? ImageUri { get; set; }
    [Parameter] public EventCallback<string> ImageClicked { get; set; }

    private string OnErrorJs => $"tbProfileImageFailedToLoad('{_id}')";
    private string _id = "tb-profile-" + Guid.NewGuid().ToString();
    private string ClassImg => $"{Class} tb-avatar-generic tb-profile-image {_id}";
    private string ClassDiv => $"{Class} tb-avatar-generic tb-profile-image tb-background-{BackgroundHash} {_id}";

    private string _text = "";

    protected override void OnParametersSet()
    {
        if(Text is not null)
        {
            _text = Text;
            if(_text.Length > 2)
            {
                _text = _text[0..2];
            }
        }
    }

    private int BackgroundHash
    {
        get
        {
            if (Text is not null)
            {
                var hash = Math.Abs(Text.GetHashCode()) % 10;
                return hash;
            }
            return 0;    
        }
    }

    private async Task OnUserClickedAsync()
    {
        await ImageClicked.InvokeAsync(Text);
    }
}
