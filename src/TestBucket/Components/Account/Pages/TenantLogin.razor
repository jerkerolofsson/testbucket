@page "/{TenantId}/Account/Login"
@using TestBucket.Components.Account.Shared
@using TestBucket.Contracts.Localization
@layout EmptyLayout
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject TenantController tenantController
@inject IAppLocalization loc

<PageTitle>@loc.Shared["login"]</PageTitle>

@{
    string resendEmailUrl = $"/{TenantId}/Account/ResendEmailConfirmation";
    string forgotPasswordUrl = $"/{TenantId}/Account/ForgotPassword";

}

<MudPaper Class="tb-login-container account-page" Style="min-width: 400px">
    <main>
        <MudText Typo="Typo.h1" Color="Color.Tertiary">@loc.Account["login-prompt"]</MudText>
        <MudText>@loc.Account["login-prompt-description"]</MudText>

        @if(errorMessage is not null)
        {
            <StatusMessage Message="@errorMessage" data-testid="login-error"/>
        }
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <MudStack Spacing="0" Class="mt-5">
                <label for="Input.Email">@loc.Shared["email"]</label>
                <InputText data-testid="email" @bind-Value="Input.Email" id="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </MudStack>
            <MudStack Spacing="0" Class="mt-3">
                <label for="Input.Password">@loc.Shared["password"]</label>
                <InputText data-testid="password" type="password" @bind-Value="Input.Password" id="Input.Password" autocomplete="current-password" aria-required="true" placeholder="@loc.Account["password"]" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </MudStack>

            <MudStack Spacing="1" Row Class="mt-3">
                <InputCheckbox id="Input.RememberMe" data-testid="remember-me" @bind-Value="Input.RememberMe"></InputCheckbox>
                <label for="Input.RememberMe">@loc.Account["remember-me"]</label>
            </MudStack>

            <MudStack Row Class="mt-3">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" data-testid="login" id="Button.Login">@loc.Account["login"]</MudButton>
            </MudStack>
        </EditForm>


        <div>
            <p>
                <a href="@forgotPasswordUrl">@loc.Account["forgot-your-password"]</a>
            </p>
            <p>
                <a href="@(NavigationManager.GetUriWithQueryParameters($"/{TenantId}/Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">@loc.Account["register-new-user"]</a>
            </p>
            <p>
                <a href="@resendEmailUrl">@loc.Account["resend-email-confirmation"]</a>
            </p>
        </div>
    </main>
</MudPaper>

@code {
    private string? errorMessage;

    [Parameter] public string TenantId { get; set; } = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery(Name = "u")]
    private string? UserName { get; set; }

    [SupplyParameterFromQuery(Name = "p")]
    private string? Password { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            await HttpContext.SignOutAsync();
            await SignInManager.SignOutAsync();
        }

        var tenantExists = await tenantController.ExistsAsync(TenantId);
        if(!tenantExists)
        {
            var defaultTenant = await tenantController.GetDefaultTenantAsync();
            NavigationManager.NavigateTo($"/{defaultTenant}/Account/Login", true);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo($"/{TenantId}");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                $"/{TenantId}/Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo($"/{TenantId}/Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
