@inherits LayoutComponentBase
@layout AppLayout
@using Humanizer
@using TestBucket.Contracts.Issues.States
@using TestBucket.Contracts.Issues.Types
@using TestBucket.Domain.Issues.Search
@inject NavigationManager navigationManager
@inject AppNavigationManager appNavigationManager
@inject IssueController controller
@inject IStringLocalizer<SharedStrings> loc
@inject IStringLocalizer<IssueStrings> issueLoc
<TenantRedirect />

<Splitter Style="height: 100%" Bordered="false" Dimension="15" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>

        <MudStack Class="pa-2 tb-navmenu side" Style="width: 100%;">
            <MudNavLink Href="@Open">
                <MudBadge Content="@OpenCount" Color="Color.Primary" Overlap>
                    <MudText>@issueLoc["open"]</MudText>
                </MudBadge>
            </MudNavLink>
            <MudNavLink Href="@OpenIncidents">
                <MudBadge Content="@OpenIncidentsCount" Color="Color.Primary" Overlap>
                    @issueLoc["open-incidents"]
                </MudBadge>
            </MudNavLink>
            <MudNavLink Href="@Closed">
                <MudBadge Content="@ClosedCount" Color="Color.Primary" Overlap>
                    <MudText>@issueLoc["closed"]</MudText>
                </MudBadge>
            </MudNavLink>
            <MudNavLink Href="@OpenHighPrio">
                @issueLoc["high-prio"]
            </MudNavLink>
        </MudStack>

    </StartContent>

    <EndContent>
        @Body
    </EndContent>
</Splitter>

@code {
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private string OpenHighPrio => appNavigationManager.GetIssuesUrl() + "?q=is:open%20priority:High";
    private string Open => appNavigationManager.GetIssuesUrl() + "?q=state:open";
    private string OpenIncidents => appNavigationManager.GetIssuesUrl() + "?q=is:incident%20state:open";
    private string Closed => appNavigationManager.GetIssuesUrl() + "?q=state:closed";
    private Dictionary<MappedIssueState, int> _countPerState = [];
    private Dictionary<MappedIssueState, int> _incidentsPerState = [];

    private string OpenIncidentsCount => GetIncidentBadgePerState(MappedIssueState.Open);
    private string OpenCount => GetBadgePerState(MappedIssueState.Open);
    private string ClosedCount => GetBadgePerState(MappedIssueState.Closed);

    private string GetBadgePerState(MappedIssueState state)
    {
        if(_countPerState.TryGetValue(state, out var count))
        {
            return count.ToString();
        }
        return "0";
    }

    private string GetIncidentBadgePerState(MappedIssueState state)
    {
        if (_incidentsPerState.TryGetValue(state, out var count))
        {
            return count.ToString();
        }
        return "0";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _countPerState = await controller.GetIssueCountPerStateAsync(new SearchIssueQuery());
            _incidentsPerState = await controller.GetIssueCountPerStateAsync(new SearchIssueQuery() { Type = IssueTypes.Incident });
            var _ = InvokeAsync(StateHasChanged);
        }
    }

}