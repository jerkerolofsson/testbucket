@attribute [Authorize()]
@page "/{TenantId}/Requirements/Requirements/{RequirementId:long}/Timeline"
@using MudGantt
@using TestBucket.Components.Milestones.Controllers
@using TestBucket.Components.Requirements.Layouts
@using TestBucket.Domain.Issues.Models
@using TestBucket.Domain.Traceability.Models
@layout RequirementLayout
@inject AppNavigationManager appNavigationManager
@inject RequirementEditorController controller
@inject MilestonesController milestonesController

<MudStack Class="pa-2" Style="height: 100%">
    @if(Project is not null && _requirement is not null)
    {
        <MudGanttChart Tasks="@_tasks" Events="@_events" TaskDatesChanged="OnDatesChanged" TaskProgressChanged="OnProgressChanged" />
    }
</MudStack>
@code {
    [CascadingParameter] public Team? Team { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Requirement? Requirement { get; set; }
    [Parameter] public long RequirementId { get; set; }
    [Parameter] public string? TenantId { get; set; }

    private Requirement? _requirement = null;
    private List<Requirement> _downstreamRequirements = [];
    private List<MudGanttTask> _tasks = [];
    private List<MudGanttEvent> _events = [];

    private async Task OnProgressChanged(MudGanttTask task)
    {
        if(long.TryParse(task.Id, out var id))
        {
            var requirement = _downstreamRequirements.FirstOrDefault(x => x.Id == id);
            if(requirement is not null)
            {
                requirement.Progress = task.Progress;
                await controller.SaveRequirementAsync(requirement);
            }
        }
    }
    private async Task OnDatesChanged(MudGanttTask task)
    {
        if (long.TryParse(task.Id, out var id))
        {
            var requirement = _downstreamRequirements.FirstOrDefault(x => x.Id == id);
            if (requirement is not null)
            {
                requirement.StartDate = task.StartDate?.ToUniversalTime();
                requirement.DueDate = task.EndDate?.ToUniversalTime();
                await controller.SaveRequirementAsync(requirement);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Check if the bound requirement has changed
        if(Requirement is not null && _requirement?.Id != Requirement.Id)
        {
            _requirement = Requirement;
            _downstreamRequirements.Clear();

            var milestones = await milestonesController.GetMilestonesAsync(Project);
            _events = milestones.Where(x=>x.EndDate != null && !string.IsNullOrWhiteSpace(x.Title)).Select(x => new MudGanttEvent
                {
                    Name = x.Title??"",
                    Date = x.EndDate!.Value,
                    Id = x.Id.ToString(),
                }).ToList();

            var node = await controller.DiscoverTraceabilityAsync(_requirement, 5);
            AddDownstreamRequirements(node);

            _tasks.Clear();
            _tasks.AddRange(_downstreamRequirements.Select(x =>
                new MudGanttTask
                {
                    Id = x.Id.ToString(),
                    Name = x.Name,
                    StartDate = x.StartDate ?? DateTime.UtcNow,
                    EndDate = x.DueDate ?? DateTimeOffset.UtcNow.AddDays(1),
                    Progress = x.Progress ?? 0,
                    Links = GetDependencies(x)
                }
            ));
        }
    }

    private Link[] GetDependencies(Requirement requirement)
    {
        if(requirement.ParentRequirementId is not null)
        {
            return [new Link(requirement.ParentRequirementId.Value.ToString(), LinkType.StartToStart)];
        }
        return [];
    }

    private void AddDownstreamRequirements(TraceabilityNode node)
    {
        foreach(var child in node.Downstream)
        {
            if(child.Requirement is not null)
            {
                _downstreamRequirements.Add(child.Requirement);
                AddDownstreamRequirements(child);
            }
        }
    }
}
