@using System.Reflection
<MudStack Spacing="0" Class="icon-grid-picker">
    <MudGrid Class="my-4">
        <MudItem xs="12" sm="8" md="10">
            <MudTextField Immediate="true" DebounceInterval="1000" @bind-Value="SearchText" Variant="Variant.Outlined" Placeholder="Search icons..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
        </MudItem>
        <MudItem xs="12" sm="4" md="2">
            <MudSelect T="IconOrigin" Value="SelectedIconOrigin" ValueChanged="OnSelectedValue" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="IconOrigin.Custom">Custom Icons</MudSelectItem>
                <MudSelectItem Value="IconOrigin.Material">Material Icons</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" Class="relative">
            @if (SelectedIconOrigin == IconOrigin.Material)
            {
                <MudChipSet T="string" CheckMark>
                    <MudChip Default="true" Text="Filled" OnClick="@(() => ChangeIconCategory(IconType.Filled))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="Outlined" OnClick="@(() => ChangeIconCategory(IconType.Outlined))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="Rounded" OnClick="@(() => ChangeIconCategory(IconType.Rounded))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="Sharp" OnClick="@(() => ChangeIconCategory(IconType.Sharp))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="TwoTone" OnClick="@(() => ChangeIconCategory(IconType.TwoTone))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                </MudChipSet>
            }
            else if (SelectedIconOrigin == IconOrigin.Custom)
            {
                <MudChipSet T="string" CheckMark>
                    <MudChip Default="true" Text="All" OnClick="@(() => ChangeIconCategory(IconType.All))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="Brands" OnClick="@(() => ChangeIconCategory(IconType.Brands))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="FileFormats" OnClick="@(() => ChangeIconCategory(IconType.FileFormats))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                    <MudChip Text="Uncategorized" OnClick="@(() => ChangeIconCategory(IconType.Uncategorized))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                </MudChipSet>
            }
        </MudItem>
    </MudGrid>

    <div class="icon-grid">
        @foreach (var icon in SelectedIcons)
        {
            <MudStack Class="icon-grid-item" Spacing="1" AlignItems="AlignItems.Center" Style="overflow: hidden" @onclick="async () => await OnIconClickedAsync(icon)">
                <MudIcon Icon="@icon.Value" Title="@icon.Name" Size="Size.Large" />
                <MudText Typo="Typo.caption">
                    @icon.Name
                </MudText>
            </MudStack>
        }
    </div>
</MudStack>

@code {
    [Parameter] public string? Icon { get; set; }
    [Parameter] public EventCallback<string?> IconChanged { get; set; }

    private async Task OnIconClickedAsync(MudIcons? icon)
    {
        await IconChanged.InvokeAsync(icon?.Value);
    }
}
