<MudToolBar Class="tb-toolbar">

    @if (!_preview && _editor is not null)
    {
        <MudTooltip Text="Save Changes">
            <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="SaveChangesAsync" Class="rounded-0" />
        </MudTooltip>

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.FormatBold" OnClick="async () => await _editor.ToggleBoldAsync()" Class="rounded-0" />
        <MudIconButton Icon="@Icons.Material.Filled.FormatItalic" OnClick="async () => await _editor.ToggleItalicAsync()" Class="rounded-0" />

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered" OnClick="async () => await _editor.ToggleOrderedListAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.FormatListBulleted" OnClick="async () => await _editor.ToggleUnorderedListAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Code" OnClick="async () => await _editor.ToggleCodeBlockAsync()" Class="rounded-0"></MudIconButton>

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.Grid3x3" OnClick="async () => await _editor.DrawTableAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.AddLink" OnClick="async () => await _editor.DrawLinkAsync()" Class="rounded-0"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Image" OnClick="async () => await _editor.DrawImageAsync()" Class="rounded-0"></MudIconButton>

        <MudDivider DividerType="DividerType.Middle" Vertical />

        <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" OnClick="async () => await _editor.ToggleFullScreenAsync()" />
    }
    else
    {
        @ToolbarTitle
        <MudSpacer/>
        <MudTooltip Text="Edit">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => BeginEdit()" Class="rounded-0" />
        </MudTooltip>
    }

</MudToolBar>

<MarkdownEditor ShowToolbar="false"
MaxHeight="100%"
MinHeight="100%"
EnableRunCode="false"
EnableCopyCodeToClipboard="true"
Color="Color.Primary"
AllowResize="false"
@bind-Preview="_preview"
Value="@_text"
@ref=_editor
ValueChanged="OnTextChanged"
SpellChecker="false">
</MarkdownEditor>
@code {

    [Parameter] public string? ToolbarTitle { get; set; }

    [Parameter] public string? Text { get; set; }
    [Parameter] public EventCallback<string?> TextChanged { get; set; }

    private bool _preview = true;
    private MarkdownEditor? _editor;
    private string? _text;
    private void BeginEdit()
    {
        _preview = false;
    }

    private void OnTextChanged(string description)
    {
        if (_preview)
        {
            return;
        }
        _text = description;
    }

    protected override void OnParametersSet()
    {
        _text = Text ?? "";
    }

    private async Task SaveChangesAsync()
    {
        _preview = true;
        await TextChanged.InvokeAsync(_text);
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (Text is not null)
    //     {
    //         if (_text != Text && _preview)
    //         {
    //             _text = Text;
    //             if (_editor is not null)
    //             {
    //                 await _editor.SetValueAsync(Text!);
    //                 this.StateHasChanged();
    //             }
    //         }
    //     }
    //     else
    //     {
    //          = null;
    //     }
    // }
}
