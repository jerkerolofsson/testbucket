@using TestBucket.Contracts.Testing.Models
@using TestBucket.Domain.States
@inject IStringLocalizer<SharedStrings> loc

@if(TestCaseRun is not null)
{
    <MudStack Row Style="width: 100%" Wrap="Wrap.Wrap">
        <MudButton OnClick="() => OnResultChanged(TestResult.Passed)"  StartIcon="@Icons.Material.Filled.CheckCircle"  Style="color: var(--clr-passed)"  Color="Color.Success">@loc["result-passed"]</MudButton>
        <MudButton OnClick="() => OnResultChanged(TestResult.Failed)"  StartIcon="@Icons.Material.Filled.RemoveCircle" Style="color: var(--clr-failed)"  Color="Color.Error">@loc["result-failed"]</MudButton>
        @* <MudButton OnClick="() => OnResultChanged(TestResult.Blocked)" StartIcon="@Icons.Material.Filled.StopCircle"   Style="color: var(--clr-blocked)" Color="Color.Warning">@loc["result-blocked"]</MudButton> *@
        @* <MudButton OnClick="() => OnResultChanged(TestResult.Skipped)" StartIcon="@Icons.Material.Filled.SkipNext"     Style="color: var(--clr-skipped)" Color="Color.Warning">@loc["result-skipped"]</MudButton> *@
        <MudSpacer/>
        <MudMenu Icon="@Icons.Material.Outlined.MoreVert">
            <CommandMenuItems TypeName="TestCaseRun" />
        </MudMenu>
    </MudStack>
}

@code {
    [Parameter] public TestCaseRun? TestCaseRun {get;set;}
    [Parameter] public TestResult Result { get; set; } = TestResult.NoRun;
    [Parameter] public EventCallback<TestResult> ResultChanged { get; set; }

    private async Task OnResultChanged(TestResult result)
    {
        await ResultChanged.InvokeAsync(result);
    }
}
