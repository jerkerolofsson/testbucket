@using Humanizer
@using TestBucket.Components.Agent.Controls
@using TestBucket.Components.Layout
@using TestBucket.Components.Requirements.Controls
@using TestBucket.Contracts.Appearance.Models
@using TestBucket.Domain.Requirements.Models
@using TestBucket.Domain.Teams.Models
@layout AppLayout
@inherits LayoutComponentBase
@inject AppNavigationManager appNav
@inject AppNavigationManager appNavigationManager
@inject UserPreferencesService preferencesController
@inject IStringLocalizer<SharedStrings> loc

<TenantRedirect />

<Splitter Class="container-fill" Dock="_dock" Bordered="false" Dimension="20" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>
        <div class="tb-navmenu side tb-explorermenu">

            <MudTabs Position="Position.Bottom" ActivePanelIndex="0" MinimumTabWidth="80px">

                <Header>
                    <div class="tb-tab-padding"/>
                </Header>

                <ChildContent>
                    <MudTabPanel Text="@loc["explorer"]">
                        <RequirementTreeView 
                            @ref="_treeView"
                            Project="@Project"
                            Team="@Team"
                            OnSpecificationClicked="OnSpecificationClicked"
                            OnFolderClicked="OnFolderClicked"
                            OnRequirementClicked="OnRequirementClicked" />
                    </MudTabPanel>

                    <MudTabPanel Text="@loc["chat"]">
                        <AgentChat />
                    </MudTabPanel>
                </ChildContent>
            </MudTabs>
        </div>
    </StartContent>

    <EndContent>
        @Body
    </EndContent>
</Splitter>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] TestProject? Project { get; set; }
    [CascadingParameter] Team? Team { get; set; }

    private Team? _team;
    private TestProject? _project;
    private RequirementTreeView? _treeView;
    private Dock _dock = Dock.Left;

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await preferencesController.GetUserPreferencesAsync();
        _dock = userPreferences?.ExplorerDock ?? Dock.Left;
    }
    private void OnSpecificationClicked(RequirementSpecification specification)
    {
        appNav.NavigateTo(specification);
    }
    private void OnRequirementClicked(Requirement requirement)
    {
        // If the user has navigated to a sub page, we append that to the target url instead of navigating to the "Main View" every time
        var url = appNav.GetUrl(requirement);
        var subPage = appNav.GetSubPage();
        if(subPage is not null && subPage is "Edit" or "Trace" or "Coverage")
        {
            appNav.NavigateTo(url + "/" + subPage);
            return;
        }

        appNav.NavigateTo(requirement);
    }
    private void OnFolderClicked(RequirementSpecificationFolder folder)
    {
        appNav.NavigateTo(folder);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        appNavigationManager.UIState.RequirementTreeView = _treeView;
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        if (_project != Project || _team != Team)
        {
            _project = Project;
            _team = Team;
        }
    }
}
