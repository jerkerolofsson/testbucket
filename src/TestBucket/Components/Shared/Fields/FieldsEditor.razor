@using TestBucket.Domain.Requirements.Models
@inject FieldController fieldController

@foreach (var field in _testCaseFields.Where(x => x.FieldDefinition != null && x.FieldDefinition.IsVisible))
{
    <FieldEditor Field="@field" FieldChanged="OnTestCaseFieldChangedAsync"/>
}
@foreach (var field in _testCaseRunFields.Where(x => x.FieldDefinition != null && x.FieldDefinition.IsVisible))
{
    <FieldEditor Field="@field" FieldChanged="OnTestCaseRunFieldChangedAsync"/>
}

@code {
    [Parameter] public TestCase? TestCase { get; set; }
    [Parameter] public TestCaseRun? TestCaseRun { get; set; }

    private List<TestCaseField> _testCaseFields = [];
    private List<TestCaseRunField> _testCaseRunFields = [];

    private long? _testCaseId;
    private long? _testCaseRunId;

    protected override async Task OnParametersSetAsync()
    {
        if(TestCase is not null && _testCaseId != TestCase.Id)
        {
            _testCaseId = TestCase.Id;
            var definitions = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery { ProjectId = TestCase.TestProjectId, Target = FieldTarget.TestCase });
            _testCaseFields = (await fieldController.GetTestCaseFieldsAsync(TestCase.Id, definitions)).ToList();
        }
        if (TestCaseRun is not null && _testCaseRunId != TestCaseRun.Id)
        {
            _testCaseRunId = TestCaseRun.Id;
            var definitions = await fieldController.SearchDefinitionsAsync(new SearchFieldQuery { ProjectId = TestCaseRun.TestProjectId, Target = FieldTarget.TestCaseRun });
            _testCaseRunFields = (await fieldController.GetTestCaseRunFieldsAsync(TestCaseRun.TestRunId, TestCaseRun.Id, definitions)).ToList();
        }
    }

    private async Task OnTestCaseRunFieldChangedAsync()
    {
        if(_testCaseRunFields.Count > 0)
        {
           await fieldController.SaveTestCaseRunFieldsAsync(_testCaseRunFields);
        }
    }

    private async Task OnTestCaseFieldChangedAsync()
    {
        if (_testCaseFields.Count > 0)
        {
            await fieldController.SaveTestCaseFieldsAsync(_testCaseFields);
        }
    }
}
