@attribute [Authorize(Roles = "SUPERADMIN")]
@layout AppLayout
@page "/{tenantId}/tenants"
@inject TenantService tenantService
@inject IDialogService dialogService
@inject NavigationManager navigationManager

<MudDataGrid ServerData="LoadGridData"
    Dense="true"
    Hover="true"
    T="Tenant"
             RowClick="(e) => OnRowClicked(e.Item)"
    @ref="_dataGrid"
    SortMode="SortMode.None">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTenantAsync"></MudIconButton>

        </MudStack>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <PropertyColumn Property="x => x.Name" Title="Name"/>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="Tenant" />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter] public string? TenantId { get; set; }

    private MudDataGrid<Tenant>? _dataGrid;

    private void OnRowClicked(Tenant tenant)
    {
        navigationManager.NavigateTo($"/{TenantId}/tenants/manage/{tenant.Id}");
    }

    private async Task AddTenantAsync()
    {
        var dialog = await dialogService.ShowAsync<AddTenantDialog>();
        var result =await dialog.Result;
        _dataGrid?.ReloadServerData();
    }

    private async Task<GridData<Tenant>> LoadGridData(GridState<Tenant> state)
    {
        var result = await tenantService.SearchAsync(new Contracts.SearchQuery
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize
            });

        GridData<Tenant> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}
