@using TestBucket.Components.Shared
@inject TestBrowser testBrowser
@inject IDialogService dialogService
@inject TestSuiteService testSuiteServer
@inject TestCaseEditorService testCaseEditor
@inject FieldService fieldService
@implements IDisposable
@implements ITestCaseObserver

<MudDataGrid ServerData="LoadGridData"
Style="width: 100%"
Dense="true"
Hover="true"
T="TestCase"
RowClick="(e) => OnTestClicked(e.Item)"
@ref="_dataGrid"
SortMode="SortMode.None">

    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">

            <MudTextField Value="@_query.Text" T="string" ValueChanged="OnSearch"
            Style="min-width: 15vw"
            Clearable="true"
            Variant="Variant.Outlined"
            IconSize="Size.Small"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" />

            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.FilterList" OnClick="async () => await ShowFilterAsync()"></MudIconButton>
            @if (TestSuiteId is not null || Folder is not null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CreateNewTestCaseAsync"></MudIconButton>
            }

        </MudStack>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Slug" Title="ID" />
        <TemplateColumn Title="Name">
            <CellTemplate>
                <Draggable T="TestCase" Data="@context.Item">
                    @context.Item.Name
                </Draggable>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.Path" Title="Path" />
        <PropertyColumn Property="x => x.TestSuiteId" Title="TestSuiteId" />
        <PropertyColumn Property="x => x.TestSuiteFolderId" Title="TestSuiteFolderId" />

        <TemplateColumn Title="Test Category">
            <CellTemplate>
                @if(context.Item.TestCaseFields is not null && _definitions is not null)
                {
                    var fieldDefinition = _definitions.Where(x => x.Name == "TestCategory").FirstOrDefault();
                    if (fieldDefinition is not null)
                    {
                        foreach (var field in context.Item.TestCaseFields.Where(x => x.FieldDefinitionId == fieldDefinition.Id))
                        {
                            <MudText>@field.StringValue?.ToString()</MudText>
                        }
                    }
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="TestCase" />
    </PagerContent>
</MudDataGrid>
