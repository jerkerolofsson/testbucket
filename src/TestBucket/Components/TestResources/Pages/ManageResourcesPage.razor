@attribute [Authorize()]
@page "/{TenantId}/Settings/Resources"
@layout SettingsLayout
@inject AppNavigationManager appNav
@inject IStringLocalizer<SharedStrings> loc
@inject TestResourceController controller

<MudStack Class="container-settings-page">

    <MudBreadcrumbs Items="@_nav"></MudBreadcrumbs>

    <MudDataGrid ServerData="LoadGridData"
                 Dense Hover RowClass="tb-datarow cursor-pointer"
                 RowClick="(row) => OnRowClicked(row.Item)"
                 T="TestResource"
                 SortMode="SortMode.None">

        <ToolBarContent>
            <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                <MudIcon Icon="@Icons.Material.Filled.Devices" Size="Size.Large" Color="Color.Info" />
                <MudText Typo="Typo.h2">@loc["test-resources"]</MudText>
                <MudSpacer />
            </MudStack>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 10%;" />
            <col />
            <col style="width: 30%;" />
            <col />
            <col />
            <col />
            <col style="width: 10%;" />
        </ColGroup>

        <Columns>
            <TemplateColumn Title="@loc["enabled"]">
                <CellTemplate>
                    @if (context.Item.Enabled)
                    {
                        <MudTooltip Text="@loc["resource-enabled"]">
                            <MudText Color="Color.Success">●</MudText>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="@loc["resource-disabled"]">
                            <MudText Color="Color.Error">●</MudText>
                        </MudTooltip>
                    }
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="@loc["locked"]">
                <CellTemplate>
                    <PermissionView Entity="PermissionEntityType.TestResource" Level="PermissionLevel.Write">
                        <Authorized>
                            <LockedToggle Locked="@context.Item.Locked" LockedChanged="async (isLocked) => await SetLockedAsync(context.Item, isLocked)" />
                        </Authorized>
                        <NotAuthorized>
                            @if (context.Item.Locked)
                            {
                                <MudTooltip Text="@loc["resource-locked"]">
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Warning" />
                                </MudTooltip>
                            }
                        </NotAuthorized>
                    </PermissionView>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Name" Title="@loc["name"]" />
            <PropertyColumn Property="x => x.Manufacturer" Title="@loc["manufacturer"]" />
            <PropertyColumn Property="x => x.Model" Title="@loc["model"]" />

            <TemplateColumn Title="@loc["last-seen"]">
                <CellTemplate>
                    @if(context.Item.LastSeen is not null)
                    {
                        @context.Item.LastSeen.Humanize()
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="TestResource" />
        </PagerContent>

    </MudDataGrid>

    <MudStack Class="pa-3">
        <MudText Typo="Typo.body1">@loc["test-resources-description"]</MudText>
    </MudStack>

</MudStack>

@code {
    [Parameter] public string TenantId { get; set; } = "";
    [CascadingParameter] public TestProject? Project { get; set; }
    [CascadingParameter] public Team? Team { get; set; }

    private List<BreadcrumbItem> _nav = [];

    private async Task<GridData<TestResource>> LoadGridData(GridState<TestResource> state)
    {
        var result = await controller.GetResourcesAsync(state.Page * state.PageSize, state.PageSize);

        GridData<TestResource> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }

    protected override void OnInitialized()
    {
        SetupBreadcrumbs();
    }

    private void OnRowClicked(TestResource resource)
    {
        appNav.NavigateTo(resource);
    }

    private async Task SetLockedAsync(TestResource resource, bool isLocked)
    {
        if (isLocked)
        {
            await controller.LockAsync(resource);
        }
        else
        {
            await controller.UnlockAsync(resource);
        }
    }

    private void SetupBreadcrumbs()
    {
        _nav.Clear();
        _nav.Add(new BreadcrumbItem(loc["settings"], appNav.GetSettingsUrl()));
        _nav.Add(new BreadcrumbItem(loc["test-resources"], appNav.GetTestResourcesSettingsUrl()));
    }
}
