<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add-custom-field" xml:space="preserve">
    <value>カスタムフィールドを追加します</value>
  </data>
  <data name="add-new-field" xml:space="preserve">
    <value>新しいフィールドを追加します</value>
  </data>
  <data name="advanced" xml:space="preserve">
    <value>高度な</value>
  </data>
  <data name="appearance" xml:space="preserve">
    <value>外観</value>
  </data>
  <data name="bug" xml:space="preserve">
    <value>バグ</value>
    <comment>Label type</comment>
  </data>
  <data name="data-source" xml:space="preserve">
    <value>データソース</value>
  </data>
  <data name="data-source-type-commits" xml:space="preserve">
    <value>コミット</value>
  </data>
  <data name="data-source-type-components" xml:space="preserve">
    <value>コンポーネント</value>
  </data>
  <data name="data-source-type-external" xml:space="preserve">
    <value>外部サービスからデータを取得します</value>
  </data>
  <data name="data-source-type-features" xml:space="preserve">
    <value>特徴</value>
  </data>
  <data name="data-source-type-issues" xml:space="preserve">
    <value>問題</value>
  </data>
  <data name="data-source-type-labels" xml:space="preserve">
    <value>ラベル</value>
  </data>
  <data name="data-source-type-layers" xml:space="preserve">
    <value>レイヤー</value>
  </data>
  <data name="data-source-type-list" xml:space="preserve">
    <value>ユーザー定義リスト</value>
  </data>
  <data name="data-source-type-milestones" xml:space="preserve">
    <value>マイルストーン</value>
  </data>
  <data name="data-source-type-releases" xml:space="preserve">
    <value>リリース</value>
  </data>
  <data name="data-source-type-requirements" xml:space="preserve">
    <value>要件</value>
  </data>
  <data name="data-source-type-systems" xml:space="preserve">
    <value>システム</value>
  </data>
  <data name="data-source-type-testcases" xml:space="preserve">
    <value>テストケース</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>説明</value>
  </data>
  <data name="description-helpertext" xml:space="preserve">
    <value>ユーザーに表示される可能性のある役立つ説明</value>
  </data>
  <data name="documentation" xml:space="preserve">
    <value>ドキュメント</value>
    <comment>Label type</comment>
  </data>
  <data name="duplicate" xml:space="preserve">
    <value>重複</value>
    <comment>Label type</comment>
  </data>
  <data name="enhancement" xml:space="preserve">
    <value>強化</value>
    <comment>Label type</comment>
  </data>
  <data name="field-data-source-not-available" xml:space="preserve">
    <value>このタイプの入力ではデータソースが利用できません</value>
  </data>
  <data name="field-icon" xml:space="preserve">
    <value>フィールドアイコン</value>
  </data>
  <data name="field-options" xml:space="preserve">
    <value>オプション</value>
  </data>
  <data name="field-readonly" xml:space="preserve">
    <value>読み取り専用</value>
  </data>
  <data name="field-required-permission" xml:space="preserve">
    <value>編集に必要な許可が必要です</value>
  </data>
  <data name="field-target" xml:space="preserve">
    <value>ターゲット</value>
  </data>
  <data name="field-target-helpertext" xml:space="preserve">
    <value>このフィールドを持つことができるエンティティのタイプを定義します</value>
  </data>
  <data name="field-type" xml:space="preserve">
    <value>タイプ</value>
  </data>
  <data name="good first issue" xml:space="preserve">
    <value>良い最初の問題</value>
    <comment>Label type</comment>
  </data>
  <data name="grouping" xml:space="preserve">
    <value>グループ化</value>
  </data>
  <data name="help wanted" xml:space="preserve">
    <value>従業員求む</value>
    <comment>Label type</comment>
  </data>
  <data name="icons" xml:space="preserve">
    <value>アイコン</value>
  </data>
  <data name="inherit" xml:space="preserve">
    <value>継承</value>
  </data>
  <data name="inherited" xml:space="preserve">
    <value>継承</value>
  </data>
  <data name="inherit-helpertext" xml:space="preserve">
    <value>有効にすると、エンティティは親エンティティから値を継承します。 たとえば、テストケースは、テストスイートから値を継承するフォルダーから値を継承する可能性があります。または、実行されたテストケースがテストケースから値を継承します。</value>
  </data>
  <data name="input-type" xml:space="preserve">
    <value>入力タイプ</value>
  </data>
  <data name="input-type-helpertext" xml:space="preserve">
    <value>フィールドの値を入力するためにユーザーに表示される入力UIコントロールのタイプ</value>
  </data>
  <data name="invalid" xml:space="preserve">
    <value>無効</value>
    <comment>Label type</comment>
  </data>
  <data name="name" xml:space="preserve">
    <value>名前</value>
  </data>
  <data name="name-helpertext" xml:space="preserve">
    <value>カスタムフィールドのユニークな名前</value>
  </data>
  <data name="options" xml:space="preserve">
    <value>入力オプション</value>
  </data>
  <data name="options-helpertext" xml:space="preserve">
    <value>ユーザーがこのフィールドに選択できるオプション</value>
  </data>
  <data name="preview" xml:space="preserve">
    <value>プレビュー</value>
  </data>
  <data name="question" xml:space="preserve">
    <value>質問</value>
    <comment>Label type</comment>
  </data>
  <data name="show-description" xml:space="preserve">
    <value>説明を表示します</value>
  </data>
  <data name="trait" xml:space="preserve">
    <value>フィールド特性マッピング</value>
  </data>
  <data name="trait-helpertext" xml:space="preserve">
    <value>このフィールドがマップする明確な特性。 特性は、さまざまな形式間のインポートフィールドのマッピング/エクスポートに使用され、レポートと分析に使用できます</value>
  </data>
  <data name="trait-match-known-type" xml:space="preserve">
    <value>この特性は、よく知られているタイプと一致します</value>
  </data>
  <data name="use-classifier" xml:space="preserve">
    <value>AI分類</value>
  </data>
  <data name="use-classifier-helpertext" xml:space="preserve">
    <value>AIを使用して、変更が行われた後に空の場合、このフィールドを更新します。</value>
  </data>
  <data name="use-predefined-field" xml:space="preserve">
    <value>事前定義されたフィールドを使用します</value>
  </data>
  <data name="visible" xml:space="preserve">
    <value>見える</value>
  </data>
  <data name="wontfix" xml:space="preserve">
    <value>修正しません</value>
    <comment>Label type</comment>
  </data>
</root>