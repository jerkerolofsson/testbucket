@using TestBucket.Domain.AI.Agent
@using TestBucket.Domain.AI.Agent.Models
@inject IChatClientFactory chatClientFactory
@inject IServiceProvider serviceProvider
@inject AuthenticationStateProvider authenticationStateProvider
@inject AppNavigationManager appNavigationManager

<div class="tb-agent-chat">
    <MudStack Style="width: 100%" Spacing="1">
        <MudStack Row>
            <MudSpacer/>
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Outlined.Clear" OnClick="Clear"/>
        </MudStack>

        @if (_isWorking)
        {
            <MudProgressLinear Indeterminate Size="Size.Small" Color="Color.Primary" />
        }
    </MudStack>
    <div class="tb-agent-chat-conversation">
        @foreach(var message in _context.Messages)
        {
            @foreach(var content in message.Contents)
            {
                if(content is FunctionCallContent functionCall)
                {
                    <div class="chat function-call @message.Role">
                        <MudStack Row>
                            <MudIcon Size="Size.Small" Icon="@TbIcons.Filled.ModelContextProtocol" />
                            @functionCall.Name
                        </MudStack>
                    </div>
                }
                if (content is FunctionResultContent functionResult && functionResult.RawRepresentation is not null)
                {
                    <div class="chat function-call @message.Role">
                        <MudStack>
                            <MudIcon Size="Size.Small" Icon="@TbIcons.Filled.ModelContextProtocol" />
                            <CodeBlock Code="@functionResult.RawRepresentation.ToString()" Language="json"></CodeBlock>
                        </MudStack>
                    </div>
                }
            }

            @if(!string.IsNullOrEmpty(message.Text))
            {
                <div class="chat @message.Role">
                    <MarkdownEditor ShowToolbar="false" Preview Value="@message.Text" />
                </div>
            }
        }

        @if (_isWorking && _activeResponse.Length > 0)
        {
            <div class="chat Assistant">
                <MarkdownEditor ShowToolbar="false" Preview Value="@_activeResponse.ToString()" />
            </div>
        }
    </div>

    <MudPaper Class="tb-agent-submit">
        <ChatReferences ActiveDocument="@ActiveDocument" ChatContext="@_context"/>

        <div class="prompt">
            <MudTextField Immediate="true"
                            @ref="_mudTextField"
                            KeyDownPreventDefault=_preventDefault
                            Margin=Margin.Dense
                            OnKeyDown="HandleKeyPress"
                            Variant="Variant.Outlined" Lines="6" T="string" @bind-Text="@_userPrompt"></MudTextField>
            @if (!_isWorking)
            {
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Outlined.Send"/>
            }
        </div>
    </MudPaper>
</div>

@code {
    [Parameter] public ChatReference? ActiveDocument { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }

    bool _preventDefault;
    private string _userPrompt = "";
    private bool _isWorking = false;
    private AgentChatContext _context = new AgentChatContext();
    private CancellationTokenSource _cts = new();

    private StringBuilder _activeResponse = new();
    private MudTextField<string>? _mudTextField;

    private async Task HandleKeyPress(KeyboardEventArgs e) 
    { 
        if (e.Key == "Enter" && !e.ShiftKey && !e.AltKey && !e.CtrlKey && !e.MetaKey) 
        { 
            _preventDefault = true;
            await Send(); 
        }
        else
        {
            _preventDefault = false;
        }
    }

    private void Clear()
    {
        _context = new();

        var activeDocument = appNavigationManager.State.ActiveDocument;
        if(activeDocument is not null)
        {
            _context.References.Add(activeDocument);
        }
    }

    private async Task Send()
    {
        var message = _userPrompt;
        _userPrompt = "";
        if(_mudTextField is not null)
        {
            await _mudTextField.ResetAsync();
            await _mudTextField.Clear();
            this.StateHasChanged();
        }

        _isWorking = true;
        _activeResponse.Clear();

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var client = new AgentChatClient(chatClientFactory, serviceProvider);

        try
        {
            await foreach (var update in client.GetStreamingResponseAsync(authState.User, Project, _context, message, _cts.Token))
            {
                _activeResponse.Append(update.Text);
                this.StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            _context.Messages.Add(new ChatMessage(ChatRole.System, "Something went wrong:\n```\n" + ex.ToString() + "\n```\n"));
        }

        _isWorking = false;
    }
}
