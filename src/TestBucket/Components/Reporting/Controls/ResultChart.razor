@using Plotly.Blazor.LayoutLib
@using System.Diagnostics
@using TestBucket.Components.Reporting.Helpers
@using TestBucket.Domain.Testing.Aggregates
@inject TestBrowser testBrowser
@inject TestCaseEditorController testCaseEditorController
@inject TestExecutionController testExecutionController
@inject IStringLocalizer<SharedStrings> loc
@inject ThemingService themingService

<MudPaper Elevation="2" Class="tb-tile">
    <MudStack Spacing="0" Class="pa-1">
        <MudStack Row Style="width: 100%" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6" Class="tb-tile-title">@Title</MudText>
            <MudSpacer />

            <MudToggleGroup T="ChartType" Value="@_chartType" ValueChanged="OnChartTypeChanged" Color="Color.Surface">
                <MudToggleItem Value="ChartType.Donut"><MudIcon Icon="@Icons.Material.Rounded.DonutLarge" Size="Size.Small" /></MudToggleItem>
                <MudToggleItem Value="ChartType.Pie"><MudIcon Icon="@Icons.Material.Rounded.PieChart" Size="Size.Small" /></MudToggleItem>
                <MudToggleItem Value="ChartType.Bar"><MudIcon Icon="@Icons.Material.Rounded.BarChart" Size="Size.Small" /></MudToggleItem>
            </MudToggleGroup>

        </MudStack>
        @if (_layout is not null && Results is not null && _config is not null)
        {
            <PlotlyChart class="tb-chart result-chart" @ref="_chart" @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" />
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Class="tb-chart-skeleton" />
        }
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public TestExecutionResultSummary? Results { get; set; }
    [Parameter] public ChartType ChartType { get; set; } = ChartType.Donut;

    private ChartType _chartType = ChartType.Donut;

    private PlotlyChart? _chart;
    private Config? _config = new Config()
    {
        Responsive = true
    };
    private Layout? _layout;

    // Using of the interface IList is important for the event callback!
    private IList<ITrace> _data = new List<ITrace>();

    private async Task OnChartTypeChanged(ChartType chartType)
    {
        _chartType = chartType;
        await BuildChartData();
    }

    protected override async Task OnParametersSetAsync()
    {
        _chartType = ChartType;

        _layout = PlotlyChartBuilder.GetDefaultLayout(themingService.IsDarkMode);
        _layout.AutoSize = true;
        _layout.Colorway = PlotlyChartBuilder.ResultColors;
        _layout.ShowLegend = false;
        _layout.Margin = new Plotly.Blazor.LayoutLib.Margin
        {
            L = 0,
            T = 0,
            R = 0,
            B = 0
        };

        if (Results is not null)
        {
            await BuildChartData();
        }
    }

    private async Task BuildChartData()
    {
        Debug.Assert(_layout != null);
        if(_layout is null || Results is null)
        {
            return;
        }

        _data.Clear();
        _layout.Annotations = [];
        if (_chartType == ChartType.Bar)
        {
            _data.Add(PlotlyChartBuilder.CreateResultBar(Results, "Total"));
        }
        else if (_chartType == ChartType.Pie || _chartType == ChartType.Donut)
        {
            var pie = PlotlyChartBuilder.CreateResultPie(Results, "Total");
            if(_chartType == ChartType.Donut)
            {
                pie.Hole = 0.8M;
                if (Results.Total > 0)
                {
                    var passrate = (int)Math.Round(Results.Passed * 100.0 / Results.Total);

                    _layout.Annotations = [
                        new Annotation{
                            ShowArrow = false,
                            X = 0.5,
                            Y = 0.5,
                            Font = new Plotly.Blazor.LayoutLib.AnnotationLib.Font { Size = 32 },
                            Text = $"{passrate}%"
                        }];
                }
            }

            _data.Add(pie);
        }

        if (_chart is not null)
        {
            try
            {
                await _chart.Update(_data, _layout);
                await _chart.React();
            }
            catch { }
        }
    }
}
