@attribute [Authorize()]
@page "/{TenantId}/Code/Commits"
@using TestBucket.Components.Code.Controls
@using TestBucket.Domain
@using TestBucket.Domain.Code.Models
@layout CodeLayout
@inject CommitController commitController
@inject ArchitectureController architectureController
@inject IStringLocalizer<CodeStrings> loc

<Splitter Class="container-fill pa-2" Bordered="false" Dimension="50" EnableMargin="false" Color="Color.Tertiary">
    <StartContent>
        <div class="tb-architecture-yaml-left">
            @if (Project is not null)
            {
                <MudDataGrid ServerData="LoadGridData" SelectedItems="@_selectedItems" SelectedItemsChanged="OnSelectedItemsChanged"
                             SelectOnRowClick MultiSelection="true"
                             RowStyle="tb-datarow cursor-pointer" Hover T="Commit" SortMode="SortMode.None">

                    <ToolBarContent>
                        <MudStack Row AlignItems="AlignItems.Center" Style="width: 100%" Class="pt-5">
                            <MudIcon Icon="@TbIcons.Git.Commit" Size="Size.Large" />
                            <MudText Typo="Typo.h2">@loc["commits"]</MudText>
                            <MudSpacer />
                        </MudStack>
                    </ToolBarContent>

                    <ColGroup>
                        <col style="width: 10%" />
                        <col style="width: 60%" />
                        <col style="width: 30%;" />
                    </ColGroup>

                    <Columns>

                        <SelectColumn T="Commit" />

                        <TemplateColumn Title="@loc["message"]">
                            <CellTemplate>
                                <div class="message">@context.Item.Message </div>
                                <CopyToClipboard Text="@context.Item.Sha" IconSize="Size.Small">
                                    <div class="sha">@context.Item.Sha </div>
                                </CopyToClipboard>
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="@loc["commited"]">
                            <CellTemplate>
                                @if (context.Item.Commited is not null)
                                {
                                    <MudText>@context.Item.Commited.Humanize()</MudText>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="Commit" />
                    </PagerContent>
                </MudDataGrid>
            }
        </div>
    </StartContent>
    <EndContent>
        @if (_model is not null && _selectedItems.Count > 0)
        {
            <MudTabs Style="width: 100%">
                <MudTabPanel Text="@loc["impact"]">
                    <TestBucket.Components.Code.Controls.ProjectArchitectureView SelectedItems="@_impact" Model="@_model" />
                </MudTabPanel>
                <MudTabPanel Text="@loc["changed-files"]">
                    <MudStack Spacing="0">
                        <div class="changed-files">
                            @foreach (var commit in _selectedItems)
                            {
                                if (commit.CommitFiles is not null)
                                {
                                    @foreach (var file in commit.CommitFiles)
                                    {
                                        <div>@file.Path</div>
                                        <div class='changes'>+/i @file.Changes</div>
                                        <div class='additions'>+ @file.Additions</div>
                                        <div class='deletions'>- @file.Deletions</div>
                                    }
                                }
                            }

                            @if (Project is not null)
                            {
                                <MudStack Class="mt-5">
                                    <MudText Typo="Typo.h6">@loc["assign-changed-files-to-feature"]</MudText>
                                    <MudStack Style="width: 100%" Class="pa-2" Row>
                                        <FeatureSelect TestProjectId="@Project.Id" @bind-SelectedFeature="_selectedFeature" />
                                        <MudButton Variant="Variant.Filled" OnClick="AssignChangedFilesToFeature">@loc["update"]</MudButton>
                                    </MudStack>
                                </MudStack>
                            }
                        </div>
                    </MudStack>
                </MudTabPanel>
            </MudTabs>
        }
    </EndContent>
</Splitter>



@code {
    [Parameter] public string? TenantId { get; set; }
    [CascadingParameter] public TestProject? Project { get; set; }
    private List<NamedArchitecturalComponent> _impact = [];
    private ProjectArchitectureModel? _model;
    private HashSet<Commit> _selectedItems = [];
    private string? _selectedFeature = null;

    private async Task AssignChangedFilesToFeature()
    {
        if (_selectedFeature is not null && Project?.Id is not null)
        {
            await architectureController.AddCommitsToFeatureAsync(Project.Id, _selectedFeature, _selectedItems);
        }
    }

    private async Task OnSelectedItemsChanged(HashSet<Commit> selectedItems)
    {
        if (Project is null)
        {
            return;
        }
        _selectedItems = selectedItems;
        _impact.Clear();
        foreach (var commit in _selectedItems)
        {
            if (commit?.ComponentNames is not null)
            {
                foreach (var componentName in commit.ComponentNames)
                {
                    var component = await architectureController.GetComponentByNameAsync(Project, componentName);
                    if (component is not null)
                    {
                        _impact.Add(new NamedArchitecturalComponent(componentName, new ArchitecturalComponent { Paths = component.GlobPatterns }));
                    }
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Project is not null)
        {
            _model = await architectureController.GetProductArchitectureAsync(Project);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Project is not null)
        {
            _model = await architectureController.GetProductArchitectureAsync(Project);
        }
    }

    /// <summary>
    /// Loads commit data
    /// </summary>
    /// <param name="state"></param>
    /// <returns></returns>
    private async Task<GridData<Commit>> LoadGridData(GridState<Commit> state)
    {
        if (Project is null)
        {
            return new GridData<Commit> { TotalItems = 0 };
        }

        var result = await commitController.BrowseCommitsAsync(Project.Id, state.Page * state.PageSize, state.PageSize);

        GridData<Commit> data = new()
            {
                Items = result.Items,
                TotalItems = (int)result.TotalCount
            };

        return data;
    }
}